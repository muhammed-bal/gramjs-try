{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageContainer = void 0;\nconst TLMessage_1 = require(\"./TLMessage\");\nclass MessageContainer {\n  constructor(messages) {\n    this.CONSTRUCTOR_ID = 0x73f1f8dc;\n    this.messages = messages;\n    this.classType = \"constructor\";\n  }\n  static async fromReader(reader) {\n    const messages = [];\n    const length = reader.readInt();\n    for (let x = 0; x < length; x++) {\n      const msgId = reader.readLong();\n      const seqNo = reader.readInt();\n      const length = reader.readInt();\n      const before = reader.tellPosition();\n      const obj = reader.tgReadObject();\n      reader.setPosition(before + length);\n      const tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);\n      messages.push(tlMessage);\n    }\n    return new MessageContainer(messages);\n  }\n}\nexports.MessageContainer = MessageContainer;\nMessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;\nMessageContainer.classType = \"constructor\";\n// Maximum size in bytes for the inner payload of the container.\n// Telegram will close the connection if the payload is bigger.\n// The overhead of the container itself is subtracted.\nMessageContainer.MAXIMUM_SIZE = 1044456 - 8;\n// Maximum amount of messages that can't be sent inside a single\n// container, inclusive. Beyond this limit Telegram will respond\n// with BAD_MESSAGE 64 (invalid container).\n//\n// This limit is not 100% accurate and may in some cases be higher.\n// However, sending up to 100 requests at once in a single container\n// is a reasonable conservative value, since it could also depend on\n// other factors like size per request, but we cannot know this.\nMessageContainer.MAXIMUM_LENGTH = 100;","map":{"version":3,"names":["Object","defineProperty","exports","value","MessageContainer","TLMessage_1","require","constructor","messages","CONSTRUCTOR_ID","classType","fromReader","reader","length","readInt","x","msgId","readLong","seqNo","before","tellPosition","obj","tgReadObject","setPosition","tlMessage","TLMessage","push","MAXIMUM_SIZE","MAXIMUM_LENGTH"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/tl/core/MessageContainer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MessageContainer = void 0;\r\nconst TLMessage_1 = require(\"./TLMessage\");\r\nclass MessageContainer {\r\n    constructor(messages) {\r\n        this.CONSTRUCTOR_ID = 0x73f1f8dc;\r\n        this.messages = messages;\r\n        this.classType = \"constructor\";\r\n    }\r\n    static async fromReader(reader) {\r\n        const messages = [];\r\n        const length = reader.readInt();\r\n        for (let x = 0; x < length; x++) {\r\n            const msgId = reader.readLong();\r\n            const seqNo = reader.readInt();\r\n            const length = reader.readInt();\r\n            const before = reader.tellPosition();\r\n            const obj = reader.tgReadObject();\r\n            reader.setPosition(before + length);\r\n            const tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);\r\n            messages.push(tlMessage);\r\n        }\r\n        return new MessageContainer(messages);\r\n    }\r\n}\r\nexports.MessageContainer = MessageContainer;\r\nMessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;\r\nMessageContainer.classType = \"constructor\";\r\n// Maximum size in bytes for the inner payload of the container.\r\n// Telegram will close the connection if the payload is bigger.\r\n// The overhead of the container itself is subtracted.\r\nMessageContainer.MAXIMUM_SIZE = 1044456 - 8;\r\n// Maximum amount of messages that can't be sent inside a single\r\n// container, inclusive. Beyond this limit Telegram will respond\r\n// with BAD_MESSAGE 64 (invalid container).\r\n//\r\n// This limit is not 100% accurate and may in some cases be higher.\r\n// However, sending up to 100 requests at once in a single container\r\n// is a reasonable conservative value, since it could also depend on\r\n// other factors like size per request, but we cannot know this.\r\nMessageContainer.MAXIMUM_LENGTH = 100;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMF,gBAAgB,CAAC;EACnBG,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACC,cAAc,GAAG,UAAU;IAChC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,SAAS,GAAG,aAAa;EAClC;EACA,aAAaC,UAAUA,CAACC,MAAM,EAAE;IAC5B,MAAMJ,QAAQ,GAAG,EAAE;IACnB,MAAMK,MAAM,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,EAAE,EAAE;MAC7B,MAAMC,KAAK,GAAGJ,MAAM,CAACK,QAAQ,CAAC,CAAC;MAC/B,MAAMC,KAAK,GAAGN,MAAM,CAACE,OAAO,CAAC,CAAC;MAC9B,MAAMD,MAAM,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;MAC/B,MAAMK,MAAM,GAAGP,MAAM,CAACQ,YAAY,CAAC,CAAC;MACpC,MAAMC,GAAG,GAAGT,MAAM,CAACU,YAAY,CAAC,CAAC;MACjCV,MAAM,CAACW,WAAW,CAACJ,MAAM,GAAGN,MAAM,CAAC;MACnC,MAAMW,SAAS,GAAG,IAAInB,WAAW,CAACoB,SAAS,CAACT,KAAK,EAAEE,KAAK,EAAEG,GAAG,CAAC;MAC9Db,QAAQ,CAACkB,IAAI,CAACF,SAAS,CAAC;IAC5B;IACA,OAAO,IAAIpB,gBAAgB,CAACI,QAAQ,CAAC;EACzC;AACJ;AACAN,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB;AAC3CA,gBAAgB,CAACK,cAAc,GAAG,UAAU;AAC5CL,gBAAgB,CAACM,SAAS,GAAG,aAAa;AAC1C;AACA;AACA;AACAN,gBAAgB,CAACuB,YAAY,GAAG,OAAO,GAAG,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,gBAAgB,CAACwB,cAAc,GAAG,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}