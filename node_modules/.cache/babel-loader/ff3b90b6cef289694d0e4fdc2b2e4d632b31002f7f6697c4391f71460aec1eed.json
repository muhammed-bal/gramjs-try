{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageButton = void 0;\nconst api_1 = require(\"../api\");\nconst button_1 = require(\"./button\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst Password_1 = require(\"../../Password\");\nconst inspect_1 = require(\"../../inspect\");\nclass MessageButton {\n  constructor(client, original, chat, bot, msgId) {\n    this.button = original;\n    this._bot = bot;\n    this._chat = chat;\n    this._msgId = msgId;\n    this._client = client;\n  }\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  get client() {\n    return this._client;\n  }\n  get text() {\n    return !(this.button instanceof button_1.Button) ? this.button.text : \"\";\n  }\n  get data() {\n    if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\n      return this.button.data;\n    }\n  }\n  get inlineQuery() {\n    if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\n      return this.button.query;\n    }\n  }\n  get url() {\n    if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\n      return this.button.url;\n    }\n  }\n  /**\r\n   * Emulates the behaviour of clicking this button.\r\n     If it's a normal `KeyboardButton` with text, a message will be\r\n   sent, and the sent `Message <Message>` returned.\r\n     If it's an inline `KeyboardButtonCallback` with text and data,\r\n   it will be \"clicked\" and the `BotCallbackAnswer` returned.\r\n     If it's an inline `KeyboardButtonSwitchInline` button, the\r\n   `StartBot` will be invoked and the resulting updates\r\n   returned.\r\n     If it's a `KeyboardButtonUrl`, the URL of the button will\r\n   be returned.\r\n     If it's a `KeyboardButtonRequestPhone`, you must indicate that you\r\n   want to ``sharePhone=True`` in order to share it. Sharing it is not a\r\n   default because it is a privacy concern and could happen accidentally.\r\n     You may also use ``sharePhone=phone`` to share a specific number, in\r\n   which case either `str` or `InputMediaContact` should be used.\r\n     If it's a `KeyboardButtonRequestGeoLocation`, you must pass a\r\n   tuple in ``shareGeo=[longitude, latitude]``. Note that Telegram seems\r\n   to have some heuristics to determine impossible locations, so changing\r\n   this value a lot quickly may not work as expected. You may also pass a\r\n   `InputGeoPoint` if you find the order confusing.\r\n   */\n  async click({\n    sharePhone = false,\n    shareGeo = [0, 0],\n    password\n  }) {\n    if (this.button instanceof api_1.Api.KeyboardButton) {\n      return this._client.sendMessage(this._chat, {\n        message: this.button.text,\n        parseMode: undefined\n      });\n    } else if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\n      let encryptedPassword;\n      if (password != undefined) {\n        const pwd = await this.client.invoke(new api_1.Api.account.GetPassword());\n        encryptedPassword = await (0, Password_1.computeCheck)(pwd, password);\n      }\n      const request = new api_1.Api.messages.GetBotCallbackAnswer({\n        peer: this._chat,\n        msgId: this._msgId,\n        data: this.button.data,\n        password: encryptedPassword\n      });\n      try {\n        return await this._client.invoke(request);\n      } catch (e) {\n        if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\n          return null;\n        }\n        throw e;\n      }\n    } else if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\n      return this._client.invoke(new api_1.Api.messages.StartBot({\n        bot: this._bot,\n        peer: this._chat,\n        startParam: this.button.query\n      }));\n    } else if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\n      return this.button.url;\n    } else if (this.button instanceof api_1.Api.KeyboardButtonGame) {\n      const request = new api_1.Api.messages.GetBotCallbackAnswer({\n        peer: this._chat,\n        msgId: this._msgId,\n        game: true\n      });\n      try {\n        return await this._client.invoke(request);\n      } catch (e) {\n        if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\n          return null;\n        }\n        throw e;\n      }\n    } else if (this.button instanceof api_1.Api.KeyboardButtonRequestPhone) {\n      if (!sharePhone) {\n        throw new Error(\"cannot click on phone buttons unless sharePhone=true\");\n      }\n      if (sharePhone == true || typeof sharePhone == \"string\") {\n        const me = await this._client.getMe();\n        sharePhone = new api_1.Api.InputMediaContact({\n          phoneNumber: (sharePhone == true ? me.phone : sharePhone) || \"\",\n          firstName: me.firstName || \"\",\n          lastName: me.lastName || \"\",\n          vcard: \"\"\n        });\n      }\n      throw new Error(\"Not supported for now\");\n      // TODO\n      //return this._client.sendFile(this._chat, phoneMedia);\n    } else if (this.button instanceof api_1.Api.InputWebFileGeoPointLocation) {\n      if (!shareGeo) {\n        throw new Error(\"cannot click on geo buttons unless shareGeo=[longitude, latitude]\");\n      }\n      throw new Error(\"Not supported for now\");\n      // TODO\n      //return this._client.sendFile(this._chat, geoMedia);\n    }\n  }\n}\n\nexports.MessageButton = MessageButton;","map":{"version":3,"names":["Object","defineProperty","exports","value","MessageButton","api_1","require","button_1","Helpers_1","Password_1","inspect_1","constructor","client","original","chat","bot","msgId","button","_bot","_chat","_msgId","_client","inspect","custom","betterConsoleLog","text","Button","data","Api","KeyboardButtonCallback","inlineQuery","KeyboardButtonSwitchInline","query","url","KeyboardButtonUrl","click","sharePhone","shareGeo","password","KeyboardButton","sendMessage","message","parseMode","undefined","encryptedPassword","pwd","invoke","account","GetPassword","computeCheck","request","messages","GetBotCallbackAnswer","peer","e","errorMessage","StartBot","startParam","KeyboardButtonGame","game","KeyboardButtonRequestPhone","Error","me","getMe","InputMediaContact","phoneNumber","phone","firstName","lastName","vcard","InputWebFileGeoPointLocation"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/tl/custom/messageButton.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MessageButton = void 0;\r\nconst api_1 = require(\"../api\");\r\nconst button_1 = require(\"./button\");\r\nconst Helpers_1 = require(\"../../Helpers\");\r\nconst Password_1 = require(\"../../Password\");\r\nconst inspect_1 = require(\"../../inspect\");\r\nclass MessageButton {\r\n    constructor(client, original, chat, bot, msgId) {\r\n        this.button = original;\r\n        this._bot = bot;\r\n        this._chat = chat;\r\n        this._msgId = msgId;\r\n        this._client = client;\r\n    }\r\n    [inspect_1.inspect.custom]() {\r\n        return (0, Helpers_1.betterConsoleLog)(this);\r\n    }\r\n    get client() {\r\n        return this._client;\r\n    }\r\n    get text() {\r\n        return !(this.button instanceof button_1.Button) ? this.button.text : \"\";\r\n    }\r\n    get data() {\r\n        if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\r\n            return this.button.data;\r\n        }\r\n    }\r\n    get inlineQuery() {\r\n        if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\r\n            return this.button.query;\r\n        }\r\n    }\r\n    get url() {\r\n        if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\r\n            return this.button.url;\r\n        }\r\n    }\r\n    /**\r\n     * Emulates the behaviour of clicking this button.\r\n\r\n     If it's a normal `KeyboardButton` with text, a message will be\r\n     sent, and the sent `Message <Message>` returned.\r\n\r\n     If it's an inline `KeyboardButtonCallback` with text and data,\r\n     it will be \"clicked\" and the `BotCallbackAnswer` returned.\r\n\r\n     If it's an inline `KeyboardButtonSwitchInline` button, the\r\n     `StartBot` will be invoked and the resulting updates\r\n     returned.\r\n\r\n     If it's a `KeyboardButtonUrl`, the URL of the button will\r\n     be returned.\r\n\r\n     If it's a `KeyboardButtonRequestPhone`, you must indicate that you\r\n     want to ``sharePhone=True`` in order to share it. Sharing it is not a\r\n     default because it is a privacy concern and could happen accidentally.\r\n\r\n     You may also use ``sharePhone=phone`` to share a specific number, in\r\n     which case either `str` or `InputMediaContact` should be used.\r\n\r\n     If it's a `KeyboardButtonRequestGeoLocation`, you must pass a\r\n     tuple in ``shareGeo=[longitude, latitude]``. Note that Telegram seems\r\n     to have some heuristics to determine impossible locations, so changing\r\n     this value a lot quickly may not work as expected. You may also pass a\r\n     `InputGeoPoint` if you find the order confusing.\r\n     */\r\n    async click({ sharePhone = false, shareGeo = [0, 0], password, }) {\r\n        if (this.button instanceof api_1.Api.KeyboardButton) {\r\n            return this._client.sendMessage(this._chat, {\r\n                message: this.button.text,\r\n                parseMode: undefined,\r\n            });\r\n        }\r\n        else if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\r\n            let encryptedPassword;\r\n            if (password != undefined) {\r\n                const pwd = await this.client.invoke(new api_1.Api.account.GetPassword());\r\n                encryptedPassword = await (0, Password_1.computeCheck)(pwd, password);\r\n            }\r\n            const request = new api_1.Api.messages.GetBotCallbackAnswer({\r\n                peer: this._chat,\r\n                msgId: this._msgId,\r\n                data: this.button.data,\r\n                password: encryptedPassword,\r\n            });\r\n            try {\r\n                return await this._client.invoke(request);\r\n            }\r\n            catch (e) {\r\n                if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\r\n                    return null;\r\n                }\r\n                throw e;\r\n            }\r\n        }\r\n        else if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\r\n            return this._client.invoke(new api_1.Api.messages.StartBot({\r\n                bot: this._bot,\r\n                peer: this._chat,\r\n                startParam: this.button.query,\r\n            }));\r\n        }\r\n        else if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\r\n            return this.button.url;\r\n        }\r\n        else if (this.button instanceof api_1.Api.KeyboardButtonGame) {\r\n            const request = new api_1.Api.messages.GetBotCallbackAnswer({\r\n                peer: this._chat,\r\n                msgId: this._msgId,\r\n                game: true,\r\n            });\r\n            try {\r\n                return await this._client.invoke(request);\r\n            }\r\n            catch (e) {\r\n                if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\r\n                    return null;\r\n                }\r\n                throw e;\r\n            }\r\n        }\r\n        else if (this.button instanceof api_1.Api.KeyboardButtonRequestPhone) {\r\n            if (!sharePhone) {\r\n                throw new Error(\"cannot click on phone buttons unless sharePhone=true\");\r\n            }\r\n            if (sharePhone == true || typeof sharePhone == \"string\") {\r\n                const me = (await this._client.getMe());\r\n                sharePhone = new api_1.Api.InputMediaContact({\r\n                    phoneNumber: (sharePhone == true ? me.phone : sharePhone) || \"\",\r\n                    firstName: me.firstName || \"\",\r\n                    lastName: me.lastName || \"\",\r\n                    vcard: \"\",\r\n                });\r\n            }\r\n            throw new Error(\"Not supported for now\");\r\n            // TODO\r\n            //return this._client.sendFile(this._chat, phoneMedia);\r\n        }\r\n        else if (this.button instanceof api_1.Api.InputWebFileGeoPointLocation) {\r\n            if (!shareGeo) {\r\n                throw new Error(\"cannot click on geo buttons unless shareGeo=[longitude, latitude]\");\r\n            }\r\n            throw new Error(\"Not supported for now\");\r\n            // TODO\r\n            //return this._client.sendFile(this._chat, geoMedia);\r\n        }\r\n    }\r\n}\r\nexports.MessageButton = MessageButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}