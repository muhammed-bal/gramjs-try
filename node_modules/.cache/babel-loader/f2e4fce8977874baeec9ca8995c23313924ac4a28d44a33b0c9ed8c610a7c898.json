{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemorySession = void 0;\nconst Abstract_1 = require(\"./Abstract\");\nconst tl_1 = require(\"../tl\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst Utils_1 = require(\"../Utils\");\nconst Helpers_1 = require(\"../Helpers\");\nconst __1 = require(\"../\");\nclass MemorySession extends Abstract_1.Session {\n  constructor() {\n    super();\n    this._serverAddress = undefined;\n    this._dcId = 0;\n    this._port = undefined;\n    this._takeoutId = undefined;\n    this._entities = new Set();\n    this._updateStates = {};\n  }\n  setDC(dcId, serverAddress, port) {\n    this._dcId = dcId | 0;\n    this._serverAddress = serverAddress;\n    this._port = port;\n  }\n  get dcId() {\n    return this._dcId;\n  }\n  get serverAddress() {\n    return this._serverAddress;\n  }\n  get port() {\n    return this._port;\n  }\n  get authKey() {\n    return this._authKey;\n  }\n  set authKey(value) {\n    this._authKey = value;\n  }\n  get takeoutId() {\n    return this._takeoutId;\n  }\n  set takeoutId(value) {\n    this._takeoutId = value;\n  }\n  getAuthKey(dcId) {\n    if (dcId && dcId !== this.dcId) {\n      // Not supported.\n      return undefined;\n    }\n    return this.authKey;\n  }\n  setAuthKey(authKey, dcId) {\n    if (dcId && dcId !== this.dcId) {\n      // Not supported.\n      return undefined;\n    }\n    this.authKey = authKey;\n  }\n  close() {}\n  save() {}\n  async load() {}\n  delete() {}\n  _entityValuesToRow(id, hash, username, phone, name) {\n    // While this is a simple implementation it might be overrode by,\n    // other classes so they don't need to implement the plural form\n    // of the method. Don't remove.\n    return [id, hash, username, phone, name];\n  }\n  _entityToRow(e) {\n    if (!(e.classType === \"constructor\")) {\n      return;\n    }\n    let p;\n    let markedId;\n    try {\n      p = (0, Utils_1.getInputPeer)(e, false);\n      markedId = (0, Utils_1.getPeerId)(p);\n    } catch (e) {\n      return;\n    }\n    let pHash;\n    if (p instanceof tl_1.Api.InputPeerUser || p instanceof tl_1.Api.InputPeerChannel) {\n      pHash = p.accessHash;\n    } else if (p instanceof tl_1.Api.InputPeerChat) {\n      pHash = big_integer_1.default.zero;\n    } else {\n      return;\n    }\n    let username = e.username;\n    if (username) {\n      username = username.toLowerCase();\n    }\n    const phone = e.phone;\n    const name = (0, Utils_1.getDisplayName)(e);\n    return this._entityValuesToRow(markedId, pHash, username, phone, name);\n  }\n  _entitiesToRows(tlo) {\n    let entities = [];\n    if (!(tlo.classType === \"constructor\") && (0, Helpers_1.isArrayLike)(tlo)) {\n      // This may be a list of users already for instance\n      entities = tlo;\n    } else {\n      if (typeof tlo === \"object\") {\n        if (\"user\" in tlo) {\n          entities.push(tlo.user);\n        }\n        if (\"chat\" in tlo) {\n          entities.push(tlo.chat);\n        }\n        if (\"channel\" in tlo) {\n          entities.push(tlo.channel);\n        }\n        if (\"chats\" in tlo && (0, Helpers_1.isArrayLike)(tlo.chats)) {\n          entities = entities.concat(tlo.chats);\n        }\n        if (\"users\" in tlo && (0, Helpers_1.isArrayLike)(tlo.users)) {\n          entities = entities.concat(tlo.users);\n        }\n      }\n    }\n    const rows = []; // Rows to add (id, hash, username, phone, name)\n    for (const e of entities) {\n      const row = this._entityToRow(e);\n      if (row) {\n        rows.push(row);\n      }\n    }\n    return rows;\n  }\n  processEntities(tlo) {\n    const entitiesSet = this._entitiesToRows(tlo);\n    for (const e of entitiesSet) {\n      this._entities.add(e);\n    }\n  }\n  getEntityRowsByPhone(phone) {\n    for (const e of this._entities) {\n      // id, hash, username, phone, name\n      if (e[3] === phone) {\n        return [e[0], e[1]];\n      }\n    }\n  }\n  getEntityRowsByUsername(username) {\n    for (const e of this._entities) {\n      // id, hash, username, phone, name\n      if (e[2] === username) {\n        return [e[0], e[1]];\n      }\n    }\n  }\n  getEntityRowsByName(name) {\n    for (const e of this._entities) {\n      // id, hash, username, phone, name\n      if (e[4] === name) {\n        return [e[0], e[1]];\n      }\n    }\n  }\n  getEntityRowsById(id, exact = true) {\n    if (exact) {\n      for (const e of this._entities) {\n        // id, hash, username, phone, name\n        if (e[0] === id) {\n          return [e[0], e[1]];\n        }\n      }\n    } else {\n      const ids = [__1.utils.getPeerId(new tl_1.Api.PeerUser({\n        userId: (0, Helpers_1.returnBigInt)(id)\n      })), __1.utils.getPeerId(new tl_1.Api.PeerChat({\n        chatId: (0, Helpers_1.returnBigInt)(id)\n      })), __1.utils.getPeerId(new tl_1.Api.PeerChannel({\n        channelId: (0, Helpers_1.returnBigInt)(id)\n      }))];\n      for (const e of this._entities) {\n        // id, hash, username, phone, name\n        if (ids.includes(e[0])) {\n          return [e[0], e[1]];\n        }\n      }\n    }\n  }\n  getInputEntity(key) {\n    let exact;\n    if (typeof key === \"object\" && !big_integer_1.default.isInstance(key) && key.SUBCLASS_OF_ID) {\n      if (key.SUBCLASS_OF_ID == 0xc91c90b6 || key.SUBCLASS_OF_ID == 0xe669bf46 || key.SUBCLASS_OF_ID == 0x40f202fd) {\n        // @ts-ignore\n        return key;\n      }\n      // Try to early return if this key can be casted as input peer\n      return __1.utils.getInputPeer(key);\n    } else {\n      // Not a TLObject or can't be cast into InputPeer\n      if (typeof key === \"object\") {\n        key = __1.utils.getPeerId(key);\n        exact = true;\n      } else {\n        exact = false;\n      }\n    }\n    if (big_integer_1.default.isInstance(key) || typeof key == \"bigint\" || typeof key == \"number\") {\n      key = key.toString();\n    }\n    let result = undefined;\n    if (typeof key === \"string\") {\n      const phone = __1.utils.parsePhone(key);\n      if (phone) {\n        result = this.getEntityRowsByPhone(phone);\n      } else {\n        const {\n          username,\n          isInvite\n        } = __1.utils.parseUsername(key);\n        if (username && !isInvite) {\n          result = this.getEntityRowsByUsername(username);\n        }\n      }\n      if (!result) {\n        const id = __1.utils.parseID(key);\n        if (id) {\n          result = this.getEntityRowsById(id, exact);\n        }\n      }\n      if (!result) {\n        result = this.getEntityRowsByName(key);\n      }\n    }\n    if (result) {\n      let entityId = result[0]; // unpack resulting tuple\n      const entityHash = (0, big_integer_1.default)(result[1]);\n      const resolved = __1.utils.resolveId((0, Helpers_1.returnBigInt)(entityId));\n      entityId = resolved[0];\n      const kind = resolved[1];\n      // removes the mark and returns type of entity\n      if (kind === tl_1.Api.PeerUser) {\n        return new tl_1.Api.InputPeerUser({\n          userId: entityId,\n          accessHash: entityHash\n        });\n      } else if (kind === tl_1.Api.PeerChat) {\n        return new tl_1.Api.InputPeerChat({\n          chatId: entityId\n        });\n      } else if (kind === tl_1.Api.PeerChannel) {\n        return new tl_1.Api.InputPeerChannel({\n          channelId: entityId,\n          accessHash: entityHash\n        });\n      }\n    } else {\n      throw new Error(\"Could not find input entity with key \" + key);\n    }\n    throw new Error(\"Could not find input entity with key \" + key);\n  }\n}\nexports.MemorySession = MemorySession;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","MemorySession","Abstract_1","require","tl_1","big_integer_1","Utils_1","Helpers_1","__1","Session","constructor","_serverAddress","undefined","_dcId","_port","_takeoutId","_entities","Set","_updateStates","setDC","dcId","serverAddress","port","authKey","_authKey","takeoutId","getAuthKey","setAuthKey","close","save","load","delete","_entityValuesToRow","id","hash","username","phone","name","_entityToRow","e","classType","p","markedId","getInputPeer","getPeerId","pHash","Api","InputPeerUser","InputPeerChannel","accessHash","InputPeerChat","default","zero","toLowerCase","getDisplayName","_entitiesToRows","tlo","entities","isArrayLike","push","user","chat","channel","chats","concat","users","rows","row","processEntities","entitiesSet","add","getEntityRowsByPhone","getEntityRowsByUsername","getEntityRowsByName","getEntityRowsById","exact","ids","utils","PeerUser","userId","returnBigInt","PeerChat","chatId","PeerChannel","channelId","includes","getInputEntity","key","isInstance","SUBCLASS_OF_ID","toString","result","parsePhone","isInvite","parseUsername","parseID","entityId","entityHash","resolved","resolveId","kind","Error"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/sessions/Memory.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MemorySession = void 0;\r\nconst Abstract_1 = require(\"./Abstract\");\r\nconst tl_1 = require(\"../tl\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Utils_1 = require(\"../Utils\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst __1 = require(\"../\");\r\nclass MemorySession extends Abstract_1.Session {\r\n    constructor() {\r\n        super();\r\n        this._serverAddress = undefined;\r\n        this._dcId = 0;\r\n        this._port = undefined;\r\n        this._takeoutId = undefined;\r\n        this._entities = new Set();\r\n        this._updateStates = {};\r\n    }\r\n    setDC(dcId, serverAddress, port) {\r\n        this._dcId = dcId | 0;\r\n        this._serverAddress = serverAddress;\r\n        this._port = port;\r\n    }\r\n    get dcId() {\r\n        return this._dcId;\r\n    }\r\n    get serverAddress() {\r\n        return this._serverAddress;\r\n    }\r\n    get port() {\r\n        return this._port;\r\n    }\r\n    get authKey() {\r\n        return this._authKey;\r\n    }\r\n    set authKey(value) {\r\n        this._authKey = value;\r\n    }\r\n    get takeoutId() {\r\n        return this._takeoutId;\r\n    }\r\n    set takeoutId(value) {\r\n        this._takeoutId = value;\r\n    }\r\n    getAuthKey(dcId) {\r\n        if (dcId && dcId !== this.dcId) {\r\n            // Not supported.\r\n            return undefined;\r\n        }\r\n        return this.authKey;\r\n    }\r\n    setAuthKey(authKey, dcId) {\r\n        if (dcId && dcId !== this.dcId) {\r\n            // Not supported.\r\n            return undefined;\r\n        }\r\n        this.authKey = authKey;\r\n    }\r\n    close() { }\r\n    save() { }\r\n    async load() { }\r\n    delete() { }\r\n    _entityValuesToRow(id, hash, username, phone, name) {\r\n        // While this is a simple implementation it might be overrode by,\r\n        // other classes so they don't need to implement the plural form\r\n        // of the method. Don't remove.\r\n        return [id, hash, username, phone, name];\r\n    }\r\n    _entityToRow(e) {\r\n        if (!(e.classType === \"constructor\")) {\r\n            return;\r\n        }\r\n        let p;\r\n        let markedId;\r\n        try {\r\n            p = (0, Utils_1.getInputPeer)(e, false);\r\n            markedId = (0, Utils_1.getPeerId)(p);\r\n        }\r\n        catch (e) {\r\n            return;\r\n        }\r\n        let pHash;\r\n        if (p instanceof tl_1.Api.InputPeerUser ||\r\n            p instanceof tl_1.Api.InputPeerChannel) {\r\n            pHash = p.accessHash;\r\n        }\r\n        else if (p instanceof tl_1.Api.InputPeerChat) {\r\n            pHash = big_integer_1.default.zero;\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        let username = e.username;\r\n        if (username) {\r\n            username = username.toLowerCase();\r\n        }\r\n        const phone = e.phone;\r\n        const name = (0, Utils_1.getDisplayName)(e);\r\n        return this._entityValuesToRow(markedId, pHash, username, phone, name);\r\n    }\r\n    _entitiesToRows(tlo) {\r\n        let entities = [];\r\n        if (!(tlo.classType === \"constructor\") && (0, Helpers_1.isArrayLike)(tlo)) {\r\n            // This may be a list of users already for instance\r\n            entities = tlo;\r\n        }\r\n        else {\r\n            if (typeof tlo === \"object\") {\r\n                if (\"user\" in tlo) {\r\n                    entities.push(tlo.user);\r\n                }\r\n                if (\"chat\" in tlo) {\r\n                    entities.push(tlo.chat);\r\n                }\r\n                if (\"channel\" in tlo) {\r\n                    entities.push(tlo.channel);\r\n                }\r\n                if (\"chats\" in tlo && (0, Helpers_1.isArrayLike)(tlo.chats)) {\r\n                    entities = entities.concat(tlo.chats);\r\n                }\r\n                if (\"users\" in tlo && (0, Helpers_1.isArrayLike)(tlo.users)) {\r\n                    entities = entities.concat(tlo.users);\r\n                }\r\n            }\r\n        }\r\n        const rows = []; // Rows to add (id, hash, username, phone, name)\r\n        for (const e of entities) {\r\n            const row = this._entityToRow(e);\r\n            if (row) {\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n    processEntities(tlo) {\r\n        const entitiesSet = this._entitiesToRows(tlo);\r\n        for (const e of entitiesSet) {\r\n            this._entities.add(e);\r\n        }\r\n    }\r\n    getEntityRowsByPhone(phone) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[3] === phone) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsByUsername(username) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[2] === username) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsByName(name) {\r\n        for (const e of this._entities) {\r\n            // id, hash, username, phone, name\r\n            if (e[4] === name) {\r\n                return [e[0], e[1]];\r\n            }\r\n        }\r\n    }\r\n    getEntityRowsById(id, exact = true) {\r\n        if (exact) {\r\n            for (const e of this._entities) {\r\n                // id, hash, username, phone, name\r\n                if (e[0] === id) {\r\n                    return [e[0], e[1]];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const ids = [\r\n                __1.utils.getPeerId(new tl_1.Api.PeerUser({ userId: (0, Helpers_1.returnBigInt)(id) })),\r\n                __1.utils.getPeerId(new tl_1.Api.PeerChat({ chatId: (0, Helpers_1.returnBigInt)(id) })),\r\n                __1.utils.getPeerId(new tl_1.Api.PeerChannel({ channelId: (0, Helpers_1.returnBigInt)(id) })),\r\n            ];\r\n            for (const e of this._entities) {\r\n                // id, hash, username, phone, name\r\n                if (ids.includes(e[0])) {\r\n                    return [e[0], e[1]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getInputEntity(key) {\r\n        let exact;\r\n        if (typeof key === \"object\" &&\r\n            !big_integer_1.default.isInstance(key) &&\r\n            key.SUBCLASS_OF_ID) {\r\n            if (key.SUBCLASS_OF_ID == 0xc91c90b6 ||\r\n                key.SUBCLASS_OF_ID == 0xe669bf46 ||\r\n                key.SUBCLASS_OF_ID == 0x40f202fd) {\r\n                // @ts-ignore\r\n                return key;\r\n            }\r\n            // Try to early return if this key can be casted as input peer\r\n            return __1.utils.getInputPeer(key);\r\n        }\r\n        else {\r\n            // Not a TLObject or can't be cast into InputPeer\r\n            if (typeof key === \"object\") {\r\n                key = __1.utils.getPeerId(key);\r\n                exact = true;\r\n            }\r\n            else {\r\n                exact = false;\r\n            }\r\n        }\r\n        if (big_integer_1.default.isInstance(key) ||\r\n            typeof key == \"bigint\" ||\r\n            typeof key == \"number\") {\r\n            key = key.toString();\r\n        }\r\n        let result = undefined;\r\n        if (typeof key === \"string\") {\r\n            const phone = __1.utils.parsePhone(key);\r\n            if (phone) {\r\n                result = this.getEntityRowsByPhone(phone);\r\n            }\r\n            else {\r\n                const { username, isInvite } = __1.utils.parseUsername(key);\r\n                if (username && !isInvite) {\r\n                    result = this.getEntityRowsByUsername(username);\r\n                }\r\n            }\r\n            if (!result) {\r\n                const id = __1.utils.parseID(key);\r\n                if (id) {\r\n                    result = this.getEntityRowsById(id, exact);\r\n                }\r\n            }\r\n            if (!result) {\r\n                result = this.getEntityRowsByName(key);\r\n            }\r\n        }\r\n        if (result) {\r\n            let entityId = result[0]; // unpack resulting tuple\r\n            const entityHash = (0, big_integer_1.default)(result[1]);\r\n            const resolved = __1.utils.resolveId((0, Helpers_1.returnBigInt)(entityId));\r\n            entityId = resolved[0];\r\n            const kind = resolved[1];\r\n            // removes the mark and returns type of entity\r\n            if (kind === tl_1.Api.PeerUser) {\r\n                return new tl_1.Api.InputPeerUser({\r\n                    userId: entityId,\r\n                    accessHash: entityHash,\r\n                });\r\n            }\r\n            else if (kind === tl_1.Api.PeerChat) {\r\n                return new tl_1.Api.InputPeerChat({ chatId: entityId });\r\n            }\r\n            else if (kind === tl_1.Api.PeerChannel) {\r\n                return new tl_1.Api.InputPeerChannel({\r\n                    channelId: entityId,\r\n                    accessHash: entityHash,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Could not find input entity with key \" + key);\r\n        }\r\n        throw new Error(\"Could not find input entity with key \" + key);\r\n    }\r\n}\r\nexports.MemorySession = MemorySession;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}