{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MarkdownV2Parser = void 0;\nconst html_1 = require(\"./html\");\nclass MarkdownV2Parser {\n  static parse(message) {\n    // Bold\n    message = message.replace(/\\*(.*?)\\*/g, \"<b>$1</b>\");\n    // underline\n    message = message.replace(/__(.*?)__/g, \"<u>$1</u>\");\n    // strikethrough\n    message = message.replace(/~(.*?)~/g, \"<s>$1</s>\");\n    // italic\n    message = message.replace(/-(.*?)-/g, \"<i>$1</i>\");\n    // pre\n    message = message.replace(/```(.*?)```/g, \"<pre>$1</pre>\");\n    // code\n    message = message.replace(/`(.*?)`/g, \"<code>$1</code>\");\n    // Spoiler\n    message = message.replace(/\\|\\|(.*?)\\|\\|/g, \"<spoiler>$1</spoiler>\");\n    // Inline URL\n    message = message.replace(/(?<!\\!)\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\">$1</a>');\n    // Emoji\n    message = message.replace(/!\\[([^\\]]+)\\]\\(tg:\\/\\/emoji\\?id=(\\d+)\\)/g, '<tg-emoji emoji-id=\"$2\">$1</tg-emoji>');\n    return html_1.HTMLParser.parse(message);\n  }\n  static unparse(text, entities) {\n    text = html_1.HTMLParser.unparse(text, entities);\n    // Bold\n    text = text.replace(/<b>(.*?)<\\/b>/g, \"*$1*\");\n    // Underline\n    text = text.replace(/<u>(.*?)<\\/u>/g, \"__$1__\");\n    // Code\n    text = text.replace(/<code>(.*?)<\\/code>/g, \"`$1`\");\n    // Pre\n    text = text.replace(/<pre>(.*?)<\\/pre>/g, \"```$1```\");\n    // strikethrough\n    text = text.replace(/<s>(.*?)<\\/s>/g, \"~$1~\");\n    // Italic\n    text = text.replace(/<i>(.*?)<\\/i>/g, \"-$1-\");\n    // Spoiler\n    text = text.replace(/<spoiler>(.*?)<\\/spoiler>/g, \"||$1||\");\n    // Inline URL\n    text = text.replace(/<a href=\"([^\"]+)\">([^<]+)<\\/a>/g, \"[$2]($1)\");\n    // Emoji\n    text = text.replace(/<tg-emoji emoji-id=\"(\\d+)\">([^<]+)<\\/tg-emoji>/g, \"![$2](tg://emoji?id=$1)\");\n    return text;\n  }\n}\nexports.MarkdownV2Parser = MarkdownV2Parser;","map":{"version":3,"names":["Object","defineProperty","exports","value","MarkdownV2Parser","html_1","require","parse","message","replace","HTMLParser","unparse","text","entities"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/extensions/markdownv2.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MarkdownV2Parser = void 0;\r\nconst html_1 = require(\"./html\");\r\nclass MarkdownV2Parser {\r\n    static parse(message) {\r\n        // Bold\r\n        message = message.replace(/\\*(.*?)\\*/g, \"<b>$1</b>\");\r\n        // underline\r\n        message = message.replace(/__(.*?)__/g, \"<u>$1</u>\");\r\n        // strikethrough\r\n        message = message.replace(/~(.*?)~/g, \"<s>$1</s>\");\r\n        // italic\r\n        message = message.replace(/-(.*?)-/g, \"<i>$1</i>\");\r\n        // pre\r\n        message = message.replace(/```(.*?)```/g, \"<pre>$1</pre>\");\r\n        // code\r\n        message = message.replace(/`(.*?)`/g, \"<code>$1</code>\");\r\n        // Spoiler\r\n        message = message.replace(/\\|\\|(.*?)\\|\\|/g, \"<spoiler>$1</spoiler>\");\r\n        // Inline URL\r\n        message = message.replace(/(?<!\\!)\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\">$1</a>');\r\n        // Emoji\r\n        message = message.replace(/!\\[([^\\]]+)\\]\\(tg:\\/\\/emoji\\?id=(\\d+)\\)/g, '<tg-emoji emoji-id=\"$2\">$1</tg-emoji>');\r\n        return html_1.HTMLParser.parse(message);\r\n    }\r\n    static unparse(text, entities) {\r\n        text = html_1.HTMLParser.unparse(text, entities);\r\n        // Bold\r\n        text = text.replace(/<b>(.*?)<\\/b>/g, \"*$1*\");\r\n        // Underline\r\n        text = text.replace(/<u>(.*?)<\\/u>/g, \"__$1__\");\r\n        // Code\r\n        text = text.replace(/<code>(.*?)<\\/code>/g, \"`$1`\");\r\n        // Pre\r\n        text = text.replace(/<pre>(.*?)<\\/pre>/g, \"```$1```\");\r\n        // strikethrough\r\n        text = text.replace(/<s>(.*?)<\\/s>/g, \"~$1~\");\r\n        // Italic\r\n        text = text.replace(/<i>(.*?)<\\/i>/g, \"-$1-\");\r\n        // Spoiler\r\n        text = text.replace(/<spoiler>(.*?)<\\/spoiler>/g, \"||$1||\");\r\n        // Inline URL\r\n        text = text.replace(/<a href=\"([^\"]+)\">([^<]+)<\\/a>/g, \"[$2]($1)\");\r\n        // Emoji\r\n        text = text.replace(/<tg-emoji emoji-id=\"(\\d+)\">([^<]+)<\\/tg-emoji>/g, \"![$2](tg://emoji?id=$1)\");\r\n        return text;\r\n    }\r\n}\r\nexports.MarkdownV2Parser = MarkdownV2Parser;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMF,gBAAgB,CAAC;EACnB,OAAOG,KAAKA,CAACC,OAAO,EAAE;IAClB;IACAA,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,YAAY,EAAE,WAAW,CAAC;IACpD;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,YAAY,EAAE,WAAW,CAAC;IACpD;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC;IAClD;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC;IAClD;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,cAAc,EAAE,eAAe,CAAC;IAC1D;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,UAAU,EAAE,iBAAiB,CAAC;IACxD;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,gBAAgB,EAAE,uBAAuB,CAAC;IACpE;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,iCAAiC,EAAE,qBAAqB,CAAC;IACnF;IACAD,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,0CAA0C,EAAE,uCAAuC,CAAC;IAC9G,OAAOJ,MAAM,CAACK,UAAU,CAACH,KAAK,CAACC,OAAO,CAAC;EAC3C;EACA,OAAOG,OAAOA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC3BD,IAAI,GAAGP,MAAM,CAACK,UAAU,CAACC,OAAO,CAACC,IAAI,EAAEC,QAAQ,CAAC;IAChD;IACAD,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;IAC7C;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAC/C;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;IACnD;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,oBAAoB,EAAE,UAAU,CAAC;IACrD;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;IAC7C;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;IAC7C;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,4BAA4B,EAAE,QAAQ,CAAC;IAC3D;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,iCAAiC,EAAE,UAAU,CAAC;IAClE;IACAG,IAAI,GAAGA,IAAI,CAACH,OAAO,CAAC,iDAAiD,EAAE,yBAAyB,CAAC;IACjG,OAAOG,IAAI;EACf;AACJ;AACAV,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}