{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDisplayName = exports.rtrim = exports.parseUsername = exports.resolveInviteLink = exports.parseID = exports.parsePhone = exports.getMessageId = exports.resolveId = exports.getPeerId = exports.sanitizeParseMode = exports.getPeer = exports.getAppropriatedPartSize = exports.getInputMedia = exports.getInputGeo = exports.getAttributes = exports.getExtension = exports.isImage = exports.isAudio = exports.getInputDocument = exports.getInputPhoto = exports.strippedPhotoToJpg = exports.getInputChatPhoto = exports.getInputMessage = exports.getInputUser = exports.getInputChannel = exports.getInnerText = exports._getEntityPair = exports._photoSizeByteCount = exports.getInputPeer = exports.chunks = exports.getFileInfo = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst tl_1 = require(\"./tl\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst mime_1 = __importDefault(require(\"mime\"));\nconst markdown_1 = require(\"./extensions/markdown\");\nconst markdownv2_1 = require(\"./extensions/markdownv2\");\nfunction getFileInfo(fileLocation) {\n  if (!fileLocation || !fileLocation.SUBCLASS_OF_ID) {\n    _raiseCastFail(fileLocation, \"InputFileLocation\");\n  }\n  if (fileLocation.SUBCLASS_OF_ID == 354669666) {\n    return {\n      dcId: undefined,\n      location: fileLocation,\n      size: undefined\n    };\n  }\n  let location;\n  if (fileLocation instanceof tl_1.Api.Message) {\n    location = fileLocation.media;\n  }\n  if (fileLocation instanceof tl_1.Api.MessageMediaDocument) {\n    location = fileLocation.document;\n  } else if (fileLocation instanceof tl_1.Api.MessageMediaPhoto) {\n    location = fileLocation.photo;\n  }\n  if (location instanceof tl_1.Api.Document) {\n    return {\n      dcId: location.dcId,\n      location: new tl_1.Api.InputDocumentFileLocation({\n        id: location.id,\n        accessHash: location.accessHash,\n        fileReference: location.fileReference,\n        thumbSize: \"\"\n      }),\n      size: location.size\n    };\n  } else if (location instanceof tl_1.Api.Photo) {\n    return {\n      dcId: location.dcId,\n      location: new tl_1.Api.InputPhotoFileLocation({\n        id: location.id,\n        accessHash: location.accessHash,\n        fileReference: location.fileReference,\n        thumbSize: location.sizes[location.sizes.length - 1].type\n      }),\n      size: (0, big_integer_1.default)(_photoSizeByteCount(location.sizes[location.sizes.length - 1]) || 0)\n    };\n  }\n  _raiseCastFail(fileLocation, \"InputFileLocation\");\n}\nexports.getFileInfo = getFileInfo;\n/**\r\n * Turns the given iterable into chunks of the specified size,\r\n * which is 100 by default since that's what Telegram uses the most.\r\n */\nfunction* chunks(arr, size = 100) {\n  for (let i = 0; i < arr.length; i += size) {\n    yield arr.slice(i, i + size);\n  }\n}\nexports.chunks = chunks;\nconst html_1 = require(\"./extensions/html\");\nconst Helpers_1 = require(\"./Helpers\");\nconst USERNAME_RE = new RegExp(\"@|(?:https?:\\\\/\\\\/)?(?:www\\\\.)?\" + \"(?:telegram\\\\.(?:me|dog)|t\\\\.me)\\\\/(@|joinchat\\\\/)?\", \"i\");\nconst JPEG_HEADER = buffer_1.Buffer.from(\"ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00\", \"hex\");\nconst JPEG_FOOTER = buffer_1.Buffer.from(\"ffd9\", \"hex\");\nconst TG_JOIN_RE = new RegExp(\"tg:\\\\/\\\\/(join)\\\\?invite=\", \"i\");\nconst VALID_USERNAME_RE = new RegExp(\"^([a-z]((?!__)[\\\\w\\\\d]){3,30}[a-z\\\\d]|gif|vid|\" + \"pic|bing|wiki|imdb|bold|vote|like|coub)$\", \"i\");\nfunction _raiseCastFail(entity, target) {\n  let toWrite = entity;\n  if (typeof entity === \"object\" && \"className\" in entity) {\n    toWrite = entity.className;\n  }\n  throw new Error(`Cannot cast ${toWrite} to any kind of ${target}`);\n}\n/**\r\n Gets the input peer for the given \"entity\" (user, chat or channel).\r\n\r\n A ``TypeError`` is raised if the given entity isn't a supported type\r\n or if ``check_hash is True`` but the entity's ``accessHash is None``\r\n *or* the entity contains ``min`` information. In this case, the hash\r\n cannot be used for general purposes, and thus is not returned to avoid\r\n any issues which can derive from invalid access hashes.\r\n\r\n Note that ``checkHash`` **is ignored** if an input peer is already\r\n passed since in that case we assume the user knows what they're doing.\r\n This is key to getting entities by explicitly passing ``hash = 0``.\r\n\r\n * @param entity\r\n * @param allowSelf\r\n * @param checkHash\r\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n  if (entity.SUBCLASS_OF_ID === undefined) {\n    // e.g. custom.Dialog (can't cyclic import).\n    if (allowSelf && \"inputEntity\" in entity) {\n      return entity.inputEntity;\n    } else if (\"entity\" in entity) {\n      return getInputPeer(entity.entity);\n    } else {\n      _raiseCastFail(entity, \"InputPeer\");\n    }\n  }\n  if (entity.SUBCLASS_OF_ID === 0xc91c90b6) {\n    // crc32(b'InputPeer')\n    return entity;\n  }\n  if (entity instanceof tl_1.Api.User) {\n    if (entity.self && allowSelf) {\n      return new tl_1.Api.InputPeerSelf();\n    } else if (entity.accessHash !== undefined && !entity.min || !checkHash) {\n      return new tl_1.Api.InputPeerUser({\n        userId: entity.id,\n        accessHash: entity.accessHash || (0, big_integer_1.default)(0)\n      });\n    } else {\n      throw new Error(\"User without accessHash or min cannot be input\");\n    }\n  }\n  if (entity instanceof tl_1.Api.Chat || entity instanceof tl_1.Api.ChatEmpty || entity instanceof tl_1.Api.ChatForbidden) {\n    return new tl_1.Api.InputPeerChat({\n      chatId: entity.id\n    });\n  }\n  if (entity instanceof tl_1.Api.Channel) {\n    if (entity.accessHash !== undefined && !entity.min || !checkHash) {\n      return new tl_1.Api.InputPeerChannel({\n        channelId: entity.id,\n        accessHash: entity.accessHash || (0, big_integer_1.default)(0)\n      });\n    } else {\n      throw new TypeError(\"Channel without accessHash or min info cannot be input\");\n    }\n  }\n  if (entity instanceof tl_1.Api.ChannelForbidden) {\n    // \"channelForbidden are never min\", and since their hash is\n    // also not optional, we assume that this truly is the case.\n    return new tl_1.Api.InputPeerChannel({\n      channelId: entity.id,\n      accessHash: entity.accessHash\n    });\n  }\n  if (entity instanceof tl_1.Api.InputUser) {\n    return new tl_1.Api.InputPeerUser({\n      userId: entity.userId,\n      accessHash: entity.accessHash\n    });\n  }\n  if (entity instanceof tl_1.Api.InputChannel) {\n    return new tl_1.Api.InputPeerChannel({\n      channelId: entity.channelId,\n      accessHash: entity.accessHash\n    });\n  }\n  if (entity instanceof tl_1.Api.UserEmpty) {\n    return new tl_1.Api.InputPeerEmpty();\n  }\n  if (entity instanceof tl_1.Api.UserFull) {\n    return getInputPeer(entity.id);\n  }\n  if (entity instanceof tl_1.Api.ChatFull) {\n    return new tl_1.Api.InputPeerChat({\n      chatId: entity.id\n    });\n  }\n  if (entity instanceof tl_1.Api.PeerChat) {\n    return new tl_1.Api.InputPeerChat({\n      chatId: entity.chatId\n    });\n  }\n  _raiseCastFail(entity, \"InputPeer\");\n}\nexports.getInputPeer = getInputPeer;\nfunction _photoSizeByteCount(size) {\n  if (size instanceof tl_1.Api.PhotoSize) {\n    return size.size;\n  } else if (size instanceof tl_1.Api.PhotoStrippedSize) {\n    if (size.bytes.length < 3 || size.bytes[0] != 1) {\n      return size.bytes.length;\n    }\n    return size.bytes.length + 622;\n  } else if (size instanceof tl_1.Api.PhotoCachedSize) {\n    return size.bytes.length;\n  } else if (size instanceof tl_1.Api.PhotoSizeEmpty) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\nexports._photoSizeByteCount = _photoSizeByteCount;\nfunction _getEntityPair(entityId, entities, cache, getInputPeerFunction = getInputPeer) {\n  const entity = entities.get(entityId);\n  let inputEntity;\n  try {\n    inputEntity = cache.get(entityId);\n  } catch (e) {\n    try {\n      inputEntity = getInputPeerFunction(inputEntity);\n    } catch (e) {}\n  }\n  return [entity, inputEntity];\n}\nexports._getEntityPair = _getEntityPair;\nfunction getInnerText(text, entities) {\n  const result = [];\n  entities.forEach(function (value, key) {\n    const start = value.offset;\n    const end = value.offset + value.length;\n    result.push(text.slice(start, end));\n  });\n  return result;\n}\nexports.getInnerText = getInnerText;\n/**\r\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\r\n\r\n .. important::\r\n\r\n This method does not validate for invalid general-purpose access\r\n hashes, unlike `get_input_peer`. Consider using instead:\r\n ``get_input_channel(get_input_peer(channel))``.\r\n\r\n * @param entity\r\n * @returns {InputChannel|*}\r\n */\nfunction getInputChannel(entity) {\n  if (typeof entity === \"string\" || typeof entity == \"number\" || typeof entity == \"bigint\" || big_integer_1.default.isInstance(entity)) {\n    _raiseCastFail(entity, \"InputChannel\");\n  }\n  if (entity.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(entity, \"InputChannel\");\n  }\n  if (entity.SUBCLASS_OF_ID === 0x40f202fd) {\n    // crc32(b'InputChannel')\n    return entity;\n  }\n  if (entity instanceof tl_1.Api.Channel || entity instanceof tl_1.Api.ChannelForbidden) {\n    return new tl_1.Api.InputChannel({\n      channelId: entity.id,\n      accessHash: entity.accessHash || big_integer_1.default.zero\n    });\n  }\n  if (entity instanceof tl_1.Api.InputPeerChannel) {\n    return new tl_1.Api.InputChannel({\n      channelId: entity.channelId,\n      accessHash: entity.accessHash\n    });\n  }\n  _raiseCastFail(entity, \"InputChannel\");\n}\nexports.getInputChannel = getInputChannel;\n/**\r\n Similar to :meth:`getInputPeer`, but for :tl:`InputUser`'s alone.\r\n\r\n .. important::\r\n\r\n This method does not validate for invalid general-purpose access\r\n hashes, unlike `get_input_peer`. Consider using instead:\r\n ``get_input_channel(get_input_peer(channel))``.\r\n\r\n * @param entity\r\n */\nfunction getInputUser(entity) {\n  if (typeof entity === \"string\" || typeof entity == \"number\" || typeof entity == \"bigint\" || big_integer_1.default.isInstance(entity)) {\n    _raiseCastFail(entity, \"InputUser\");\n  }\n  if (entity.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(entity, \"InputUser\");\n  }\n  if (entity.SUBCLASS_OF_ID === 0xe669bf46) {\n    // crc32(b'InputUser')\n    return entity;\n  }\n  if (entity instanceof tl_1.Api.User) {\n    if (entity.self) {\n      return new tl_1.Api.InputUserSelf();\n    } else {\n      return new tl_1.Api.InputUser({\n        userId: entity.id,\n        accessHash: entity.accessHash || big_integer_1.default.zero\n      });\n    }\n  }\n  if (entity instanceof tl_1.Api.InputPeerSelf) {\n    return new tl_1.Api.InputUserSelf();\n  }\n  if (entity instanceof tl_1.Api.UserEmpty || entity instanceof tl_1.Api.InputPeerEmpty) {\n    return new tl_1.Api.InputUserEmpty();\n  }\n  if (entity instanceof tl_1.Api.UserFull) {\n    return getInputUser(entity);\n  }\n  if (entity instanceof tl_1.Api.InputPeerUser) {\n    return new tl_1.Api.InputUser({\n      userId: entity.userId,\n      accessHash: entity.accessHash\n    });\n  }\n  if (entity instanceof tl_1.Api.InputPeerUserFromMessage) {\n    return new tl_1.Api.InputUserFromMessage({\n      userId: entity.userId,\n      peer: entity.peer,\n      msgId: entity.msgId\n    });\n  }\n  _raiseCastFail(entity, \"InputUser\");\n}\nexports.getInputUser = getInputUser;\n/**\r\n Similar to :meth:`get_input_peer`, but for dialogs\r\n * @param dialog\r\n */\n/*CONTEST\r\nfunction getInputDialog(dialog) {\r\n    try {\r\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\r\n            return dialog\r\n        }\r\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\r\n            return new Api.InputDialogPeer({ peer: dialog })\r\n        }\r\n    } catch (e) {\r\n        _raiseCastFail(dialog, 'InputDialogPeer')\r\n    }\r\n\r\n    try {\r\n        return new Api.InputDialogPeer(getInputPeer(dialog))\r\n        // eslint-disable-next-line no-empty\r\n    } catch (e) {\r\n\r\n    }\r\n    _raiseCastFail(dialog, 'InputDialogPeer')\r\n}\r\n*/\n/**\r\n *  Similar to :meth:`get_input_peer`, but for input messages.\r\n */\nfunction getInputMessage(message) {\n  if (typeof message === \"number\") {\n    return new tl_1.Api.InputMessageID({\n      id: message\n    });\n  }\n  if (message === undefined || message.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(message, \"InputMessage\");\n  }\n  if (message.SUBCLASS_OF_ID === 0x54b6bcc5) {\n    // crc32(b'InputMessage')\n    return message;\n  } else if (message.SUBCLASS_OF_ID === 0x790009e3) {\n    // crc32(b'Message'):\n    return new tl_1.Api.InputMessageID({\n      id: message.id\n    });\n  }\n  _raiseCastFail(message, \"InputMessage\");\n}\nexports.getInputMessage = getInputMessage;\n/**\r\n *  Similar to :meth:`get_input_peer`, but for input messages.\r\n */\nfunction getInputChatPhoto(photo) {\n  if (photo === undefined || photo.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(photo, \"InputChatPhoto\");\n  }\n  if (photo.SUBCLASS_OF_ID === 0xd4eb2d74) {\n    //crc32(b'InputChatPhoto')\n    return photo;\n  } else if (photo.SUBCLASS_OF_ID === 0xe7655f1f) {\n    // crc32(b'InputFile'):\n    return new tl_1.Api.InputChatUploadedPhoto({\n      file: photo\n    });\n  }\n  photo = getInputPhoto(photo);\n  if (photo instanceof tl_1.Api.InputPhoto) {\n    return new tl_1.Api.InputChatPhoto({\n      id: photo\n    });\n  } else if (photo instanceof tl_1.Api.InputPhotoEmpty) {\n    return new tl_1.Api.InputChatPhotoEmpty();\n  }\n  _raiseCastFail(photo, \"InputChatPhoto\");\n}\nexports.getInputChatPhoto = getInputChatPhoto;\n/**\r\n * Adds the JPG header and footer to a stripped image.\r\n * Ported from https://github.com/telegramdesktop/tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\r\n\r\n * @param stripped{Buffer}\r\n * @returns {Buffer}\r\n */\nfunction strippedPhotoToJpg(stripped) {\n  // Note: Changes here should update _stripped_real_length\n  if (stripped.length < 3 || stripped[0] !== 1) {\n    return stripped;\n  }\n  const header = buffer_1.Buffer.from(JPEG_HEADER);\n  header[164] = stripped[1];\n  header[166] = stripped[2];\n  return buffer_1.Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\nexports.strippedPhotoToJpg = strippedPhotoToJpg;\n/*CONTEST\r\nfunction getInputLocation(location) {\r\n    try {\r\n        if (!location.SUBCLASS_OF_ID) {\r\n            throw new Error()\r\n        }\r\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\r\n            return {\r\n                dcId: null,\r\n                inputLocation: location\r\n            }\r\n        }\r\n    } catch (e) {\r\n        _raiseCastFail(location, 'InputFileLocation')\r\n    }\r\n    if (location instanceof Api.Message) {\r\n        location = location.media\r\n    }\r\n\r\n    if (location instanceof Api.MessageMediaDocument) {\r\n        location = location.document\r\n    } else if (location instanceof Api.MessageMediaPhoto) {\r\n        location = location.photo\r\n    }\r\n\r\n    if (location instanceof Api.Document) {\r\n        return {\r\n            dcId: location.dcId,\r\n            inputLocation: new Api.InputDocumentFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: '', // Presumably to download one of its thumbnails\r\n            }),\r\n        }\r\n    } else if (location instanceof Api.Photo) {\r\n        return {\r\n            dcId: location.dcId,\r\n            inputLocation: new Api.InputPhotoFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: location.sizes[location.sizes.length - 1].type,\r\n            }),\r\n        }\r\n    }\r\n\r\n    if (location instanceof Api.FileLocationToBeDeprecated) {\r\n        throw new Error('Unavailable location cannot be used as input')\r\n    }\r\n    _raiseCastFail(location, 'InputFileLocation')\r\n}\r\n*/\n/**\r\n *  Similar to :meth:`get_input_peer`, but for photos\r\n */\nfunction getInputPhoto(photo) {\n  if (photo.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(photo, \"InputPhoto\");\n  }\n  if (photo.SUBCLASS_OF_ID === 2221106144) {\n    return photo;\n  }\n  if (photo instanceof tl_1.Api.Message) {\n    photo = photo.media;\n  }\n  if (photo instanceof tl_1.Api.photos.Photo || photo instanceof tl_1.Api.MessageMediaPhoto) {\n    photo = photo.photo;\n  }\n  if (photo instanceof tl_1.Api.Photo) {\n    return new tl_1.Api.InputPhoto({\n      id: photo.id,\n      accessHash: photo.accessHash,\n      fileReference: photo.fileReference\n    });\n  }\n  if (photo instanceof tl_1.Api.PhotoEmpty) {\n    return new tl_1.Api.InputPhotoEmpty();\n  }\n  if (photo instanceof tl_1.Api.messages.ChatFull) {\n    photo = photo.fullChat;\n  }\n  if (photo instanceof tl_1.Api.ChannelFull) {\n    return getInputPhoto(photo.chatPhoto);\n  } else {\n    if (photo instanceof tl_1.Api.UserFull) {\n      return getInputPhoto(photo.profilePhoto);\n    } else {\n      if (photo instanceof tl_1.Api.Channel || photo instanceof tl_1.Api.Chat || photo instanceof tl_1.Api.User) {\n        return getInputPhoto(photo.photo);\n      }\n    }\n  }\n  if (photo instanceof tl_1.Api.UserEmpty || photo instanceof tl_1.Api.ChatEmpty || photo instanceof tl_1.Api.ChatForbidden || photo instanceof tl_1.Api.ChannelForbidden) {\n    return new tl_1.Api.InputPhotoEmpty();\n  }\n  _raiseCastFail(photo, \"InputPhoto\");\n}\nexports.getInputPhoto = getInputPhoto;\n/**\r\n *  Similar to :meth:`get_input_peer`, but for documents\r\n */\nfunction getInputDocument(document) {\n  if (document.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(document, \"InputDocument\");\n  }\n  if (document.SUBCLASS_OF_ID === 0xf33fdb68) {\n    return document;\n  }\n  if (document instanceof tl_1.Api.Document) {\n    return new tl_1.Api.InputDocument({\n      id: document.id,\n      accessHash: document.accessHash,\n      fileReference: document.fileReference\n    });\n  }\n  if (document instanceof tl_1.Api.DocumentEmpty) {\n    return new tl_1.Api.InputDocumentEmpty();\n  }\n  if (document instanceof tl_1.Api.MessageMediaDocument) {\n    return getInputDocument(document.document);\n  }\n  if (document instanceof tl_1.Api.Message) {\n    return getInputDocument(document.media);\n  }\n  _raiseCastFail(document, \"InputDocument\");\n}\nexports.getInputDocument = getInputDocument;\n/**\r\n *  Returns `True` if the file has an audio mime type.\r\n */\nfunction isAudio(file) {\n  const ext = _getExtension(file);\n  if (!ext) {\n    const metadata = _getMetadata(file);\n    return (metadata.get(\"mimeType\") || \"\").startsWith(\"audio/\");\n  } else {\n    file = \"a\" + ext;\n    return (mime_1.default.getType(file) || \"\").startsWith(\"audio/\");\n  }\n}\nexports.isAudio = isAudio;\n/**\r\n *  Returns `True` if the file has an image mime type.\r\n */\nfunction isImage(file) {\n  const ext = _getExtension(file).toLowerCase();\n  return ext.endsWith(\".png\") || ext.endsWith(\".jpg\") || ext.endsWith(\".jpeg\");\n}\nexports.isImage = isImage;\nfunction getExtension(media) {\n  // Photos are always compressed as .jpg by Telegram\n  try {\n    getInputPhoto(media);\n    return \".jpg\";\n  } catch (e) {}\n  if (media instanceof tl_1.Api.UserProfilePhoto || media instanceof tl_1.Api.ChatPhoto) {\n    return \".jpg\";\n  }\n  if (media instanceof tl_1.Api.MessageMediaDocument) {\n    media = media.document;\n  }\n  if (media instanceof tl_1.Api.Document || media instanceof tl_1.Api.WebDocument || media instanceof tl_1.Api.WebDocumentNoProxy) {\n    if (media.mimeType === \"application/octet-stream\") {\n      // Octet stream are just bytes, which have no default extension\n      return \"\";\n    } else {\n      return mime_1.default.getExtension(media.mimeType) || \"\";\n    }\n  }\n  return \"\";\n}\nexports.getExtension = getExtension;\n/**\r\n * Gets the extension for the given file, which can be either a\r\n * str or an ``open()``'ed file (which has a ``.name`` attribute).\r\n */\nfunction _getExtension(file) {\n  if (typeof file === \"string\") {\n    return \".\" + file.split(\".\").pop();\n  } else if (\"name\" in file) {\n    return _getExtension(file.name);\n  } else {\n    return getExtension(file);\n  }\n}\nfunction _getMetadata(file) {\n  //TODO Return nothing for now until we find a better way\n  return new Map();\n}\nfunction isVideo(file) {\n  var _a;\n  const ext = _getExtension(file);\n  if (!ext) {\n    const metadata = _getMetadata(file);\n    if (metadata.has(\"mimeType\")) {\n      return ((_a = metadata.get(\"mimeType\")) === null || _a === void 0 ? void 0 : _a.startsWith(\"video/\")) || false;\n    } else {\n      return false;\n    }\n  } else {\n    file = \"a\" + ext;\n    return (mime_1.default.getType(file) || \"\").startsWith(\"video/\");\n  }\n}\n/**\r\n Get a list of attributes for the given file and\r\n the mime type as a tuple ([attribute], mime_type).\r\n */\nfunction getAttributes(file, {\n  attributes = null,\n  mimeType = undefined,\n  forceDocument = false,\n  voiceNote = false,\n  videoNote = false,\n  supportsStreaming = false,\n  thumb = null\n}) {\n  var _a, _b, _c, _d;\n  const name = typeof file == \"string\" ? file : file.name || \"unnamed\";\n  if (mimeType === undefined) {\n    mimeType = mime_1.default.getType(name) || \"application/octet-stream\";\n  }\n  const attrObj = new Map();\n  attrObj.set(tl_1.Api.DocumentAttributeFilename, new tl_1.Api.DocumentAttributeFilename({\n    fileName: name.split(/[\\\\/]/).pop() || \"\"\n  }));\n  if (isAudio(file)) {\n    const m = _getMetadata(file);\n    attrObj.set(tl_1.Api.DocumentAttributeAudio, new tl_1.Api.DocumentAttributeAudio({\n      voice: voiceNote,\n      title: m.has(\"title\") ? m.get(\"title\") : undefined,\n      performer: m.has(\"author\") ? m.get(\"author\") : undefined,\n      duration: Number.parseInt((_a = m.get(\"duration\")) !== null && _a !== void 0 ? _a : \"0\")\n    }));\n  }\n  if (!forceDocument && isVideo(file)) {\n    let doc;\n    if (thumb) {\n      const t_m = _getMetadata(thumb);\n      const width = Number.parseInt((t_m === null || t_m === void 0 ? void 0 : t_m.get(\"width\")) || \"1\");\n      const height = Number.parseInt((t_m === null || t_m === void 0 ? void 0 : t_m.get(\"height\")) || \"1\");\n      doc = new tl_1.Api.DocumentAttributeVideo({\n        duration: 0,\n        h: height,\n        w: width,\n        roundMessage: videoNote,\n        supportsStreaming: supportsStreaming\n      });\n    } else {\n      const m = _getMetadata(file);\n      doc = new tl_1.Api.DocumentAttributeVideo({\n        roundMessage: videoNote,\n        w: Number.parseInt((_b = m.get(\"width\")) !== null && _b !== void 0 ? _b : \"1\"),\n        h: Number.parseInt((_c = m.get(\"height\")) !== null && _c !== void 0 ? _c : \"1\"),\n        duration: Number.parseInt((_d = m.get(\"duration\")) !== null && _d !== void 0 ? _d : \"0\"),\n        supportsStreaming: supportsStreaming\n      });\n    }\n    attrObj.set(tl_1.Api.DocumentAttributeVideo, doc);\n  }\n  if (videoNote) {\n    if (attrObj.has(tl_1.Api.DocumentAttributeAudio)) {\n      attrObj.get(tl_1.Api.DocumentAttributeAudio).voice = true;\n    } else {\n      attrObj.set(tl_1.Api.DocumentAttributeAudio, new tl_1.Api.DocumentAttributeAudio({\n        duration: 0,\n        voice: true\n      }));\n    }\n  }\n  /* Now override the attributes if any. As we have a dict of\r\n  {cls: instance}, we can override any class with the list\r\n   of attributes provided by the user easily.\r\n  */\n  if (attributes) {\n    for (const a of attributes) {\n      attrObj.set(a.constructor, a);\n    }\n  }\n  return {\n    attrs: Array.from(attrObj.values()),\n    mimeType: mimeType\n  };\n}\nexports.getAttributes = getAttributes;\n/**\r\n *  Similar to :meth:`get_input_peer`, but for geo points\r\n */\nfunction getInputGeo(geo) {\n  if (geo === undefined || geo.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(geo, \"InputGeoPoint\");\n  }\n  if (geo.SUBCLASS_OF_ID === 0x430d225) {\n    // crc32(b'InputGeoPoint'):\n    return geo;\n  }\n  if (geo instanceof tl_1.Api.GeoPoint) {\n    return new tl_1.Api.InputGeoPoint({\n      lat: geo.lat,\n      long: geo.long\n    });\n  }\n  if (geo instanceof tl_1.Api.GeoPointEmpty) {\n    return new tl_1.Api.InputGeoPointEmpty();\n  }\n  if (geo instanceof tl_1.Api.MessageMediaGeo) {\n    return getInputGeo(geo.geo);\n  }\n  if (geo instanceof tl_1.Api.Message) {\n    return getInputGeo(geo.media);\n  }\n  _raiseCastFail(geo, \"InputGeoPoint\");\n}\nexports.getInputGeo = getInputGeo;\n/**\r\n *\r\n Similar to :meth:`get_input_peer`, but for media.\r\n\r\n If the media is :tl:`InputFile` and ``is_photo`` is known to be `True`,\r\n it will be treated as an :tl:`InputMediaUploadedPhoto`. Else, the rest\r\n of parameters will indicate how to treat it.\r\n * @param media\r\n * @param isPhoto - whether it's a photo or not\r\n * @param attributes\r\n * @param forceDocument\r\n * @param voiceNote\r\n * @param videoNote\r\n * @param supportsStreaming\r\n */\nfunction getInputMedia(media, {\n  isPhoto = false,\n  attributes = undefined,\n  forceDocument = false,\n  voiceNote = false,\n  videoNote = false,\n  supportsStreaming = false\n} = {}) {\n  if (media.SUBCLASS_OF_ID === undefined) {\n    _raiseCastFail(media, \"InputMedia\");\n  }\n  if (media.SUBCLASS_OF_ID === 0xfaf846f4) {\n    // crc32(b'InputMedia')\n    return media;\n  } else {\n    if (media.SUBCLASS_OF_ID === 2221106144) {\n      // crc32(b'InputPhoto')\n      return new tl_1.Api.InputMediaPhoto({\n        id: media\n      });\n    } else {\n      if (media.SUBCLASS_OF_ID === 4081048424) {\n        // crc32(b'InputDocument')\n        return new tl_1.Api.InputMediaDocument({\n          id: media\n        });\n      }\n    }\n  }\n  if (media instanceof tl_1.Api.MessageMediaPhoto) {\n    return new tl_1.Api.InputMediaPhoto({\n      id: getInputPhoto(media.photo),\n      ttlSeconds: media.ttlSeconds\n    });\n  }\n  if (media instanceof tl_1.Api.Photo || media instanceof tl_1.Api.photos.Photo || media instanceof tl_1.Api.PhotoEmpty) {\n    return new tl_1.Api.InputMediaPhoto({\n      id: getInputPhoto(media)\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaDocument) {\n    return new tl_1.Api.InputMediaDocument({\n      id: getInputDocument(media.document),\n      ttlSeconds: media.ttlSeconds\n    });\n  }\n  if (media instanceof tl_1.Api.Document || media instanceof tl_1.Api.DocumentEmpty) {\n    return new tl_1.Api.InputMediaDocument({\n      id: getInputDocument(media)\n    });\n  }\n  if (media instanceof tl_1.Api.InputFile || media instanceof tl_1.Api.InputFileBig) {\n    if (isPhoto) {\n      return new tl_1.Api.InputMediaUploadedPhoto({\n        file: media\n      });\n    } else {\n      const {\n        attrs,\n        mimeType\n      } = getAttributes(media, {\n        attributes: attributes,\n        forceDocument: forceDocument,\n        voiceNote: voiceNote,\n        videoNote: videoNote,\n        supportsStreaming: supportsStreaming\n      });\n      return new tl_1.Api.InputMediaUploadedDocument({\n        file: media,\n        mimeType: mimeType,\n        attributes: attrs,\n        forceFile: forceDocument\n      });\n    }\n  }\n  if (media instanceof tl_1.Api.MessageMediaGame) {\n    return new tl_1.Api.InputMediaGame({\n      id: new tl_1.Api.InputGameID({\n        id: media.game.id,\n        accessHash: media.game.accessHash\n      })\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaContact) {\n    return new tl_1.Api.InputMediaContact({\n      phoneNumber: media.phoneNumber,\n      firstName: media.firstName,\n      lastName: media.lastName,\n      vcard: \"\"\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaGeo) {\n    return new tl_1.Api.InputMediaGeoPoint({\n      geoPoint: getInputGeo(media.geo)\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaVenue) {\n    return new tl_1.Api.InputMediaVenue({\n      geoPoint: getInputGeo(media.geo),\n      title: media.title,\n      address: media.address,\n      provider: media.provider,\n      venueId: media.venueId,\n      venueType: \"\"\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaDice) {\n    return new tl_1.Api.InputMediaDice({\n      emoticon: media.emoticon\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaEmpty || media instanceof tl_1.Api.MessageMediaUnsupported || media instanceof tl_1.Api.ChatPhotoEmpty || media instanceof tl_1.Api.UserProfilePhotoEmpty || media instanceof tl_1.Api.ChatPhoto || media instanceof tl_1.Api.UserProfilePhoto) {\n    return new tl_1.Api.InputMediaEmpty();\n  }\n  if (media instanceof tl_1.Api.Message) {\n    return getInputMedia(media.media, {\n      isPhoto: isPhoto\n    });\n  }\n  if (media instanceof tl_1.Api.MessageMediaPoll) {\n    let correctAnswers;\n    if (media.poll.quiz) {\n      if (!media.results.results) {\n        throw new Error(\"Cannot cast unanswered quiz to any kind of InputMedia.\");\n      }\n      correctAnswers = [];\n      for (const r of media.results.results) {\n        if (r.correct) {\n          correctAnswers.push(r.option);\n        }\n      }\n    } else {\n      correctAnswers = undefined;\n    }\n    return new tl_1.Api.InputMediaPoll({\n      poll: media.poll,\n      correctAnswers: correctAnswers,\n      solution: media.results.solution,\n      solutionEntities: media.results.solutionEntities\n    });\n  }\n  if (media instanceof tl_1.Api.Poll) {\n    return new tl_1.Api.InputMediaPoll({\n      poll: media\n    });\n  }\n  _raiseCastFail(media, \"InputMedia\");\n}\nexports.getInputMedia = getInputMedia;\n/**\r\n * Gets the appropriated part size when uploading or downloading files,\r\n * given an initial file size.\r\n * @param fileSize\r\n * @returns {Number}\r\n */\nfunction getAppropriatedPartSize(fileSize) {\n  if (fileSize.lesser(104857600)) {\n    // 100MB\n    return 128;\n  }\n  if (fileSize.lesser(786432000)) {\n    // 750MB\n    return 256;\n  }\n  return 512;\n}\nexports.getAppropriatedPartSize = getAppropriatedPartSize;\nfunction getPeer(peer) {\n  if (!peer) {\n    _raiseCastFail(peer, \"undefined\");\n  }\n  if (typeof peer === \"string\") {\n    _raiseCastFail(peer, \"peer\");\n  }\n  if (typeof peer == \"number\" || typeof peer == \"bigint\") {\n    peer = (0, Helpers_1.returnBigInt)(peer);\n  }\n  try {\n    if (big_integer_1.default.isInstance(peer)) {\n      const res = resolveId(peer);\n      if (res[1] === tl_1.Api.PeerChannel) {\n        return new tl_1.Api.PeerChannel({\n          channelId: res[0]\n        });\n      } else if (res[1] === tl_1.Api.PeerChat) {\n        return new tl_1.Api.PeerChat({\n          chatId: res[0]\n        });\n      } else {\n        return new tl_1.Api.PeerUser({\n          userId: res[0]\n        });\n      }\n    }\n    if (peer.SUBCLASS_OF_ID === undefined) {\n      throw new Error();\n    }\n    if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n      // crc32('Peer')\n      return peer;\n    } else if (peer instanceof tl_1.Api.contacts.ResolvedPeer || peer instanceof tl_1.Api.InputNotifyPeer || peer instanceof tl_1.Api.TopPeer || peer instanceof tl_1.Api.Dialog || peer instanceof tl_1.Api.DialogPeer) {\n      return peer.peer;\n    } else if (peer instanceof tl_1.Api.ChannelFull) {\n      return new tl_1.Api.PeerChannel({\n        channelId: peer.id\n      });\n    }\n    if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n      // ChatParticipant, ChannelParticipant\n      if (\"userId\" in peer) {\n        return new tl_1.Api.PeerUser({\n          userId: peer.userId\n        });\n      }\n    }\n    peer = getInputPeer(peer, false, false);\n    if (peer instanceof tl_1.Api.InputPeerUser) {\n      return new tl_1.Api.PeerUser({\n        userId: peer.userId\n      });\n    } else if (peer instanceof tl_1.Api.InputPeerChat) {\n      return new tl_1.Api.PeerChat({\n        chatId: peer.chatId\n      });\n    } else if (peer instanceof tl_1.Api.InputPeerChannel) {\n      return new tl_1.Api.PeerChannel({\n        channelId: peer.channelId\n      });\n    }\n  } catch (e) {}\n  _raiseCastFail(peer, \"peer\");\n}\nexports.getPeer = getPeer;\nfunction sanitizeParseMode(mode) {\n  if (mode === \"md\" || mode === \"markdown\") {\n    return markdown_1.MarkdownParser;\n  }\n  if (mode === \"md2\" || mode === \"markdownv2\") {\n    return markdownv2_1.MarkdownV2Parser;\n  }\n  if (mode == \"html\") {\n    return html_1.HTMLParser;\n  }\n  if (typeof mode == \"object\") {\n    if (\"parse\" in mode && \"unparse\" in mode) {\n      return mode;\n    }\n  }\n  throw new Error(`Invalid parse mode type ${mode}`);\n}\nexports.sanitizeParseMode = sanitizeParseMode;\n/**\r\n Convert the given peer into its marked ID by default.\r\n\r\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\r\n can be identified back. User ID is left unmodified, chat ID is negated,\r\n and channel ID is prefixed with -100:\r\n\r\n * ``userId``\r\n * ``-chatId``\r\n * ``-100channel_id``\r\n\r\n The original ID and the peer type class can be returned with\r\n a call to :meth:`resolve_id(marked_id)`.\r\n * @param peer\r\n * @param addMark\r\n */\nfunction getPeerId(peer, addMark = true) {\n  if (typeof peer == \"string\" && parseID(peer)) {\n    peer = (0, Helpers_1.returnBigInt)(peer);\n  }\n  // First we assert it's a Peer TLObject, or early return for integers\n  if (big_integer_1.default.isInstance(peer)) {\n    return addMark ? peer.toString() : resolveId(peer)[0].toString();\n  }\n  // Tell the user to use their client to resolve InputPeerSelf if we got one\n  if (peer instanceof tl_1.Api.InputPeerSelf) {\n    _raiseCastFail(peer, \"int (you might want to use client.get_peer_id)\");\n  }\n  try {\n    peer = getPeer(peer);\n  } catch (e) {\n    _raiseCastFail(peer, \"int\");\n  }\n  if (peer instanceof tl_1.Api.PeerUser) {\n    return peer.userId.toString();\n  } else if (peer instanceof tl_1.Api.PeerChat) {\n    // Check in case the user mixed things up to avoid blowing up\n    peer.chatId = resolveId((0, Helpers_1.returnBigInt)(peer.chatId))[0];\n    return addMark ? peer.chatId.negate().toString() : peer.chatId.toString();\n  } else if (typeof peer == \"object\" && \"channelId\" in peer) {\n    // if (peer instanceof Api.PeerChannel)\n    // Check in case the user mixed things up to avoid blowing up\n    peer.channelId = resolveId((0, Helpers_1.returnBigInt)(peer.channelId))[0];\n    if (!addMark) {\n      return peer.channelId.toString();\n    }\n    // Concat -100 through math tricks, .to_supergroup() on\n    // Madeline IDs will be strictly positive -> log works.\n    return \"-100\" + peer.channelId.toString();\n  }\n  _raiseCastFail(peer, \"int\");\n}\nexports.getPeerId = getPeerId;\n/**\r\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\r\n * @param markedId\r\n */\nfunction resolveId(markedId) {\n  if (markedId.greaterOrEquals(big_integer_1.default.zero)) {\n    return [markedId, tl_1.Api.PeerUser];\n  }\n  // There have been report of chat IDs being 10000xyz, which means their\n  // marked version is -10000xyz, which in turn looks like a channel but\n  // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n  // two zeroes.\n  const m = markedId.toString().match(/-100([^0]\\d*)/);\n  if (m) {\n    return [(0, big_integer_1.default)(m[1]), tl_1.Api.PeerChannel];\n  }\n  return [markedId.negate(), tl_1.Api.PeerChat];\n}\nexports.resolveId = resolveId;\n/**\r\n * returns an entity pair\r\n * @param entityId\r\n * @param entities\r\n * @param cache\r\n * @param getInputPeer\r\n * @returns {{inputEntity: *, entity: *}}\r\n * @private\r\n */\n/*CONTEST\r\n\r\nexport function  _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\r\n    const entity = entities.get(entityId)\r\n    let inputEntity = cache[entityId]\r\n    if (inputEntity === undefined) {\r\n        try {\r\n            inputEntity = getInputPeer(inputEntity)\r\n        } catch (e) {\r\n            inputEntity = null\r\n        }\r\n    }\r\n    return {\r\n        entity,\r\n        inputEntity\r\n    }\r\n}\r\n*/\nfunction getMessageId(message) {\n  if (!message) {\n    return undefined;\n  } else if (typeof message === \"number\") {\n    return message;\n  } else if (message.SUBCLASS_OF_ID === 0x790009e3 || \"id\" in message) {\n    // crc32(b'Message')\n    return message.id;\n  } else {\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n  }\n}\nexports.getMessageId = getMessageId;\n/**\r\n * Parses the given phone, or returns `undefined` if it's invalid.\r\n * @param phone\r\n */\nfunction parsePhone(phone) {\n  phone = phone.toString().replace(/[()\\s-]/gm, \"\");\n  if (phone.startsWith(\"+\") && phone.split(\"+\").length - 1 == 1) {\n    return !isNaN(Number(phone)) ? phone.replace(\"+\", \"\") : undefined;\n  }\n}\nexports.parsePhone = parsePhone;\n/**\r\n * Parses a string ID into a big int\r\n * @param id\r\n */\nfunction parseID(id) {\n  const isValid = /^(-?[0-9][0-9]*)$/.test(id);\n  return isValid ? (0, big_integer_1.default)(id) : undefined;\n}\nexports.parseID = parseID;\nfunction resolveInviteLink(link) {\n  throw new Error(\"not implemented\");\n}\nexports.resolveInviteLink = resolveInviteLink;\n/**\r\n Parses the given username or channel access hash, given\r\n a string, username or URL. Returns a tuple consisting of\r\n both the stripped, lowercase username and whether it is\r\n a joinchat/ hash (in which case is not lowercase'd).\r\n\r\n Returns ``(undefined, false)`` if the ``username`` or link is not valid.\r\n\r\n * @param username {string}\r\n */\nfunction parseUsername(username) {\n  username = username.trim();\n  const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE);\n  if (m) {\n    username = username.replace(m[0], \"\");\n    if (m[1]) {\n      return {\n        username: username,\n        isInvite: true\n      };\n    } else {\n      username = rtrim(username, \"/\");\n    }\n  }\n  if (username.match(VALID_USERNAME_RE)) {\n    return {\n      username: username.toLowerCase(),\n      isInvite: false\n    };\n  } else {\n    return {\n      username: undefined,\n      isInvite: false\n    };\n  }\n}\nexports.parseUsername = parseUsername;\nfunction rtrim(s, mask) {\n  while (~mask.indexOf(s[s.length - 1])) {\n    s = s.slice(0, -1);\n  }\n  return s;\n}\nexports.rtrim = rtrim;\n/**\r\n * Gets the display name for the given :tl:`User`,\r\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\r\n * @param entity\r\n */\nfunction getDisplayName(entity) {\n  if (entity instanceof tl_1.Api.User) {\n    if (entity.lastName && entity.firstName) {\n      return `${entity.firstName} ${entity.lastName}`;\n    } else if (entity.firstName) {\n      return entity.firstName;\n    } else if (entity.lastName) {\n      return entity.lastName;\n    } else {\n      return \"\";\n    }\n  } else if (entity instanceof tl_1.Api.Chat || entity instanceof tl_1.Api.Channel) {\n    return entity.title;\n  }\n  return \"\";\n}\nexports.getDisplayName = getDisplayName;\n/**\r\n * check if a given item is an array like or not\r\n * @param item\r\n * @returns {boolean}\r\n */\n/*CONTEST\r\nDuplicate ?\r\nexport function  isListLike(item) {\r\n    return (\r\n        Array.isArray(item) ||\r\n        (!!item &&\r\n            typeof item === 'object' &&\r\n            typeof (item.length) === 'number' &&\r\n            (item.length === 0 ||\r\n                (item.length > 0 &&\r\n                    (item.length - 1) in item)\r\n            )\r\n        )\r\n    )\r\n}\r\n*/","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getDisplayName","rtrim","parseUsername","resolveInviteLink","parseID","parsePhone","getMessageId","resolveId","getPeerId","sanitizeParseMode","getPeer","getAppropriatedPartSize","getInputMedia","getInputGeo","getAttributes","getExtension","isImage","isAudio","getInputDocument","getInputPhoto","strippedPhotoToJpg","getInputChatPhoto","getInputMessage","getInputUser","getInputChannel","getInnerText","_getEntityPair","_photoSizeByteCount","getInputPeer","chunks","getFileInfo","buffer_1","require","tl_1","big_integer_1","mime_1","markdown_1","markdownv2_1","fileLocation","SUBCLASS_OF_ID","_raiseCastFail","dcId","undefined","location","size","Api","Message","media","MessageMediaDocument","document","MessageMediaPhoto","photo","Document","InputDocumentFileLocation","id","accessHash","fileReference","thumbSize","Photo","InputPhotoFileLocation","sizes","length","type","default","arr","i","slice","html_1","Helpers_1","USERNAME_RE","RegExp","JPEG_HEADER","Buffer","from","JPEG_FOOTER","TG_JOIN_RE","VALID_USERNAME_RE","entity","target","toWrite","className","Error","allowSelf","checkHash","inputEntity","User","self","InputPeerSelf","min","InputPeerUser","userId","Chat","ChatEmpty","ChatForbidden","InputPeerChat","chatId","Channel","InputPeerChannel","channelId","TypeError","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","PhotoSize","PhotoStrippedSize","bytes","PhotoCachedSize","PhotoSizeEmpty","entityId","entities","cache","getInputPeerFunction","get","e","text","result","forEach","key","start","offset","end","push","isInstance","zero","InputUserSelf","InputUserEmpty","InputPeerUserFromMessage","InputUserFromMessage","peer","msgId","message","InputMessageID","InputChatUploadedPhoto","file","InputPhoto","InputChatPhoto","InputPhotoEmpty","InputChatPhotoEmpty","stripped","header","concat","photos","PhotoEmpty","messages","fullChat","ChannelFull","chatPhoto","profilePhoto","InputDocument","DocumentEmpty","InputDocumentEmpty","ext","_getExtension","metadata","_getMetadata","startsWith","getType","toLowerCase","endsWith","UserProfilePhoto","ChatPhoto","WebDocument","WebDocumentNoProxy","mimeType","split","pop","name","Map","isVideo","_a","has","attributes","forceDocument","voiceNote","videoNote","supportsStreaming","thumb","_b","_c","_d","attrObj","set","DocumentAttributeFilename","fileName","m","DocumentAttributeAudio","voice","title","performer","duration","Number","parseInt","doc","t_m","width","height","DocumentAttributeVideo","h","w","roundMessage","a","constructor","attrs","Array","values","geo","GeoPoint","InputGeoPoint","lat","long","GeoPointEmpty","InputGeoPointEmpty","MessageMediaGeo","isPhoto","InputMediaPhoto","InputMediaDocument","ttlSeconds","InputFile","InputFileBig","InputMediaUploadedPhoto","InputMediaUploadedDocument","forceFile","MessageMediaGame","InputMediaGame","InputGameID","game","MessageMediaContact","InputMediaContact","phoneNumber","firstName","lastName","vcard","InputMediaGeoPoint","geoPoint","MessageMediaVenue","InputMediaVenue","address","provider","venueId","venueType","MessageMediaDice","InputMediaDice","emoticon","MessageMediaEmpty","MessageMediaUnsupported","ChatPhotoEmpty","UserProfilePhotoEmpty","InputMediaEmpty","MessageMediaPoll","correctAnswers","poll","quiz","results","r","correct","option","InputMediaPoll","solution","solutionEntities","Poll","fileSize","lesser","returnBigInt","res","PeerChannel","PeerUser","contacts","ResolvedPeer","InputNotifyPeer","TopPeer","Dialog","DialogPeer","mode","MarkdownParser","MarkdownV2Parser","HTMLParser","addMark","toString","negate","markedId","greaterOrEquals","match","phone","replace","isNaN","isValid","test","link","username","trim","isInvite","s","mask","indexOf"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/Utils.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getDisplayName = exports.rtrim = exports.parseUsername = exports.resolveInviteLink = exports.parseID = exports.parsePhone = exports.getMessageId = exports.resolveId = exports.getPeerId = exports.sanitizeParseMode = exports.getPeer = exports.getAppropriatedPartSize = exports.getInputMedia = exports.getInputGeo = exports.getAttributes = exports.getExtension = exports.isImage = exports.isAudio = exports.getInputDocument = exports.getInputPhoto = exports.strippedPhotoToJpg = exports.getInputChatPhoto = exports.getInputMessage = exports.getInputUser = exports.getInputChannel = exports.getInnerText = exports._getEntityPair = exports._photoSizeByteCount = exports.getInputPeer = exports.chunks = exports.getFileInfo = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst tl_1 = require(\"./tl\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst mime_1 = __importDefault(require(\"mime\"));\r\nconst markdown_1 = require(\"./extensions/markdown\");\r\nconst markdownv2_1 = require(\"./extensions/markdownv2\");\r\nfunction getFileInfo(fileLocation) {\r\n    if (!fileLocation || !fileLocation.SUBCLASS_OF_ID) {\r\n        _raiseCastFail(fileLocation, \"InputFileLocation\");\r\n    }\r\n    if (fileLocation.SUBCLASS_OF_ID == 354669666) {\r\n        return {\r\n            dcId: undefined,\r\n            location: fileLocation,\r\n            size: undefined,\r\n        };\r\n    }\r\n    let location;\r\n    if (fileLocation instanceof tl_1.Api.Message) {\r\n        location = fileLocation.media;\r\n    }\r\n    if (fileLocation instanceof tl_1.Api.MessageMediaDocument) {\r\n        location = fileLocation.document;\r\n    }\r\n    else if (fileLocation instanceof tl_1.Api.MessageMediaPhoto) {\r\n        location = fileLocation.photo;\r\n    }\r\n    if (location instanceof tl_1.Api.Document) {\r\n        return {\r\n            dcId: location.dcId,\r\n            location: new tl_1.Api.InputDocumentFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: \"\",\r\n            }),\r\n            size: location.size,\r\n        };\r\n    }\r\n    else if (location instanceof tl_1.Api.Photo) {\r\n        return {\r\n            dcId: location.dcId,\r\n            location: new tl_1.Api.InputPhotoFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: location.sizes[location.sizes.length - 1].type,\r\n            }),\r\n            size: (0, big_integer_1.default)(_photoSizeByteCount(location.sizes[location.sizes.length - 1]) || 0),\r\n        };\r\n    }\r\n    _raiseCastFail(fileLocation, \"InputFileLocation\");\r\n}\r\nexports.getFileInfo = getFileInfo;\r\n/**\r\n * Turns the given iterable into chunks of the specified size,\r\n * which is 100 by default since that's what Telegram uses the most.\r\n */\r\nfunction* chunks(arr, size = 100) {\r\n    for (let i = 0; i < arr.length; i += size) {\r\n        yield arr.slice(i, i + size);\r\n    }\r\n}\r\nexports.chunks = chunks;\r\nconst html_1 = require(\"./extensions/html\");\r\nconst Helpers_1 = require(\"./Helpers\");\r\nconst USERNAME_RE = new RegExp(\"@|(?:https?:\\\\/\\\\/)?(?:www\\\\.)?\" +\r\n    \"(?:telegram\\\\.(?:me|dog)|t\\\\.me)\\\\/(@|joinchat\\\\/)?\", \"i\");\r\nconst JPEG_HEADER = buffer_1.Buffer.from(\"ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00\", \"hex\");\r\nconst JPEG_FOOTER = buffer_1.Buffer.from(\"ffd9\", \"hex\");\r\nconst TG_JOIN_RE = new RegExp(\"tg:\\\\/\\\\/(join)\\\\?invite=\", \"i\");\r\nconst VALID_USERNAME_RE = new RegExp(\"^([a-z]((?!__)[\\\\w\\\\d]){3,30}[a-z\\\\d]|gif|vid|\" +\r\n    \"pic|bing|wiki|imdb|bold|vote|like|coub)$\", \"i\");\r\nfunction _raiseCastFail(entity, target) {\r\n    let toWrite = entity;\r\n    if (typeof entity === \"object\" && \"className\" in entity) {\r\n        toWrite = entity.className;\r\n    }\r\n    throw new Error(`Cannot cast ${toWrite} to any kind of ${target}`);\r\n}\r\n/**\r\n Gets the input peer for the given \"entity\" (user, chat or channel).\r\n\r\n A ``TypeError`` is raised if the given entity isn't a supported type\r\n or if ``check_hash is True`` but the entity's ``accessHash is None``\r\n *or* the entity contains ``min`` information. In this case, the hash\r\n cannot be used for general purposes, and thus is not returned to avoid\r\n any issues which can derive from invalid access hashes.\r\n\r\n Note that ``checkHash`` **is ignored** if an input peer is already\r\n passed since in that case we assume the user knows what they're doing.\r\n This is key to getting entities by explicitly passing ``hash = 0``.\r\n\r\n * @param entity\r\n * @param allowSelf\r\n * @param checkHash\r\n */\r\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\r\n    if (entity.SUBCLASS_OF_ID === undefined) {\r\n        // e.g. custom.Dialog (can't cyclic import).\r\n        if (allowSelf && \"inputEntity\" in entity) {\r\n            return entity.inputEntity;\r\n        }\r\n        else if (\"entity\" in entity) {\r\n            return getInputPeer(entity.entity);\r\n        }\r\n        else {\r\n            _raiseCastFail(entity, \"InputPeer\");\r\n        }\r\n    }\r\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) {\r\n        // crc32(b'InputPeer')\r\n        return entity;\r\n    }\r\n    if (entity instanceof tl_1.Api.User) {\r\n        if (entity.self && allowSelf) {\r\n            return new tl_1.Api.InputPeerSelf();\r\n        }\r\n        else if ((entity.accessHash !== undefined && !entity.min) ||\r\n            !checkHash) {\r\n            return new tl_1.Api.InputPeerUser({\r\n                userId: entity.id,\r\n                accessHash: entity.accessHash || (0, big_integer_1.default)(0),\r\n            });\r\n        }\r\n        else {\r\n            throw new Error(\"User without accessHash or min cannot be input\");\r\n        }\r\n    }\r\n    if (entity instanceof tl_1.Api.Chat ||\r\n        entity instanceof tl_1.Api.ChatEmpty ||\r\n        entity instanceof tl_1.Api.ChatForbidden) {\r\n        return new tl_1.Api.InputPeerChat({ chatId: entity.id });\r\n    }\r\n    if (entity instanceof tl_1.Api.Channel) {\r\n        if ((entity.accessHash !== undefined && !entity.min) || !checkHash) {\r\n            return new tl_1.Api.InputPeerChannel({\r\n                channelId: entity.id,\r\n                accessHash: entity.accessHash || (0, big_integer_1.default)(0),\r\n            });\r\n        }\r\n        else {\r\n            throw new TypeError(\"Channel without accessHash or min info cannot be input\");\r\n        }\r\n    }\r\n    if (entity instanceof tl_1.Api.ChannelForbidden) {\r\n        // \"channelForbidden are never min\", and since their hash is\r\n        // also not optional, we assume that this truly is the case.\r\n        return new tl_1.Api.InputPeerChannel({\r\n            channelId: entity.id,\r\n            accessHash: entity.accessHash,\r\n        });\r\n    }\r\n    if (entity instanceof tl_1.Api.InputUser) {\r\n        return new tl_1.Api.InputPeerUser({\r\n            userId: entity.userId,\r\n            accessHash: entity.accessHash,\r\n        });\r\n    }\r\n    if (entity instanceof tl_1.Api.InputChannel) {\r\n        return new tl_1.Api.InputPeerChannel({\r\n            channelId: entity.channelId,\r\n            accessHash: entity.accessHash,\r\n        });\r\n    }\r\n    if (entity instanceof tl_1.Api.UserEmpty) {\r\n        return new tl_1.Api.InputPeerEmpty();\r\n    }\r\n    if (entity instanceof tl_1.Api.UserFull) {\r\n        return getInputPeer(entity.id);\r\n    }\r\n    if (entity instanceof tl_1.Api.ChatFull) {\r\n        return new tl_1.Api.InputPeerChat({ chatId: entity.id });\r\n    }\r\n    if (entity instanceof tl_1.Api.PeerChat) {\r\n        return new tl_1.Api.InputPeerChat({\r\n            chatId: entity.chatId,\r\n        });\r\n    }\r\n    _raiseCastFail(entity, \"InputPeer\");\r\n}\r\nexports.getInputPeer = getInputPeer;\r\nfunction _photoSizeByteCount(size) {\r\n    if (size instanceof tl_1.Api.PhotoSize) {\r\n        return size.size;\r\n    }\r\n    else if (size instanceof tl_1.Api.PhotoStrippedSize) {\r\n        if (size.bytes.length < 3 || size.bytes[0] != 1) {\r\n            return size.bytes.length;\r\n        }\r\n        return size.bytes.length + 622;\r\n    }\r\n    else if (size instanceof tl_1.Api.PhotoCachedSize) {\r\n        return size.bytes.length;\r\n    }\r\n    else if (size instanceof tl_1.Api.PhotoSizeEmpty) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nexports._photoSizeByteCount = _photoSizeByteCount;\r\nfunction _getEntityPair(entityId, entities, cache, getInputPeerFunction = getInputPeer) {\r\n    const entity = entities.get(entityId);\r\n    let inputEntity;\r\n    try {\r\n        inputEntity = cache.get(entityId);\r\n    }\r\n    catch (e) {\r\n        try {\r\n            inputEntity = getInputPeerFunction(inputEntity);\r\n        }\r\n        catch (e) { }\r\n    }\r\n    return [entity, inputEntity];\r\n}\r\nexports._getEntityPair = _getEntityPair;\r\nfunction getInnerText(text, entities) {\r\n    const result = [];\r\n    entities.forEach(function (value, key) {\r\n        const start = value.offset;\r\n        const end = value.offset + value.length;\r\n        result.push(text.slice(start, end));\r\n    });\r\n    return result;\r\n}\r\nexports.getInnerText = getInnerText;\r\n/**\r\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\r\n\r\n .. important::\r\n\r\n This method does not validate for invalid general-purpose access\r\n hashes, unlike `get_input_peer`. Consider using instead:\r\n ``get_input_channel(get_input_peer(channel))``.\r\n\r\n * @param entity\r\n * @returns {InputChannel|*}\r\n */\r\nfunction getInputChannel(entity) {\r\n    if (typeof entity === \"string\" ||\r\n        typeof entity == \"number\" ||\r\n        typeof entity == \"bigint\" ||\r\n        big_integer_1.default.isInstance(entity)) {\r\n        _raiseCastFail(entity, \"InputChannel\");\r\n    }\r\n    if (entity.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(entity, \"InputChannel\");\r\n    }\r\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) {\r\n        // crc32(b'InputChannel')\r\n        return entity;\r\n    }\r\n    if (entity instanceof tl_1.Api.Channel ||\r\n        entity instanceof tl_1.Api.ChannelForbidden) {\r\n        return new tl_1.Api.InputChannel({\r\n            channelId: entity.id,\r\n            accessHash: entity.accessHash || big_integer_1.default.zero,\r\n        });\r\n    }\r\n    if (entity instanceof tl_1.Api.InputPeerChannel) {\r\n        return new tl_1.Api.InputChannel({\r\n            channelId: entity.channelId,\r\n            accessHash: entity.accessHash,\r\n        });\r\n    }\r\n    _raiseCastFail(entity, \"InputChannel\");\r\n}\r\nexports.getInputChannel = getInputChannel;\r\n/**\r\n Similar to :meth:`getInputPeer`, but for :tl:`InputUser`'s alone.\r\n\r\n .. important::\r\n\r\n This method does not validate for invalid general-purpose access\r\n hashes, unlike `get_input_peer`. Consider using instead:\r\n ``get_input_channel(get_input_peer(channel))``.\r\n\r\n * @param entity\r\n */\r\nfunction getInputUser(entity) {\r\n    if (typeof entity === \"string\" ||\r\n        typeof entity == \"number\" ||\r\n        typeof entity == \"bigint\" ||\r\n        big_integer_1.default.isInstance(entity)) {\r\n        _raiseCastFail(entity, \"InputUser\");\r\n    }\r\n    if (entity.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(entity, \"InputUser\");\r\n    }\r\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) {\r\n        // crc32(b'InputUser')\r\n        return entity;\r\n    }\r\n    if (entity instanceof tl_1.Api.User) {\r\n        if (entity.self) {\r\n            return new tl_1.Api.InputUserSelf();\r\n        }\r\n        else {\r\n            return new tl_1.Api.InputUser({\r\n                userId: entity.id,\r\n                accessHash: entity.accessHash || big_integer_1.default.zero,\r\n            });\r\n        }\r\n    }\r\n    if (entity instanceof tl_1.Api.InputPeerSelf) {\r\n        return new tl_1.Api.InputUserSelf();\r\n    }\r\n    if (entity instanceof tl_1.Api.UserEmpty ||\r\n        entity instanceof tl_1.Api.InputPeerEmpty) {\r\n        return new tl_1.Api.InputUserEmpty();\r\n    }\r\n    if (entity instanceof tl_1.Api.UserFull) {\r\n        return getInputUser(entity);\r\n    }\r\n    if (entity instanceof tl_1.Api.InputPeerUser) {\r\n        return new tl_1.Api.InputUser({\r\n            userId: entity.userId,\r\n            accessHash: entity.accessHash,\r\n        });\r\n    }\r\n    if (entity instanceof tl_1.Api.InputPeerUserFromMessage) {\r\n        return new tl_1.Api.InputUserFromMessage({\r\n            userId: entity.userId,\r\n            peer: entity.peer,\r\n            msgId: entity.msgId,\r\n        });\r\n    }\r\n    _raiseCastFail(entity, \"InputUser\");\r\n}\r\nexports.getInputUser = getInputUser;\r\n/**\r\n Similar to :meth:`get_input_peer`, but for dialogs\r\n * @param dialog\r\n */\r\n/*CONTEST\r\nfunction getInputDialog(dialog) {\r\n    try {\r\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\r\n            return dialog\r\n        }\r\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\r\n            return new Api.InputDialogPeer({ peer: dialog })\r\n        }\r\n    } catch (e) {\r\n        _raiseCastFail(dialog, 'InputDialogPeer')\r\n    }\r\n\r\n    try {\r\n        return new Api.InputDialogPeer(getInputPeer(dialog))\r\n        // eslint-disable-next-line no-empty\r\n    } catch (e) {\r\n\r\n    }\r\n    _raiseCastFail(dialog, 'InputDialogPeer')\r\n}\r\n*/\r\n/**\r\n *  Similar to :meth:`get_input_peer`, but for input messages.\r\n */\r\nfunction getInputMessage(message) {\r\n    if (typeof message === \"number\") {\r\n        return new tl_1.Api.InputMessageID({ id: message });\r\n    }\r\n    if (message === undefined || message.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(message, \"InputMessage\");\r\n    }\r\n    if (message.SUBCLASS_OF_ID === 0x54b6bcc5) {\r\n        // crc32(b'InputMessage')\r\n        return message;\r\n    }\r\n    else if (message.SUBCLASS_OF_ID === 0x790009e3) {\r\n        // crc32(b'Message'):\r\n        return new tl_1.Api.InputMessageID({ id: message.id });\r\n    }\r\n    _raiseCastFail(message, \"InputMessage\");\r\n}\r\nexports.getInputMessage = getInputMessage;\r\n/**\r\n *  Similar to :meth:`get_input_peer`, but for input messages.\r\n */\r\nfunction getInputChatPhoto(photo) {\r\n    if (photo === undefined || photo.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(photo, \"InputChatPhoto\");\r\n    }\r\n    if (photo.SUBCLASS_OF_ID === 0xd4eb2d74) {\r\n        //crc32(b'InputChatPhoto')\r\n        return photo;\r\n    }\r\n    else if (photo.SUBCLASS_OF_ID === 0xe7655f1f) {\r\n        // crc32(b'InputFile'):\r\n        return new tl_1.Api.InputChatUploadedPhoto({\r\n            file: photo,\r\n        });\r\n    }\r\n    photo = getInputPhoto(photo);\r\n    if (photo instanceof tl_1.Api.InputPhoto) {\r\n        return new tl_1.Api.InputChatPhoto({\r\n            id: photo,\r\n        });\r\n    }\r\n    else if (photo instanceof tl_1.Api.InputPhotoEmpty) {\r\n        return new tl_1.Api.InputChatPhotoEmpty();\r\n    }\r\n    _raiseCastFail(photo, \"InputChatPhoto\");\r\n}\r\nexports.getInputChatPhoto = getInputChatPhoto;\r\n/**\r\n * Adds the JPG header and footer to a stripped image.\r\n * Ported from https://github.com/telegramdesktop/tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\r\n\r\n * @param stripped{Buffer}\r\n * @returns {Buffer}\r\n */\r\nfunction strippedPhotoToJpg(stripped) {\r\n    // Note: Changes here should update _stripped_real_length\r\n    if (stripped.length < 3 || stripped[0] !== 1) {\r\n        return stripped;\r\n    }\r\n    const header = buffer_1.Buffer.from(JPEG_HEADER);\r\n    header[164] = stripped[1];\r\n    header[166] = stripped[2];\r\n    return buffer_1.Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\r\n}\r\nexports.strippedPhotoToJpg = strippedPhotoToJpg;\r\n/*CONTEST\r\nfunction getInputLocation(location) {\r\n    try {\r\n        if (!location.SUBCLASS_OF_ID) {\r\n            throw new Error()\r\n        }\r\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\r\n            return {\r\n                dcId: null,\r\n                inputLocation: location\r\n            }\r\n        }\r\n    } catch (e) {\r\n        _raiseCastFail(location, 'InputFileLocation')\r\n    }\r\n    if (location instanceof Api.Message) {\r\n        location = location.media\r\n    }\r\n\r\n    if (location instanceof Api.MessageMediaDocument) {\r\n        location = location.document\r\n    } else if (location instanceof Api.MessageMediaPhoto) {\r\n        location = location.photo\r\n    }\r\n\r\n    if (location instanceof Api.Document) {\r\n        return {\r\n            dcId: location.dcId,\r\n            inputLocation: new Api.InputDocumentFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: '', // Presumably to download one of its thumbnails\r\n            }),\r\n        }\r\n    } else if (location instanceof Api.Photo) {\r\n        return {\r\n            dcId: location.dcId,\r\n            inputLocation: new Api.InputPhotoFileLocation({\r\n                id: location.id,\r\n                accessHash: location.accessHash,\r\n                fileReference: location.fileReference,\r\n                thumbSize: location.sizes[location.sizes.length - 1].type,\r\n            }),\r\n        }\r\n    }\r\n\r\n    if (location instanceof Api.FileLocationToBeDeprecated) {\r\n        throw new Error('Unavailable location cannot be used as input')\r\n    }\r\n    _raiseCastFail(location, 'InputFileLocation')\r\n}\r\n*/\r\n/**\r\n *  Similar to :meth:`get_input_peer`, but for photos\r\n */\r\nfunction getInputPhoto(photo) {\r\n    if (photo.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(photo, \"InputPhoto\");\r\n    }\r\n    if (photo.SUBCLASS_OF_ID === 2221106144) {\r\n        return photo;\r\n    }\r\n    if (photo instanceof tl_1.Api.Message) {\r\n        photo = photo.media;\r\n    }\r\n    if (photo instanceof tl_1.Api.photos.Photo ||\r\n        photo instanceof tl_1.Api.MessageMediaPhoto) {\r\n        photo = photo.photo;\r\n    }\r\n    if (photo instanceof tl_1.Api.Photo) {\r\n        return new tl_1.Api.InputPhoto({\r\n            id: photo.id,\r\n            accessHash: photo.accessHash,\r\n            fileReference: photo.fileReference,\r\n        });\r\n    }\r\n    if (photo instanceof tl_1.Api.PhotoEmpty) {\r\n        return new tl_1.Api.InputPhotoEmpty();\r\n    }\r\n    if (photo instanceof tl_1.Api.messages.ChatFull) {\r\n        photo = photo.fullChat;\r\n    }\r\n    if (photo instanceof tl_1.Api.ChannelFull) {\r\n        return getInputPhoto(photo.chatPhoto);\r\n    }\r\n    else {\r\n        if (photo instanceof tl_1.Api.UserFull) {\r\n            return getInputPhoto(photo.profilePhoto);\r\n        }\r\n        else {\r\n            if (photo instanceof tl_1.Api.Channel ||\r\n                photo instanceof tl_1.Api.Chat ||\r\n                photo instanceof tl_1.Api.User) {\r\n                return getInputPhoto(photo.photo);\r\n            }\r\n        }\r\n    }\r\n    if (photo instanceof tl_1.Api.UserEmpty ||\r\n        photo instanceof tl_1.Api.ChatEmpty ||\r\n        photo instanceof tl_1.Api.ChatForbidden ||\r\n        photo instanceof tl_1.Api.ChannelForbidden) {\r\n        return new tl_1.Api.InputPhotoEmpty();\r\n    }\r\n    _raiseCastFail(photo, \"InputPhoto\");\r\n}\r\nexports.getInputPhoto = getInputPhoto;\r\n/**\r\n *  Similar to :meth:`get_input_peer`, but for documents\r\n */\r\nfunction getInputDocument(document) {\r\n    if (document.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(document, \"InputDocument\");\r\n    }\r\n    if (document.SUBCLASS_OF_ID === 0xf33fdb68) {\r\n        return document;\r\n    }\r\n    if (document instanceof tl_1.Api.Document) {\r\n        return new tl_1.Api.InputDocument({\r\n            id: document.id,\r\n            accessHash: document.accessHash,\r\n            fileReference: document.fileReference,\r\n        });\r\n    }\r\n    if (document instanceof tl_1.Api.DocumentEmpty) {\r\n        return new tl_1.Api.InputDocumentEmpty();\r\n    }\r\n    if (document instanceof tl_1.Api.MessageMediaDocument) {\r\n        return getInputDocument(document.document);\r\n    }\r\n    if (document instanceof tl_1.Api.Message) {\r\n        return getInputDocument(document.media);\r\n    }\r\n    _raiseCastFail(document, \"InputDocument\");\r\n}\r\nexports.getInputDocument = getInputDocument;\r\n/**\r\n *  Returns `True` if the file has an audio mime type.\r\n */\r\nfunction isAudio(file) {\r\n    const ext = _getExtension(file);\r\n    if (!ext) {\r\n        const metadata = _getMetadata(file);\r\n        return (metadata.get(\"mimeType\") || \"\").startsWith(\"audio/\");\r\n    }\r\n    else {\r\n        file = \"a\" + ext;\r\n        return (mime_1.default.getType(file) || \"\").startsWith(\"audio/\");\r\n    }\r\n}\r\nexports.isAudio = isAudio;\r\n/**\r\n *  Returns `True` if the file has an image mime type.\r\n */\r\nfunction isImage(file) {\r\n    const ext = _getExtension(file).toLowerCase();\r\n    return (ext.endsWith(\".png\") || ext.endsWith(\".jpg\") || ext.endsWith(\".jpeg\"));\r\n}\r\nexports.isImage = isImage;\r\nfunction getExtension(media) {\r\n    // Photos are always compressed as .jpg by Telegram\r\n    try {\r\n        getInputPhoto(media);\r\n        return \".jpg\";\r\n    }\r\n    catch (e) { }\r\n    if (media instanceof tl_1.Api.UserProfilePhoto ||\r\n        media instanceof tl_1.Api.ChatPhoto) {\r\n        return \".jpg\";\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaDocument) {\r\n        media = media.document;\r\n    }\r\n    if (media instanceof tl_1.Api.Document ||\r\n        media instanceof tl_1.Api.WebDocument ||\r\n        media instanceof tl_1.Api.WebDocumentNoProxy) {\r\n        if (media.mimeType === \"application/octet-stream\") {\r\n            // Octet stream are just bytes, which have no default extension\r\n            return \"\";\r\n        }\r\n        else {\r\n            return mime_1.default.getExtension(media.mimeType) || \"\";\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\nexports.getExtension = getExtension;\r\n/**\r\n * Gets the extension for the given file, which can be either a\r\n * str or an ``open()``'ed file (which has a ``.name`` attribute).\r\n */\r\nfunction _getExtension(file) {\r\n    if (typeof file === \"string\") {\r\n        return \".\" + file.split(\".\").pop();\r\n    }\r\n    else if (\"name\" in file) {\r\n        return _getExtension(file.name);\r\n    }\r\n    else {\r\n        return getExtension(file);\r\n    }\r\n}\r\nfunction _getMetadata(file) {\r\n    //TODO Return nothing for now until we find a better way\r\n    return new Map();\r\n}\r\nfunction isVideo(file) {\r\n    var _a;\r\n    const ext = _getExtension(file);\r\n    if (!ext) {\r\n        const metadata = _getMetadata(file);\r\n        if (metadata.has(\"mimeType\")) {\r\n            return ((_a = metadata.get(\"mimeType\")) === null || _a === void 0 ? void 0 : _a.startsWith(\"video/\")) || false;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        file = \"a\" + ext;\r\n        return (mime_1.default.getType(file) || \"\").startsWith(\"video/\");\r\n    }\r\n}\r\n/**\r\n Get a list of attributes for the given file and\r\n the mime type as a tuple ([attribute], mime_type).\r\n */\r\nfunction getAttributes(file, { attributes = null, mimeType = undefined, forceDocument = false, voiceNote = false, videoNote = false, supportsStreaming = false, thumb = null, }) {\r\n    var _a, _b, _c, _d;\r\n    const name = typeof file == \"string\" ? file : file.name || \"unnamed\";\r\n    if (mimeType === undefined) {\r\n        mimeType = mime_1.default.getType(name) || \"application/octet-stream\";\r\n    }\r\n    const attrObj = new Map();\r\n    attrObj.set(tl_1.Api.DocumentAttributeFilename, new tl_1.Api.DocumentAttributeFilename({\r\n        fileName: name.split(/[\\\\/]/).pop() || \"\",\r\n    }));\r\n    if (isAudio(file)) {\r\n        const m = _getMetadata(file);\r\n        attrObj.set(tl_1.Api.DocumentAttributeAudio, new tl_1.Api.DocumentAttributeAudio({\r\n            voice: voiceNote,\r\n            title: m.has(\"title\") ? m.get(\"title\") : undefined,\r\n            performer: m.has(\"author\") ? m.get(\"author\") : undefined,\r\n            duration: Number.parseInt((_a = m.get(\"duration\")) !== null && _a !== void 0 ? _a : \"0\"),\r\n        }));\r\n    }\r\n    if (!forceDocument && isVideo(file)) {\r\n        let doc;\r\n        if (thumb) {\r\n            const t_m = _getMetadata(thumb);\r\n            const width = Number.parseInt((t_m === null || t_m === void 0 ? void 0 : t_m.get(\"width\")) || \"1\");\r\n            const height = Number.parseInt((t_m === null || t_m === void 0 ? void 0 : t_m.get(\"height\")) || \"1\");\r\n            doc = new tl_1.Api.DocumentAttributeVideo({\r\n                duration: 0,\r\n                h: height,\r\n                w: width,\r\n                roundMessage: videoNote,\r\n                supportsStreaming: supportsStreaming,\r\n            });\r\n        }\r\n        else {\r\n            const m = _getMetadata(file);\r\n            doc = new tl_1.Api.DocumentAttributeVideo({\r\n                roundMessage: videoNote,\r\n                w: Number.parseInt((_b = m.get(\"width\")) !== null && _b !== void 0 ? _b : \"1\"),\r\n                h: Number.parseInt((_c = m.get(\"height\")) !== null && _c !== void 0 ? _c : \"1\"),\r\n                duration: Number.parseInt((_d = m.get(\"duration\")) !== null && _d !== void 0 ? _d : \"0\"),\r\n                supportsStreaming: supportsStreaming,\r\n            });\r\n        }\r\n        attrObj.set(tl_1.Api.DocumentAttributeVideo, doc);\r\n    }\r\n    if (videoNote) {\r\n        if (attrObj.has(tl_1.Api.DocumentAttributeAudio)) {\r\n            attrObj.get(tl_1.Api.DocumentAttributeAudio).voice = true;\r\n        }\r\n        else {\r\n            attrObj.set(tl_1.Api.DocumentAttributeAudio, new tl_1.Api.DocumentAttributeAudio({\r\n                duration: 0,\r\n                voice: true,\r\n            }));\r\n        }\r\n    }\r\n    /* Now override the attributes if any. As we have a dict of\r\n    {cls: instance}, we can override any class with the list\r\n     of attributes provided by the user easily.\r\n    */\r\n    if (attributes) {\r\n        for (const a of attributes) {\r\n            attrObj.set(a.constructor, a);\r\n        }\r\n    }\r\n    return {\r\n        attrs: Array.from(attrObj.values()),\r\n        mimeType: mimeType,\r\n    };\r\n}\r\nexports.getAttributes = getAttributes;\r\n/**\r\n *  Similar to :meth:`get_input_peer`, but for geo points\r\n */\r\nfunction getInputGeo(geo) {\r\n    if (geo === undefined || geo.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(geo, \"InputGeoPoint\");\r\n    }\r\n    if (geo.SUBCLASS_OF_ID === 0x430d225) {\r\n        // crc32(b'InputGeoPoint'):\r\n        return geo;\r\n    }\r\n    if (geo instanceof tl_1.Api.GeoPoint) {\r\n        return new tl_1.Api.InputGeoPoint({ lat: geo.lat, long: geo.long });\r\n    }\r\n    if (geo instanceof tl_1.Api.GeoPointEmpty) {\r\n        return new tl_1.Api.InputGeoPointEmpty();\r\n    }\r\n    if (geo instanceof tl_1.Api.MessageMediaGeo) {\r\n        return getInputGeo(geo.geo);\r\n    }\r\n    if (geo instanceof tl_1.Api.Message) {\r\n        return getInputGeo(geo.media);\r\n    }\r\n    _raiseCastFail(geo, \"InputGeoPoint\");\r\n}\r\nexports.getInputGeo = getInputGeo;\r\n/**\r\n *\r\n Similar to :meth:`get_input_peer`, but for media.\r\n\r\n If the media is :tl:`InputFile` and ``is_photo`` is known to be `True`,\r\n it will be treated as an :tl:`InputMediaUploadedPhoto`. Else, the rest\r\n of parameters will indicate how to treat it.\r\n * @param media\r\n * @param isPhoto - whether it's a photo or not\r\n * @param attributes\r\n * @param forceDocument\r\n * @param voiceNote\r\n * @param videoNote\r\n * @param supportsStreaming\r\n */\r\nfunction getInputMedia(media, { isPhoto = false, attributes = undefined, forceDocument = false, voiceNote = false, videoNote = false, supportsStreaming = false, } = {}) {\r\n    if (media.SUBCLASS_OF_ID === undefined) {\r\n        _raiseCastFail(media, \"InputMedia\");\r\n    }\r\n    if (media.SUBCLASS_OF_ID === 0xfaf846f4) {\r\n        // crc32(b'InputMedia')\r\n        return media;\r\n    }\r\n    else {\r\n        if (media.SUBCLASS_OF_ID === 2221106144) {\r\n            // crc32(b'InputPhoto')\r\n            return new tl_1.Api.InputMediaPhoto({ id: media });\r\n        }\r\n        else {\r\n            if (media.SUBCLASS_OF_ID === 4081048424) {\r\n                // crc32(b'InputDocument')\r\n                return new tl_1.Api.InputMediaDocument({ id: media });\r\n            }\r\n        }\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaPhoto) {\r\n        return new tl_1.Api.InputMediaPhoto({\r\n            id: getInputPhoto(media.photo),\r\n            ttlSeconds: media.ttlSeconds,\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.Photo ||\r\n        media instanceof tl_1.Api.photos.Photo ||\r\n        media instanceof tl_1.Api.PhotoEmpty) {\r\n        return new tl_1.Api.InputMediaPhoto({ id: getInputPhoto(media) });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaDocument) {\r\n        return new tl_1.Api.InputMediaDocument({\r\n            id: getInputDocument(media.document),\r\n            ttlSeconds: media.ttlSeconds,\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.Document || media instanceof tl_1.Api.DocumentEmpty) {\r\n        return new tl_1.Api.InputMediaDocument({ id: getInputDocument(media) });\r\n    }\r\n    if (media instanceof tl_1.Api.InputFile || media instanceof tl_1.Api.InputFileBig) {\r\n        if (isPhoto) {\r\n            return new tl_1.Api.InputMediaUploadedPhoto({ file: media });\r\n        }\r\n        else {\r\n            const { attrs, mimeType } = getAttributes(media, {\r\n                attributes: attributes,\r\n                forceDocument: forceDocument,\r\n                voiceNote: voiceNote,\r\n                videoNote: videoNote,\r\n                supportsStreaming: supportsStreaming,\r\n            });\r\n            return new tl_1.Api.InputMediaUploadedDocument({\r\n                file: media,\r\n                mimeType: mimeType,\r\n                attributes: attrs,\r\n                forceFile: forceDocument,\r\n            });\r\n        }\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaGame) {\r\n        return new tl_1.Api.InputMediaGame({\r\n            id: new tl_1.Api.InputGameID({\r\n                id: media.game.id,\r\n                accessHash: media.game.accessHash,\r\n            }),\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaContact) {\r\n        return new tl_1.Api.InputMediaContact({\r\n            phoneNumber: media.phoneNumber,\r\n            firstName: media.firstName,\r\n            lastName: media.lastName,\r\n            vcard: \"\",\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaGeo) {\r\n        return new tl_1.Api.InputMediaGeoPoint({ geoPoint: getInputGeo(media.geo) });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaVenue) {\r\n        return new tl_1.Api.InputMediaVenue({\r\n            geoPoint: getInputGeo(media.geo),\r\n            title: media.title,\r\n            address: media.address,\r\n            provider: media.provider,\r\n            venueId: media.venueId,\r\n            venueType: \"\",\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaDice) {\r\n        return new tl_1.Api.InputMediaDice({\r\n            emoticon: media.emoticon,\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaEmpty ||\r\n        media instanceof tl_1.Api.MessageMediaUnsupported ||\r\n        media instanceof tl_1.Api.ChatPhotoEmpty ||\r\n        media instanceof tl_1.Api.UserProfilePhotoEmpty ||\r\n        media instanceof tl_1.Api.ChatPhoto ||\r\n        media instanceof tl_1.Api.UserProfilePhoto) {\r\n        return new tl_1.Api.InputMediaEmpty();\r\n    }\r\n    if (media instanceof tl_1.Api.Message) {\r\n        return getInputMedia(media.media, { isPhoto: isPhoto });\r\n    }\r\n    if (media instanceof tl_1.Api.MessageMediaPoll) {\r\n        let correctAnswers;\r\n        if (media.poll.quiz) {\r\n            if (!media.results.results) {\r\n                throw new Error(\"Cannot cast unanswered quiz to any kind of InputMedia.\");\r\n            }\r\n            correctAnswers = [];\r\n            for (const r of media.results.results) {\r\n                if (r.correct) {\r\n                    correctAnswers.push(r.option);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            correctAnswers = undefined;\r\n        }\r\n        return new tl_1.Api.InputMediaPoll({\r\n            poll: media.poll,\r\n            correctAnswers: correctAnswers,\r\n            solution: media.results.solution,\r\n            solutionEntities: media.results.solutionEntities,\r\n        });\r\n    }\r\n    if (media instanceof tl_1.Api.Poll) {\r\n        return new tl_1.Api.InputMediaPoll({\r\n            poll: media,\r\n        });\r\n    }\r\n    _raiseCastFail(media, \"InputMedia\");\r\n}\r\nexports.getInputMedia = getInputMedia;\r\n/**\r\n * Gets the appropriated part size when uploading or downloading files,\r\n * given an initial file size.\r\n * @param fileSize\r\n * @returns {Number}\r\n */\r\nfunction getAppropriatedPartSize(fileSize) {\r\n    if (fileSize.lesser(104857600)) {\r\n        // 100MB\r\n        return 128;\r\n    }\r\n    if (fileSize.lesser(786432000)) {\r\n        // 750MB\r\n        return 256;\r\n    }\r\n    return 512;\r\n}\r\nexports.getAppropriatedPartSize = getAppropriatedPartSize;\r\nfunction getPeer(peer) {\r\n    if (!peer) {\r\n        _raiseCastFail(peer, \"undefined\");\r\n    }\r\n    if (typeof peer === \"string\") {\r\n        _raiseCastFail(peer, \"peer\");\r\n    }\r\n    if (typeof peer == \"number\" || typeof peer == \"bigint\") {\r\n        peer = (0, Helpers_1.returnBigInt)(peer);\r\n    }\r\n    try {\r\n        if (big_integer_1.default.isInstance(peer)) {\r\n            const res = resolveId(peer);\r\n            if (res[1] === tl_1.Api.PeerChannel) {\r\n                return new tl_1.Api.PeerChannel({ channelId: res[0] });\r\n            }\r\n            else if (res[1] === tl_1.Api.PeerChat) {\r\n                return new tl_1.Api.PeerChat({ chatId: res[0] });\r\n            }\r\n            else {\r\n                return new tl_1.Api.PeerUser({ userId: res[0] });\r\n            }\r\n        }\r\n        if (peer.SUBCLASS_OF_ID === undefined) {\r\n            throw new Error();\r\n        }\r\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\r\n            // crc32('Peer')\r\n            return peer;\r\n        }\r\n        else if (peer instanceof tl_1.Api.contacts.ResolvedPeer ||\r\n            peer instanceof tl_1.Api.InputNotifyPeer ||\r\n            peer instanceof tl_1.Api.TopPeer ||\r\n            peer instanceof tl_1.Api.Dialog ||\r\n            peer instanceof tl_1.Api.DialogPeer) {\r\n            return peer.peer;\r\n        }\r\n        else if (peer instanceof tl_1.Api.ChannelFull) {\r\n            return new tl_1.Api.PeerChannel({ channelId: peer.id });\r\n        }\r\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 ||\r\n            peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\r\n            // ChatParticipant, ChannelParticipant\r\n            if (\"userId\" in peer) {\r\n                return new tl_1.Api.PeerUser({ userId: peer.userId });\r\n            }\r\n        }\r\n        peer = getInputPeer(peer, false, false);\r\n        if (peer instanceof tl_1.Api.InputPeerUser) {\r\n            return new tl_1.Api.PeerUser({ userId: peer.userId });\r\n        }\r\n        else if (peer instanceof tl_1.Api.InputPeerChat) {\r\n            return new tl_1.Api.PeerChat({ chatId: peer.chatId });\r\n        }\r\n        else if (peer instanceof tl_1.Api.InputPeerChannel) {\r\n            return new tl_1.Api.PeerChannel({ channelId: peer.channelId });\r\n        }\r\n    }\r\n    catch (e) { }\r\n    _raiseCastFail(peer, \"peer\");\r\n}\r\nexports.getPeer = getPeer;\r\nfunction sanitizeParseMode(mode) {\r\n    if (mode === \"md\" || mode === \"markdown\") {\r\n        return markdown_1.MarkdownParser;\r\n    }\r\n    if (mode === \"md2\" || mode === \"markdownv2\") {\r\n        return markdownv2_1.MarkdownV2Parser;\r\n    }\r\n    if (mode == \"html\") {\r\n        return html_1.HTMLParser;\r\n    }\r\n    if (typeof mode == \"object\") {\r\n        if (\"parse\" in mode && \"unparse\" in mode) {\r\n            return mode;\r\n        }\r\n    }\r\n    throw new Error(`Invalid parse mode type ${mode}`);\r\n}\r\nexports.sanitizeParseMode = sanitizeParseMode;\r\n/**\r\n Convert the given peer into its marked ID by default.\r\n\r\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\r\n can be identified back. User ID is left unmodified, chat ID is negated,\r\n and channel ID is prefixed with -100:\r\n\r\n * ``userId``\r\n * ``-chatId``\r\n * ``-100channel_id``\r\n\r\n The original ID and the peer type class can be returned with\r\n a call to :meth:`resolve_id(marked_id)`.\r\n * @param peer\r\n * @param addMark\r\n */\r\nfunction getPeerId(peer, addMark = true) {\r\n    if (typeof peer == \"string\" && parseID(peer)) {\r\n        peer = (0, Helpers_1.returnBigInt)(peer);\r\n    }\r\n    // First we assert it's a Peer TLObject, or early return for integers\r\n    if (big_integer_1.default.isInstance(peer)) {\r\n        return addMark ? peer.toString() : resolveId(peer)[0].toString();\r\n    }\r\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\r\n    if (peer instanceof tl_1.Api.InputPeerSelf) {\r\n        _raiseCastFail(peer, \"int (you might want to use client.get_peer_id)\");\r\n    }\r\n    try {\r\n        peer = getPeer(peer);\r\n    }\r\n    catch (e) {\r\n        _raiseCastFail(peer, \"int\");\r\n    }\r\n    if (peer instanceof tl_1.Api.PeerUser) {\r\n        return peer.userId.toString();\r\n    }\r\n    else if (peer instanceof tl_1.Api.PeerChat) {\r\n        // Check in case the user mixed things up to avoid blowing up\r\n        peer.chatId = resolveId((0, Helpers_1.returnBigInt)(peer.chatId))[0];\r\n        return addMark\r\n            ? peer.chatId.negate().toString()\r\n            : peer.chatId.toString();\r\n    }\r\n    else if (typeof peer == \"object\" && \"channelId\" in peer) {\r\n        // if (peer instanceof Api.PeerChannel)\r\n        // Check in case the user mixed things up to avoid blowing up\r\n        peer.channelId = resolveId((0, Helpers_1.returnBigInt)(peer.channelId))[0];\r\n        if (!addMark) {\r\n            return peer.channelId.toString();\r\n        }\r\n        // Concat -100 through math tricks, .to_supergroup() on\r\n        // Madeline IDs will be strictly positive -> log works.\r\n        return \"-100\" + peer.channelId.toString();\r\n    }\r\n    _raiseCastFail(peer, \"int\");\r\n}\r\nexports.getPeerId = getPeerId;\r\n/**\r\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\r\n * @param markedId\r\n */\r\nfunction resolveId(markedId) {\r\n    if (markedId.greaterOrEquals(big_integer_1.default.zero)) {\r\n        return [markedId, tl_1.Api.PeerUser];\r\n    }\r\n    // There have been report of chat IDs being 10000xyz, which means their\r\n    // marked version is -10000xyz, which in turn looks like a channel but\r\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\r\n    // two zeroes.\r\n    const m = markedId.toString().match(/-100([^0]\\d*)/);\r\n    if (m) {\r\n        return [(0, big_integer_1.default)(m[1]), tl_1.Api.PeerChannel];\r\n    }\r\n    return [markedId.negate(), tl_1.Api.PeerChat];\r\n}\r\nexports.resolveId = resolveId;\r\n/**\r\n * returns an entity pair\r\n * @param entityId\r\n * @param entities\r\n * @param cache\r\n * @param getInputPeer\r\n * @returns {{inputEntity: *, entity: *}}\r\n * @private\r\n */\r\n/*CONTEST\r\n\r\nexport function  _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\r\n    const entity = entities.get(entityId)\r\n    let inputEntity = cache[entityId]\r\n    if (inputEntity === undefined) {\r\n        try {\r\n            inputEntity = getInputPeer(inputEntity)\r\n        } catch (e) {\r\n            inputEntity = null\r\n        }\r\n    }\r\n    return {\r\n        entity,\r\n        inputEntity\r\n    }\r\n}\r\n*/\r\nfunction getMessageId(message) {\r\n    if (!message) {\r\n        return undefined;\r\n    }\r\n    else if (typeof message === \"number\") {\r\n        return message;\r\n    }\r\n    else if (message.SUBCLASS_OF_ID === 0x790009e3 || \"id\" in message) {\r\n        // crc32(b'Message')\r\n        return message.id;\r\n    }\r\n    else {\r\n        throw new Error(`Invalid message type: ${message.constructor.name}`);\r\n    }\r\n}\r\nexports.getMessageId = getMessageId;\r\n/**\r\n * Parses the given phone, or returns `undefined` if it's invalid.\r\n * @param phone\r\n */\r\nfunction parsePhone(phone) {\r\n    phone = phone.toString().replace(/[()\\s-]/gm, \"\");\r\n    if (phone.startsWith(\"+\") && phone.split(\"+\").length - 1 == 1) {\r\n        return !isNaN(Number(phone)) ? phone.replace(\"+\", \"\") : undefined;\r\n    }\r\n}\r\nexports.parsePhone = parsePhone;\r\n/**\r\n * Parses a string ID into a big int\r\n * @param id\r\n */\r\nfunction parseID(id) {\r\n    const isValid = /^(-?[0-9][0-9]*)$/.test(id);\r\n    return isValid ? (0, big_integer_1.default)(id) : undefined;\r\n}\r\nexports.parseID = parseID;\r\nfunction resolveInviteLink(link) {\r\n    throw new Error(\"not implemented\");\r\n}\r\nexports.resolveInviteLink = resolveInviteLink;\r\n/**\r\n Parses the given username or channel access hash, given\r\n a string, username or URL. Returns a tuple consisting of\r\n both the stripped, lowercase username and whether it is\r\n a joinchat/ hash (in which case is not lowercase'd).\r\n\r\n Returns ``(undefined, false)`` if the ``username`` or link is not valid.\r\n\r\n * @param username {string}\r\n */\r\nfunction parseUsername(username) {\r\n    username = username.trim();\r\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE);\r\n    if (m) {\r\n        username = username.replace(m[0], \"\");\r\n        if (m[1]) {\r\n            return {\r\n                username: username,\r\n                isInvite: true,\r\n            };\r\n        }\r\n        else {\r\n            username = rtrim(username, \"/\");\r\n        }\r\n    }\r\n    if (username.match(VALID_USERNAME_RE)) {\r\n        return {\r\n            username: username.toLowerCase(),\r\n            isInvite: false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            username: undefined,\r\n            isInvite: false,\r\n        };\r\n    }\r\n}\r\nexports.parseUsername = parseUsername;\r\nfunction rtrim(s, mask) {\r\n    while (~mask.indexOf(s[s.length - 1])) {\r\n        s = s.slice(0, -1);\r\n    }\r\n    return s;\r\n}\r\nexports.rtrim = rtrim;\r\n/**\r\n * Gets the display name for the given :tl:`User`,\r\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\r\n * @param entity\r\n */\r\nfunction getDisplayName(entity) {\r\n    if (entity instanceof tl_1.Api.User) {\r\n        if (entity.lastName && entity.firstName) {\r\n            return `${entity.firstName} ${entity.lastName}`;\r\n        }\r\n        else if (entity.firstName) {\r\n            return entity.firstName;\r\n        }\r\n        else if (entity.lastName) {\r\n            return entity.lastName;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n    else if (entity instanceof tl_1.Api.Chat || entity instanceof tl_1.Api.Channel) {\r\n        return entity.title;\r\n    }\r\n    return \"\";\r\n}\r\nexports.getDisplayName = getDisplayName;\r\n/**\r\n * check if a given item is an array like or not\r\n * @param item\r\n * @returns {boolean}\r\n */\r\n/*CONTEST\r\nDuplicate ?\r\nexport function  isListLike(item) {\r\n    return (\r\n        Array.isArray(item) ||\r\n        (!!item &&\r\n            typeof item === 'object' &&\r\n            typeof (item.length) === 'number' &&\r\n            (item.length === 0 ||\r\n                (item.length > 0 &&\r\n                    (item.length - 1) in item)\r\n            )\r\n        )\r\n    )\r\n}\r\n*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}