{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Factorizator = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst Helpers_1 = require(\"../Helpers\");\nclass Factorizator {\n  /**\r\n   * Calculates the greatest common divisor\r\n   * @param a {BigInteger}\r\n   * @param b {BigInteger}\r\n   * @returns {BigInteger}\r\n   */\n  static gcd(a, b) {\n    while (b.neq(big_integer_1.default.zero)) {\n      const temp = b;\n      b = a.remainder(b);\n      a = temp;\n    }\n    return a;\n  }\n  /**\r\n   * Factorizes the given number and returns both the divisor and the number divided by the divisor\r\n   * @param pq {BigInteger}\r\n   * @returns {{p: *, q: *}}\r\n   */\n  static factorize(pq) {\n    if (pq.remainder(2).equals(big_integer_1.default.zero)) {\n      return {\n        p: (0, big_integer_1.default)(2),\n        q: pq.divide((0, big_integer_1.default)(2))\n      };\n    }\n    let y = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\n    const c = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\n    const m = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\n    let g = big_integer_1.default.one;\n    let r = big_integer_1.default.one;\n    let q = big_integer_1.default.one;\n    let x = big_integer_1.default.zero;\n    let ys = big_integer_1.default.zero;\n    let k;\n    while (g.eq(big_integer_1.default.one)) {\n      x = y;\n      for (let i = 0; (0, big_integer_1.default)(i).lesser(r); i++) {\n        y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\n      }\n      k = big_integer_1.default.zero;\n      while (k.lesser(r) && g.eq(big_integer_1.default.one)) {\n        ys = y;\n        const condition = big_integer_1.default.min(m, r.minus(k));\n        for (let i = 0; (0, big_integer_1.default)(i).lesser(condition); i++) {\n          y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\n          q = q.multiply(x.minus(y).abs()).remainder(pq);\n        }\n        g = Factorizator.gcd(q, pq);\n        k = k.add(m);\n      }\n      r = r.multiply(2);\n    }\n    if (g.eq(pq)) {\n      while (true) {\n        ys = (0, Helpers_1.modExp)(ys, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\n        g = Factorizator.gcd(x.minus(ys).abs(), pq);\n        if (g.greater(1)) {\n          break;\n        }\n      }\n    }\n    const p = g;\n    q = pq.divide(g);\n    return p < q ? {\n      p: p,\n      q: q\n    } : {\n      p: q,\n      q: p\n    };\n  }\n}\nexports.Factorizator = Factorizator;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Factorizator","big_integer_1","require","Helpers_1","gcd","a","b","neq","default","zero","temp","remainder","factorize","pq","equals","p","q","divide","y","randBetween","minus","c","m","g","one","r","x","ys","k","eq","i","lesser","modExp","add","condition","min","multiply","abs","greater"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/crypto/Factorizator.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Factorizator = void 0;\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Helpers_1 = require(\"../Helpers\");\r\nclass Factorizator {\r\n    /**\r\n     * Calculates the greatest common divisor\r\n     * @param a {BigInteger}\r\n     * @param b {BigInteger}\r\n     * @returns {BigInteger}\r\n     */\r\n    static gcd(a, b) {\r\n        while (b.neq(big_integer_1.default.zero)) {\r\n            const temp = b;\r\n            b = a.remainder(b);\r\n            a = temp;\r\n        }\r\n        return a;\r\n    }\r\n    /**\r\n     * Factorizes the given number and returns both the divisor and the number divided by the divisor\r\n     * @param pq {BigInteger}\r\n     * @returns {{p: *, q: *}}\r\n     */\r\n    static factorize(pq) {\r\n        if (pq.remainder(2).equals(big_integer_1.default.zero)) {\r\n            return { p: (0, big_integer_1.default)(2), q: pq.divide((0, big_integer_1.default)(2)) };\r\n        }\r\n        let y = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\r\n        const c = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\r\n        const m = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));\r\n        let g = big_integer_1.default.one;\r\n        let r = big_integer_1.default.one;\r\n        let q = big_integer_1.default.one;\r\n        let x = big_integer_1.default.zero;\r\n        let ys = big_integer_1.default.zero;\r\n        let k;\r\n        while (g.eq(big_integer_1.default.one)) {\r\n            x = y;\r\n            for (let i = 0; (0, big_integer_1.default)(i).lesser(r); i++) {\r\n                y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\r\n            }\r\n            k = big_integer_1.default.zero;\r\n            while (k.lesser(r) && g.eq(big_integer_1.default.one)) {\r\n                ys = y;\r\n                const condition = big_integer_1.default.min(m, r.minus(k));\r\n                for (let i = 0; (0, big_integer_1.default)(i).lesser(condition); i++) {\r\n                    y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\r\n                    q = q.multiply(x.minus(y).abs()).remainder(pq);\r\n                }\r\n                g = Factorizator.gcd(q, pq);\r\n                k = k.add(m);\r\n            }\r\n            r = r.multiply(2);\r\n        }\r\n        if (g.eq(pq)) {\r\n            while (true) {\r\n                ys = (0, Helpers_1.modExp)(ys, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);\r\n                g = Factorizator.gcd(x.minus(ys).abs(), pq);\r\n                if (g.greater(1)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const p = g;\r\n        q = pq.divide(g);\r\n        return p < q ? { p: p, q: q } : { p: q, q: p };\r\n    }\r\n}\r\nexports.Factorizator = Factorizator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}