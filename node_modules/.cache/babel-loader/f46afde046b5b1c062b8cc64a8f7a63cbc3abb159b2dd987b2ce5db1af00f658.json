{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encrypt = exports._serverKeys = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst Helpers_1 = require(\"../Helpers\");\nconst PUBLIC_KEYS = [{\n  fingerprint: (0, big_integer_1.default)(\"-3414540481677951611\"),\n  n: (0, big_integer_1.default)(\"2937959817066933702298617714945612856538843112005886376816255642404751219133084745514657634448776440866\" + \"1701890505066208632169112269581063774293102577308490531282748465986139880977280302242772832972539403531\" + \"3160108704012876427630091361567343395380424193887227773571344877461690935390938502512438971889287359033\" + \"8945177273024525306296338410881284207988753897636046529094613963869149149606209957083647645485599631919\" + \"2747663615955633778034897140982517446405334423701359108810182097749467210509584293428076654573384828809\" + \"574217079944388301239431309115013843331317877374435868468779972014486325557807783825502498215169806323\"),\n  e: 65537\n}, {\n  fingerprint: (0, big_integer_1.default)(\"-5595554452916591101\"),\n  n: (0, big_integer_1.default)(\"2534288944884041556497168959071347320689884775908477905258202659454602246385394058588521595116849196570822\" + \"26493991806038180742006204637761354248846321625124031637930839216416315647409595294193595958529411668489405859523\" + \"37613333022396096584117954892216031229237302943701877588456738335398602461675225081791820393153757504952636234951\" + \"32323782003654358104782690612092797248736680529211579223142368426126233039432475078545094258975175539015664775146\" + \"07193514399690599495696153028090507215003302390050778898553239175099482557220816446894421272976054225797071426466\" + \"60768825302832201908302295573257427896031830742328565032949\"),\n  e: 65537\n}];\nexports._serverKeys = new Map();\nPUBLIC_KEYS.forEach(_a => {\n  var {\n      fingerprint\n    } = _a,\n    keyInfo = __rest(_a, [\"fingerprint\"]);\n  exports._serverKeys.set(fingerprint.toString(), keyInfo);\n});\n/**\r\n * Encrypts the given data known the fingerprint to be used\r\n * in the way Telegram requires us to do so (sha1(data) + data + padding)\r\n\r\n * @param fingerprint the fingerprint of the RSA key.\r\n * @param data the data to be encrypted.\r\n * @returns {Buffer|*|undefined} the cipher text, or undefined if no key matching this fingerprint is found.\r\n */\nasync function encrypt(fingerprint, data) {\n  const key = exports._serverKeys.get(fingerprint.toString());\n  if (!key) {\n    return undefined;\n  }\n  // len(sha1.digest) is always 20, so we're left with 255 - 20 - x padding\n  const rand = (0, Helpers_1.generateRandomBytes)(235 - data.length);\n  const toEncrypt = buffer_1.Buffer.concat([await (0, Helpers_1.sha1)(data), data, rand]);\n  // rsa module rsa.encrypt adds 11 bits for padding which we don't want\n  // rsa module uses rsa.transform.bytes2int(to_encrypt), easier way:\n  const payload = (0, Helpers_1.readBigIntFromBuffer)(toEncrypt, false);\n  const encrypted = (0, Helpers_1.modExp)(payload, (0, big_integer_1.default)(key.e), key.n);\n  // rsa module uses transform.int2bytes(encrypted, keylength), easier:\n  return (0, Helpers_1.readBufferFromBigInt)(encrypted, 256, false);\n}\nexports.encrypt = encrypt;","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","value","encrypt","_serverKeys","buffer_1","require","big_integer_1","Helpers_1","PUBLIC_KEYS","fingerprint","default","n","Map","forEach","_a","keyInfo","set","toString","data","key","get","undefined","rand","generateRandomBytes","toEncrypt","Buffer","concat","sha1","payload","readBigIntFromBuffer","encrypted","modExp","readBufferFromBigInt"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/crypto/RSA.js"],"sourcesContent":["\"use strict\";\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.encrypt = exports._serverKeys = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst PUBLIC_KEYS = [\r\n    {\r\n        fingerprint: (0, big_integer_1.default)(\"-3414540481677951611\"),\r\n        n: (0, big_integer_1.default)(\"2937959817066933702298617714945612856538843112005886376816255642404751219133084745514657634448776440866\" +\r\n            \"1701890505066208632169112269581063774293102577308490531282748465986139880977280302242772832972539403531\" +\r\n            \"3160108704012876427630091361567343395380424193887227773571344877461690935390938502512438971889287359033\" +\r\n            \"8945177273024525306296338410881284207988753897636046529094613963869149149606209957083647645485599631919\" +\r\n            \"2747663615955633778034897140982517446405334423701359108810182097749467210509584293428076654573384828809\" +\r\n            \"574217079944388301239431309115013843331317877374435868468779972014486325557807783825502498215169806323\"),\r\n        e: 65537,\r\n    },\r\n    {\r\n        fingerprint: (0, big_integer_1.default)(\"-5595554452916591101\"),\r\n        n: (0, big_integer_1.default)(\"2534288944884041556497168959071347320689884775908477905258202659454602246385394058588521595116849196570822\" +\r\n            \"26493991806038180742006204637761354248846321625124031637930839216416315647409595294193595958529411668489405859523\" +\r\n            \"37613333022396096584117954892216031229237302943701877588456738335398602461675225081791820393153757504952636234951\" +\r\n            \"32323782003654358104782690612092797248736680529211579223142368426126233039432475078545094258975175539015664775146\" +\r\n            \"07193514399690599495696153028090507215003302390050778898553239175099482557220816446894421272976054225797071426466\" +\r\n            \"60768825302832201908302295573257427896031830742328565032949\"),\r\n        e: 65537,\r\n    },\r\n];\r\nexports._serverKeys = new Map();\r\nPUBLIC_KEYS.forEach((_a) => {\r\n    var { fingerprint } = _a, keyInfo = __rest(_a, [\"fingerprint\"]);\r\n    exports._serverKeys.set(fingerprint.toString(), keyInfo);\r\n});\r\n/**\r\n * Encrypts the given data known the fingerprint to be used\r\n * in the way Telegram requires us to do so (sha1(data) + data + padding)\r\n\r\n * @param fingerprint the fingerprint of the RSA key.\r\n * @param data the data to be encrypted.\r\n * @returns {Buffer|*|undefined} the cipher text, or undefined if no key matching this fingerprint is found.\r\n */\r\nasync function encrypt(fingerprint, data) {\r\n    const key = exports._serverKeys.get(fingerprint.toString());\r\n    if (!key) {\r\n        return undefined;\r\n    }\r\n    // len(sha1.digest) is always 20, so we're left with 255 - 20 - x padding\r\n    const rand = (0, Helpers_1.generateRandomBytes)(235 - data.length);\r\n    const toEncrypt = buffer_1.Buffer.concat([await (0, Helpers_1.sha1)(data), data, rand]);\r\n    // rsa module rsa.encrypt adds 11 bits for padding which we don't want\r\n    // rsa module uses rsa.transform.bytes2int(to_encrypt), easier way:\r\n    const payload = (0, Helpers_1.readBigIntFromBuffer)(toEncrypt, false);\r\n    const encrypted = (0, Helpers_1.modExp)(payload, (0, big_integer_1.default)(key.e), key.n);\r\n    // rsa module uses transform.int2bytes(encrypted, keylength), easier:\r\n    return (0, Helpers_1.readBufferFromBigInt)(encrypted, 256, false);\r\n}\r\nexports.encrypt = encrypt;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}