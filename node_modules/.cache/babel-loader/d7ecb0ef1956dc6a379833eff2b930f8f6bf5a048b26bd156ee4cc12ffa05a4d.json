{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewMessageEvent = exports.NewMessage = void 0;\nconst common_1 = require(\"./common\");\nconst tl_1 = require(\"../tl\");\nconst Logger_1 = require(\"../extensions/Logger\");\n/**\r\n * Occurs whenever a new text message or a message with media arrives.\r\n * @example\r\n * ```ts\r\n * async function eventPrint(event: NewMessageEvent) {\r\n * const message = event.message;\r\n *\r\n *   // Checks if it's a private message (from user or bot)\r\n *   if (event.isPrivate){\r\n *       // prints sender id\r\n *       console.log(message.senderId);\r\n *       // read message\r\n *       if (message.text == \"hello\"){\r\n *           const sender = await message.getSender();\r\n *           console.log(\"sender is\",sender);\r\n *           await client.sendMessage(sender,{\r\n *               message:`hi your id is ${message.senderId}`\r\n *           });\r\n *       }\r\n *   }\r\n * }\r\n * // adds an event handler for new messages\r\n * client.addEventHandler(eventPrint, new NewMessage({}));\r\n * ```\r\n */\nclass NewMessage extends common_1.EventBuilder {\n  constructor(newMessageParams = {}) {\n    let {\n      chats,\n      func,\n      incoming,\n      outgoing,\n      fromUsers,\n      forwards,\n      pattern,\n      blacklistChats = false\n    } = newMessageParams;\n    if (incoming && outgoing) {\n      incoming = outgoing = undefined;\n    } else if (incoming != undefined && outgoing == undefined) {\n      outgoing = !incoming;\n    } else if (outgoing != undefined && incoming == undefined) {\n      incoming = !outgoing;\n    } else if (outgoing == false && incoming == false) {\n      throw new Error(\"Don't create an event handler if you don't want neither incoming nor outgoing!\");\n    }\n    super({\n      chats,\n      blacklistChats,\n      func\n    });\n    this.incoming = incoming;\n    this.outgoing = outgoing;\n    this.fromUsers = fromUsers;\n    this.forwards = forwards;\n    this.pattern = pattern;\n    this._noCheck = [incoming, outgoing, chats, pattern, fromUsers, forwards, func].every(v => v == undefined);\n  }\n  async _resolve(client) {\n    await super._resolve(client);\n    this.fromUsers = await (0, common_1._intoIdSet)(client, this.fromUsers);\n  }\n  build(update, callback, selfId) {\n    if (update instanceof tl_1.Api.UpdateNewMessage || update instanceof tl_1.Api.UpdateNewChannelMessage) {\n      if (!(update.message instanceof tl_1.Api.Message)) {\n        return undefined;\n      }\n      const event = new NewMessageEvent(update.message, update);\n      this.addAttributes(event);\n      return event;\n    } else if (update instanceof tl_1.Api.UpdateShortMessage) {\n      return new NewMessageEvent(new tl_1.Api.Message({\n        out: update.out,\n        mentioned: update.mentioned,\n        mediaUnread: update.mediaUnread,\n        silent: update.silent,\n        id: update.id,\n        peerId: new tl_1.Api.PeerUser({\n          userId: update.userId\n        }),\n        fromId: new tl_1.Api.PeerUser({\n          userId: update.out ? selfId : update.userId\n        }),\n        message: update.message,\n        date: update.date,\n        fwdFrom: update.fwdFrom,\n        viaBotId: update.viaBotId,\n        replyTo: update.replyTo,\n        entities: update.entities,\n        ttlPeriod: update.ttlPeriod\n      }), update);\n    } else if (update instanceof tl_1.Api.UpdateShortChatMessage) {\n      return new NewMessageEvent(new tl_1.Api.Message({\n        out: update.out,\n        mentioned: update.mentioned,\n        mediaUnread: update.mediaUnread,\n        silent: update.silent,\n        id: update.id,\n        peerId: new tl_1.Api.PeerChat({\n          chatId: update.chatId\n        }),\n        fromId: new tl_1.Api.PeerUser({\n          userId: update.out ? selfId : update.fromId\n        }),\n        message: update.message,\n        date: update.date,\n        fwdFrom: update.fwdFrom,\n        viaBotId: update.viaBotId,\n        replyTo: update.replyTo,\n        entities: update.entities,\n        ttlPeriod: update.ttlPeriod\n      }), update);\n    }\n  }\n  filter(event) {\n    var _a;\n    if (this._noCheck) {\n      return event;\n    }\n    if (this.incoming && event.message.out) {\n      return;\n    }\n    if (this.outgoing && !event.message.out) {\n      return;\n    }\n    if (this.forwards != undefined) {\n      if (this.forwards != !!event.message.fwdFrom) {\n        return;\n      }\n    }\n    if (this.fromUsers != undefined) {\n      if (!event.message.senderId || !this.fromUsers.includes(event.message.senderId.toString())) {\n        return;\n      }\n    }\n    if (this.pattern) {\n      const match = (_a = event.message.message) === null || _a === void 0 ? void 0 : _a.match(this.pattern);\n      if (!match) {\n        return;\n      }\n      event.message.patternMatch = match;\n    }\n    return super.filter(event);\n  }\n  addAttributes(update) {\n    //update.patternMatch =\n  }\n}\nexports.NewMessage = NewMessage;\nclass NewMessageEvent extends common_1.EventCommon {\n  constructor(message, originalUpdate) {\n    super({\n      msgId: message.id,\n      chatPeer: message.peerId,\n      broadcast: message.post\n    });\n    this.originalUpdate = originalUpdate;\n    this.message = message;\n  }\n  _setClient(client) {\n    super._setClient(client);\n    const m = this.message;\n    try {\n      // todo make sure this never fails\n      m._finishInit(client, this.originalUpdate._entities || new Map(), undefined);\n    } catch (e) {\n      client._log.error(\"Got error while trying to finish init message with id \" + m.id);\n      if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\n        console.error(e);\n      }\n    }\n  }\n}\nexports.NewMessageEvent = NewMessageEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","NewMessageEvent","NewMessage","common_1","require","tl_1","Logger_1","EventBuilder","constructor","newMessageParams","chats","func","incoming","outgoing","fromUsers","forwards","pattern","blacklistChats","undefined","Error","_noCheck","every","v","_resolve","client","_intoIdSet","build","update","callback","selfId","Api","UpdateNewMessage","UpdateNewChannelMessage","message","Message","event","addAttributes","UpdateShortMessage","out","mentioned","mediaUnread","silent","id","peerId","PeerUser","userId","fromId","date","fwdFrom","viaBotId","replyTo","entities","ttlPeriod","UpdateShortChatMessage","PeerChat","chatId","filter","_a","senderId","includes","toString","match","patternMatch","EventCommon","originalUpdate","msgId","chatPeer","broadcast","post","_setClient","m","_finishInit","_entities","Map","e","_log","error","canSend","LogLevel","ERROR","console"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/events/NewMessage.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NewMessageEvent = exports.NewMessage = void 0;\r\nconst common_1 = require(\"./common\");\r\nconst tl_1 = require(\"../tl\");\r\nconst Logger_1 = require(\"../extensions/Logger\");\r\n/**\r\n * Occurs whenever a new text message or a message with media arrives.\r\n * @example\r\n * ```ts\r\n * async function eventPrint(event: NewMessageEvent) {\r\n * const message = event.message;\r\n *\r\n *   // Checks if it's a private message (from user or bot)\r\n *   if (event.isPrivate){\r\n *       // prints sender id\r\n *       console.log(message.senderId);\r\n *       // read message\r\n *       if (message.text == \"hello\"){\r\n *           const sender = await message.getSender();\r\n *           console.log(\"sender is\",sender);\r\n *           await client.sendMessage(sender,{\r\n *               message:`hi your id is ${message.senderId}`\r\n *           });\r\n *       }\r\n *   }\r\n * }\r\n * // adds an event handler for new messages\r\n * client.addEventHandler(eventPrint, new NewMessage({}));\r\n * ```\r\n */\r\nclass NewMessage extends common_1.EventBuilder {\r\n    constructor(newMessageParams = {}) {\r\n        let { chats, func, incoming, outgoing, fromUsers, forwards, pattern, blacklistChats = false, } = newMessageParams;\r\n        if (incoming && outgoing) {\r\n            incoming = outgoing = undefined;\r\n        }\r\n        else if (incoming != undefined && outgoing == undefined) {\r\n            outgoing = !incoming;\r\n        }\r\n        else if (outgoing != undefined && incoming == undefined) {\r\n            incoming = !outgoing;\r\n        }\r\n        else if (outgoing == false && incoming == false) {\r\n            throw new Error(\"Don't create an event handler if you don't want neither incoming nor outgoing!\");\r\n        }\r\n        super({ chats, blacklistChats, func });\r\n        this.incoming = incoming;\r\n        this.outgoing = outgoing;\r\n        this.fromUsers = fromUsers;\r\n        this.forwards = forwards;\r\n        this.pattern = pattern;\r\n        this._noCheck = [\r\n            incoming,\r\n            outgoing,\r\n            chats,\r\n            pattern,\r\n            fromUsers,\r\n            forwards,\r\n            func,\r\n        ].every((v) => v == undefined);\r\n    }\r\n    async _resolve(client) {\r\n        await super._resolve(client);\r\n        this.fromUsers = await (0, common_1._intoIdSet)(client, this.fromUsers);\r\n    }\r\n    build(update, callback, selfId) {\r\n        if (update instanceof tl_1.Api.UpdateNewMessage ||\r\n            update instanceof tl_1.Api.UpdateNewChannelMessage) {\r\n            if (!(update.message instanceof tl_1.Api.Message)) {\r\n                return undefined;\r\n            }\r\n            const event = new NewMessageEvent(update.message, update);\r\n            this.addAttributes(event);\r\n            return event;\r\n        }\r\n        else if (update instanceof tl_1.Api.UpdateShortMessage) {\r\n            return new NewMessageEvent(new tl_1.Api.Message({\r\n                out: update.out,\r\n                mentioned: update.mentioned,\r\n                mediaUnread: update.mediaUnread,\r\n                silent: update.silent,\r\n                id: update.id,\r\n                peerId: new tl_1.Api.PeerUser({ userId: update.userId }),\r\n                fromId: new tl_1.Api.PeerUser({\r\n                    userId: update.out ? selfId : update.userId,\r\n                }),\r\n                message: update.message,\r\n                date: update.date,\r\n                fwdFrom: update.fwdFrom,\r\n                viaBotId: update.viaBotId,\r\n                replyTo: update.replyTo,\r\n                entities: update.entities,\r\n                ttlPeriod: update.ttlPeriod,\r\n            }), update);\r\n        }\r\n        else if (update instanceof tl_1.Api.UpdateShortChatMessage) {\r\n            return new NewMessageEvent(new tl_1.Api.Message({\r\n                out: update.out,\r\n                mentioned: update.mentioned,\r\n                mediaUnread: update.mediaUnread,\r\n                silent: update.silent,\r\n                id: update.id,\r\n                peerId: new tl_1.Api.PeerChat({ chatId: update.chatId }),\r\n                fromId: new tl_1.Api.PeerUser({\r\n                    userId: update.out ? selfId : update.fromId,\r\n                }),\r\n                message: update.message,\r\n                date: update.date,\r\n                fwdFrom: update.fwdFrom,\r\n                viaBotId: update.viaBotId,\r\n                replyTo: update.replyTo,\r\n                entities: update.entities,\r\n                ttlPeriod: update.ttlPeriod,\r\n            }), update);\r\n        }\r\n    }\r\n    filter(event) {\r\n        var _a;\r\n        if (this._noCheck) {\r\n            return event;\r\n        }\r\n        if (this.incoming && event.message.out) {\r\n            return;\r\n        }\r\n        if (this.outgoing && !event.message.out) {\r\n            return;\r\n        }\r\n        if (this.forwards != undefined) {\r\n            if (this.forwards != !!event.message.fwdFrom) {\r\n                return;\r\n            }\r\n        }\r\n        if (this.fromUsers != undefined) {\r\n            if (!event.message.senderId ||\r\n                !this.fromUsers.includes(event.message.senderId.toString())) {\r\n                return;\r\n            }\r\n        }\r\n        if (this.pattern) {\r\n            const match = (_a = event.message.message) === null || _a === void 0 ? void 0 : _a.match(this.pattern);\r\n            if (!match) {\r\n                return;\r\n            }\r\n            event.message.patternMatch = match;\r\n        }\r\n        return super.filter(event);\r\n    }\r\n    addAttributes(update) {\r\n        //update.patternMatch =\r\n    }\r\n}\r\nexports.NewMessage = NewMessage;\r\nclass NewMessageEvent extends common_1.EventCommon {\r\n    constructor(message, originalUpdate) {\r\n        super({\r\n            msgId: message.id,\r\n            chatPeer: message.peerId,\r\n            broadcast: message.post,\r\n        });\r\n        this.originalUpdate = originalUpdate;\r\n        this.message = message;\r\n    }\r\n    _setClient(client) {\r\n        super._setClient(client);\r\n        const m = this.message;\r\n        try {\r\n            // todo make sure this never fails\r\n            m._finishInit(client, this.originalUpdate._entities || new Map(), undefined);\r\n        }\r\n        catch (e) {\r\n            client._log.error(\"Got error while trying to finish init message with id \" + m.id);\r\n            if (client._log.canSend(Logger_1.LogLevel.ERROR)) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.NewMessageEvent = NewMessageEvent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}