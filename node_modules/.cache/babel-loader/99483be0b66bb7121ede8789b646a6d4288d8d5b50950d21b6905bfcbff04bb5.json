{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IGE = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst Helpers = require(\"../Helpers\");\nconst {\n  IGE: aes_ige\n} = require(\"@cryptography/aes\");\nclass IGENEW {\n  constructor(key, iv) {\n    this.ige = new aes_ige(key, iv);\n  }\n  /**\r\n   * Decrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\r\n   * @param cipherText {Buffer}\r\n   * @returns {Buffer}\r\n   */\n  decryptIge(cipherText) {\n    return Helpers.convertToLittle(this.ige.decrypt(cipherText));\n  }\n  /**\r\n   * Encrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\r\n   * @param plainText {Buffer}\r\n   * @returns {Buffer}\r\n   */\n  encryptIge(plainText) {\n    const padding = plainText.length % 16;\n    if (padding) {\n      plainText = buffer_1.Buffer.concat([plainText, Helpers.generateRandomBytes(16 - padding)]);\n    }\n    return Helpers.convertToLittle(this.ige.encrypt(plainText));\n  }\n}\nexports.IGE = IGENEW;","map":{"version":3,"names":["Object","defineProperty","exports","value","IGE","buffer_1","require","Helpers","aes_ige","IGENEW","constructor","key","iv","ige","decryptIge","cipherText","convertToLittle","decrypt","encryptIge","plainText","padding","length","Buffer","concat","generateRandomBytes","encrypt"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/crypto/IGE.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IGE = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Helpers = require(\"../Helpers\");\r\nconst { IGE: aes_ige } = require(\"@cryptography/aes\");\r\nclass IGENEW {\r\n    constructor(key, iv) {\r\n        this.ige = new aes_ige(key, iv);\r\n    }\r\n    /**\r\n     * Decrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\r\n     * @param cipherText {Buffer}\r\n     * @returns {Buffer}\r\n     */\r\n    decryptIge(cipherText) {\r\n        return Helpers.convertToLittle(this.ige.decrypt(cipherText));\r\n    }\r\n    /**\r\n     * Encrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\r\n     * @param plainText {Buffer}\r\n     * @returns {Buffer}\r\n     */\r\n    encryptIge(plainText) {\r\n        const padding = plainText.length % 16;\r\n        if (padding) {\r\n            plainText = buffer_1.Buffer.concat([\r\n                plainText,\r\n                Helpers.generateRandomBytes(16 - padding),\r\n            ]);\r\n        }\r\n        return Helpers.convertToLittle(this.ige.encrypt(plainText));\r\n    }\r\n}\r\nexports.IGE = IGENEW;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAG,KAAK,CAAC;AACpB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC;AACnC,MAAMC,OAAO,GAAGD,OAAO,CAAC,YAAY,CAAC;AACrC,MAAM;EAAEF,GAAG,EAAEI;AAAQ,CAAC,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACrD,MAAMG,MAAM,CAAC;EACTC,WAAWA,CAACC,GAAG,EAAEC,EAAE,EAAE;IACjB,IAAI,CAACC,GAAG,GAAG,IAAIL,OAAO,CAACG,GAAG,EAAEC,EAAE,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;EACIE,UAAUA,CAACC,UAAU,EAAE;IACnB,OAAOR,OAAO,CAACS,eAAe,CAAC,IAAI,CAACH,GAAG,CAACI,OAAO,CAACF,UAAU,CAAC,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;EACIG,UAAUA,CAACC,SAAS,EAAE;IAClB,MAAMC,OAAO,GAAGD,SAAS,CAACE,MAAM,GAAG,EAAE;IACrC,IAAID,OAAO,EAAE;MACTD,SAAS,GAAGd,QAAQ,CAACiB,MAAM,CAACC,MAAM,CAAC,CAC/BJ,SAAS,EACTZ,OAAO,CAACiB,mBAAmB,CAAC,EAAE,GAAGJ,OAAO,CAAC,CAC5C,CAAC;IACN;IACA,OAAOb,OAAO,CAACS,eAAe,CAAC,IAAI,CAACH,GAAG,CAACY,OAAO,CAACN,SAAS,CAAC,CAAC;EAC/D;AACJ;AACAjB,OAAO,CAACE,GAAG,GAAGK,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}