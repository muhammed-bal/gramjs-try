{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinaryReader = void 0;\nconst errors_1 = require(\"../errors\");\nconst core_1 = require(\"../tl/core\");\nconst AllTLObjects_1 = require(\"../tl/AllTLObjects\");\nconst Helpers_1 = require(\"../Helpers\");\nclass BinaryReader {\n  /**\r\n   * Small utility class to read binary data.\r\n   * @param data {Buffer}\r\n   */\n  constructor(data) {\n    this.stream = data;\n    this._last = undefined;\n    this.offset = 0;\n  }\n  // region Reading\n  // \"All numbers are written as little endian.\"\n  // https://core.telegram.org/mtproto\n  /**\r\n   * Reads a single byte value.\r\n   */\n  readByte() {\n    return this.read(1)[0];\n  }\n  /**\r\n   * Reads an integer (4 bytes or 32 bits) value.\r\n   * @param signed {Boolean}\r\n   */\n  readInt(signed = true) {\n    let res;\n    if (signed) {\n      res = this.stream.readInt32LE(this.offset);\n    } else {\n      res = this.stream.readUInt32LE(this.offset);\n    }\n    this.offset += 4;\n    return res;\n  }\n  /**\r\n   * Reads a long integer (8 bytes or 64 bits) value.\r\n   * @param signed\r\n   * @returns {BigInteger}\r\n   */\n  readLong(signed = true) {\n    return this.readLargeInt(64, signed);\n  }\n  /**\r\n   * Reads a real floating point (4 bytes) value.\r\n   * @returns {number}\r\n   */\n  readFloat() {\n    return this.read(4).readFloatLE(0);\n  }\n  /**\r\n   * Reads a real floating point (8 bytes) value.\r\n   * @returns {BigInteger}\r\n   */\n  readDouble() {\n    // was this a bug ? it should have been <d\n    return this.read(8).readDoubleLE(0);\n  }\n  /**\r\n   * Reads a n-bits long integer value.\r\n   * @param bits\r\n   * @param signed {Boolean}\r\n   */\n  readLargeInt(bits, signed = true) {\n    const buffer = this.read(Math.floor(bits / 8));\n    return (0, Helpers_1.readBigIntFromBuffer)(buffer, true, signed);\n  }\n  /**\r\n   * Read the given amount of bytes, or -1 to read all remaining.\r\n   * @param length {number}\r\n   * @param checkLength {boolean} whether to check if the length overflows or not.\r\n   */\n  read(length = -1, checkLength = true) {\n    if (length === -1) {\n      length = this.stream.length - this.offset;\n    }\n    const result = this.stream.slice(this.offset, this.offset + length);\n    this.offset += length;\n    if (checkLength && result.length !== length) {\n      throw Error(`No more data left to read (need ${length}, got ${result.length}: ${result}); last read ${this._last}`);\n    }\n    this._last = result;\n    return result;\n  }\n  /**\r\n   * Gets the byte array representing the current buffer as a whole.\r\n   * @returns {Buffer}\r\n   */\n  getBuffer() {\n    return this.stream;\n  }\n  // endregion\n  // region Telegram custom reading\n  /**\r\n   * Reads a Telegram-encoded byte array, without the need of\r\n   * specifying its length.\r\n   * @returns {Buffer}\r\n   */\n  tgReadBytes() {\n    const firstByte = this.readByte();\n    let padding;\n    let length;\n    if (firstByte === 254) {\n      length = this.readByte() | this.readByte() << 8 | this.readByte() << 16;\n      padding = length % 4;\n    } else {\n      length = firstByte;\n      padding = (length + 1) % 4;\n    }\n    const data = this.read(length);\n    if (padding > 0) {\n      padding = 4 - padding;\n      this.read(padding);\n    }\n    return data;\n  }\n  /**\r\n   * Reads a Telegram-encoded string.\r\n   * @returns {string}\r\n   */\n  tgReadString() {\n    return this.tgReadBytes().toString(\"utf-8\");\n  }\n  /**\r\n   * Reads a Telegram boolean value.\r\n   * @returns {boolean}\r\n   */\n  tgReadBool() {\n    const value = this.readInt(false);\n    if (value === 0x997275b5) {\n      // boolTrue\n      return true;\n    } else if (value === 0xbc799737) {\n      // boolFalse\n      return false;\n    } else {\n      throw new Error(`Invalid boolean code ${value.toString(16)}`);\n    }\n  }\n  /**\r\n   * Reads and converts Unix time (used by Telegram)\r\n   * into a Javascript {Date} object.\r\n   * @returns {Date}\r\n   */\n  tgReadDate() {\n    const value = this.readInt();\n    return new Date(value * 1000);\n  }\n  /**\r\n   * Reads a Telegram object.\r\n   */\n  tgReadObject() {\n    const constructorId = this.readInt(false);\n    let clazz = AllTLObjects_1.tlobjects[constructorId];\n    if (clazz === undefined) {\n      /**\r\n       * The class was undefined, but there's still a\r\n       * chance of it being a manually parsed value like bool!\r\n       */\n      const value = constructorId;\n      if (value === 0x997275b5) {\n        // boolTrue\n        return true;\n      } else if (value === 0xbc799737) {\n        // boolFalse\n        return false;\n      } else if (value === 0x1cb5c415) {\n        // Vector\n        const temp = [];\n        const length = this.readInt();\n        for (let i = 0; i < length; i++) {\n          temp.push(this.tgReadObject());\n        }\n        return temp;\n      }\n      clazz = core_1.coreObjects.get(constructorId);\n      if (clazz === undefined) {\n        // If there was still no luck, give up\n        this.seek(-4); // Go back\n        const pos = this.tellPosition();\n        const error = new errors_1.TypeNotFoundError(constructorId, this.read());\n        this.setPosition(pos);\n        throw error;\n      }\n    }\n    return clazz.fromReader(this);\n  }\n  /**\r\n   * Reads a vector (a list) of Telegram objects.\r\n   * @returns {[Buffer]}\r\n   */\n  tgReadVector() {\n    if (this.readInt(false) !== 0x1cb5c415) {\n      throw new Error(\"Invalid constructor code, vector was expected\");\n    }\n    const count = this.readInt();\n    const temp = [];\n    for (let i = 0; i < count; i++) {\n      temp.push(this.tgReadObject());\n    }\n    return temp;\n  }\n  // endregion\n  // region Position related\n  /**\r\n   * Tells the current position on the stream.\r\n   * @returns {number}\r\n   */\n  tellPosition() {\n    return this.offset;\n  }\n  /**\r\n   * Sets the current position on the stream.\r\n   * @param position\r\n   */\n  setPosition(position) {\n    this.offset = position;\n  }\n  /**\r\n   * Seeks the stream position given an offset from the current position.\r\n   * The offset may be negative.\r\n   * @param offset\r\n   */\n  seek(offset) {\n    this.offset += offset;\n  }\n}\nexports.BinaryReader = BinaryReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","BinaryReader","errors_1","require","core_1","AllTLObjects_1","Helpers_1","constructor","data","stream","_last","undefined","offset","readByte","read","readInt","signed","res","readInt32LE","readUInt32LE","readLong","readLargeInt","readFloat","readFloatLE","readDouble","readDoubleLE","bits","buffer","Math","floor","readBigIntFromBuffer","length","checkLength","result","slice","Error","getBuffer","tgReadBytes","firstByte","padding","tgReadString","toString","tgReadBool","tgReadDate","Date","tgReadObject","constructorId","clazz","tlobjects","temp","i","push","coreObjects","get","seek","pos","tellPosition","error","TypeNotFoundError","setPosition","fromReader","tgReadVector","count","position"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/extensions/BinaryReader.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BinaryReader = void 0;\r\nconst errors_1 = require(\"../errors\");\r\nconst core_1 = require(\"../tl/core\");\r\nconst AllTLObjects_1 = require(\"../tl/AllTLObjects\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nclass BinaryReader {\r\n    /**\r\n     * Small utility class to read binary data.\r\n     * @param data {Buffer}\r\n     */\r\n    constructor(data) {\r\n        this.stream = data;\r\n        this._last = undefined;\r\n        this.offset = 0;\r\n    }\r\n    // region Reading\r\n    // \"All numbers are written as little endian.\"\r\n    // https://core.telegram.org/mtproto\r\n    /**\r\n     * Reads a single byte value.\r\n     */\r\n    readByte() {\r\n        return this.read(1)[0];\r\n    }\r\n    /**\r\n     * Reads an integer (4 bytes or 32 bits) value.\r\n     * @param signed {Boolean}\r\n     */\r\n    readInt(signed = true) {\r\n        let res;\r\n        if (signed) {\r\n            res = this.stream.readInt32LE(this.offset);\r\n        }\r\n        else {\r\n            res = this.stream.readUInt32LE(this.offset);\r\n        }\r\n        this.offset += 4;\r\n        return res;\r\n    }\r\n    /**\r\n     * Reads a long integer (8 bytes or 64 bits) value.\r\n     * @param signed\r\n     * @returns {BigInteger}\r\n     */\r\n    readLong(signed = true) {\r\n        return this.readLargeInt(64, signed);\r\n    }\r\n    /**\r\n     * Reads a real floating point (4 bytes) value.\r\n     * @returns {number}\r\n     */\r\n    readFloat() {\r\n        return this.read(4).readFloatLE(0);\r\n    }\r\n    /**\r\n     * Reads a real floating point (8 bytes) value.\r\n     * @returns {BigInteger}\r\n     */\r\n    readDouble() {\r\n        // was this a bug ? it should have been <d\r\n        return this.read(8).readDoubleLE(0);\r\n    }\r\n    /**\r\n     * Reads a n-bits long integer value.\r\n     * @param bits\r\n     * @param signed {Boolean}\r\n     */\r\n    readLargeInt(bits, signed = true) {\r\n        const buffer = this.read(Math.floor(bits / 8));\r\n        return (0, Helpers_1.readBigIntFromBuffer)(buffer, true, signed);\r\n    }\r\n    /**\r\n     * Read the given amount of bytes, or -1 to read all remaining.\r\n     * @param length {number}\r\n     * @param checkLength {boolean} whether to check if the length overflows or not.\r\n     */\r\n    read(length = -1, checkLength = true) {\r\n        if (length === -1) {\r\n            length = this.stream.length - this.offset;\r\n        }\r\n        const result = this.stream.slice(this.offset, this.offset + length);\r\n        this.offset += length;\r\n        if (checkLength && result.length !== length) {\r\n            throw Error(`No more data left to read (need ${length}, got ${result.length}: ${result}); last read ${this._last}`);\r\n        }\r\n        this._last = result;\r\n        return result;\r\n    }\r\n    /**\r\n     * Gets the byte array representing the current buffer as a whole.\r\n     * @returns {Buffer}\r\n     */\r\n    getBuffer() {\r\n        return this.stream;\r\n    }\r\n    // endregion\r\n    // region Telegram custom reading\r\n    /**\r\n     * Reads a Telegram-encoded byte array, without the need of\r\n     * specifying its length.\r\n     * @returns {Buffer}\r\n     */\r\n    tgReadBytes() {\r\n        const firstByte = this.readByte();\r\n        let padding;\r\n        let length;\r\n        if (firstByte === 254) {\r\n            length =\r\n                this.readByte() |\r\n                    (this.readByte() << 8) |\r\n                    (this.readByte() << 16);\r\n            padding = length % 4;\r\n        }\r\n        else {\r\n            length = firstByte;\r\n            padding = (length + 1) % 4;\r\n        }\r\n        const data = this.read(length);\r\n        if (padding > 0) {\r\n            padding = 4 - padding;\r\n            this.read(padding);\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     * Reads a Telegram-encoded string.\r\n     * @returns {string}\r\n     */\r\n    tgReadString() {\r\n        return this.tgReadBytes().toString(\"utf-8\");\r\n    }\r\n    /**\r\n     * Reads a Telegram boolean value.\r\n     * @returns {boolean}\r\n     */\r\n    tgReadBool() {\r\n        const value = this.readInt(false);\r\n        if (value === 0x997275b5) {\r\n            // boolTrue\r\n            return true;\r\n        }\r\n        else if (value === 0xbc799737) {\r\n            // boolFalse\r\n            return false;\r\n        }\r\n        else {\r\n            throw new Error(`Invalid boolean code ${value.toString(16)}`);\r\n        }\r\n    }\r\n    /**\r\n     * Reads and converts Unix time (used by Telegram)\r\n     * into a Javascript {Date} object.\r\n     * @returns {Date}\r\n     */\r\n    tgReadDate() {\r\n        const value = this.readInt();\r\n        return new Date(value * 1000);\r\n    }\r\n    /**\r\n     * Reads a Telegram object.\r\n     */\r\n    tgReadObject() {\r\n        const constructorId = this.readInt(false);\r\n        let clazz = AllTLObjects_1.tlobjects[constructorId];\r\n        if (clazz === undefined) {\r\n            /**\r\n             * The class was undefined, but there's still a\r\n             * chance of it being a manually parsed value like bool!\r\n             */\r\n            const value = constructorId;\r\n            if (value === 0x997275b5) {\r\n                // boolTrue\r\n                return true;\r\n            }\r\n            else if (value === 0xbc799737) {\r\n                // boolFalse\r\n                return false;\r\n            }\r\n            else if (value === 0x1cb5c415) {\r\n                // Vector\r\n                const temp = [];\r\n                const length = this.readInt();\r\n                for (let i = 0; i < length; i++) {\r\n                    temp.push(this.tgReadObject());\r\n                }\r\n                return temp;\r\n            }\r\n            clazz = core_1.coreObjects.get(constructorId);\r\n            if (clazz === undefined) {\r\n                // If there was still no luck, give up\r\n                this.seek(-4); // Go back\r\n                const pos = this.tellPosition();\r\n                const error = new errors_1.TypeNotFoundError(constructorId, this.read());\r\n                this.setPosition(pos);\r\n                throw error;\r\n            }\r\n        }\r\n        return clazz.fromReader(this);\r\n    }\r\n    /**\r\n     * Reads a vector (a list) of Telegram objects.\r\n     * @returns {[Buffer]}\r\n     */\r\n    tgReadVector() {\r\n        if (this.readInt(false) !== 0x1cb5c415) {\r\n            throw new Error(\"Invalid constructor code, vector was expected\");\r\n        }\r\n        const count = this.readInt();\r\n        const temp = [];\r\n        for (let i = 0; i < count; i++) {\r\n            temp.push(this.tgReadObject());\r\n        }\r\n        return temp;\r\n    }\r\n    // endregion\r\n    // region Position related\r\n    /**\r\n     * Tells the current position on the stream.\r\n     * @returns {number}\r\n     */\r\n    tellPosition() {\r\n        return this.offset;\r\n    }\r\n    /**\r\n     * Sets the current position on the stream.\r\n     * @param position\r\n     */\r\n    setPosition(position) {\r\n        this.offset = position;\r\n    }\r\n    /**\r\n     * Seeks the stream position given an offset from the current position.\r\n     * The offset may be negative.\r\n     * @param offset\r\n     */\r\n    seek(offset) {\r\n        this.offset += offset;\r\n    }\r\n}\r\nexports.BinaryReader = BinaryReader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}