{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventCommonSender = exports.EventCommon = exports.EventBuilder = exports._intoIdSet = void 0;\nconst tl_1 = require(\"../tl\");\nconst custom_1 = require(\"../tl/custom\");\nconst Helpers_1 = require(\"../Helpers\");\nconst __1 = require(\"../\");\nconst senderGetter_1 = require(\"../tl/custom/senderGetter\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst Utils_1 = require(\"../Utils\");\n/** @hidden */\nasync function _intoIdSet(client, chats) {\n  if (chats == undefined) {\n    return undefined;\n  }\n  if (!(0, Helpers_1.isArrayLike)(chats)) {\n    chats = [chats];\n  }\n  const result = new Set();\n  for (let chat of chats) {\n    if (typeof chat == \"number\" || typeof chat == \"bigint\" || typeof chat == \"string\" && (0, Utils_1.parseID)(chat) || big_integer_1.default.isInstance(chat)) {\n      chat = (0, Helpers_1.returnBigInt)(chat);\n      if (chat.lesser(0)) {\n        result.add(chat.toString());\n      } else {\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerUser({\n          userId: chat\n        })));\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerChat({\n          chatId: chat\n        })));\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerChannel({\n          channelId: chat\n        })));\n      }\n    } else if (typeof chat == \"object\" && chat.SUBCLASS_OF_ID == 0x2d45687) {\n      result.add(__1.utils.getPeerId(chat));\n    } else {\n      chat = await client.getInputEntity(chat);\n      if (chat instanceof tl_1.Api.InputPeerSelf) {\n        chat = await client.getMe(true);\n      }\n      result.add(__1.utils.getPeerId(chat));\n    }\n  }\n  return Array.from(result);\n}\nexports._intoIdSet = _intoIdSet;\n/**\r\n * The common event builder, with builtin support to filter per chat.<br/>\r\n * All events inherit this.\r\n */\nclass EventBuilder {\n  constructor(eventParams) {\n    var _a;\n    this.chats = (_a = eventParams.chats) === null || _a === void 0 ? void 0 : _a.map(x => x.toString());\n    this.blacklistChats = eventParams.blacklistChats || false;\n    this.resolved = false;\n    this.func = eventParams.func;\n  }\n  build(update, callback, selfId) {\n    if (update) return update;\n  }\n  async resolve(client) {\n    if (this.resolved) {\n      return;\n    }\n    await this._resolve(client);\n    this.resolved = true;\n  }\n  async _resolve(client) {\n    this.chats = await _intoIdSet(client, this.chats);\n  }\n  filter(event) {\n    if (!this.resolved) {\n      return;\n    }\n    if (this.chats != undefined) {\n      if (event.chatId == undefined) {\n        return;\n      }\n      const inside = this.chats.includes(event.chatId.toString());\n      if (inside == this.blacklistChats) {\n        // If this chat matches but it's a blacklist ignore.\n        // If it doesn't match but it's a whitelist ignore.\n        return;\n      }\n    }\n    if (this.func && !this.func(event)) {\n      return;\n    }\n    return event;\n  }\n}\nexports.EventBuilder = EventBuilder;\nclass EventCommon extends custom_1.ChatGetter {\n  constructor({\n    chatPeer = undefined,\n    msgId = undefined,\n    broadcast = undefined\n  }) {\n    super();\n    this._eventName = \"Event\";\n    custom_1.ChatGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    this._entities = new Map();\n    this._client = undefined;\n    this._messageId = msgId;\n  }\n  _setClient(client) {\n    this._client = client;\n  }\n  get client() {\n    return this._client;\n  }\n}\nexports.EventCommon = EventCommon;\nclass EventCommonSender extends senderGetter_1.SenderGetter {\n  constructor({\n    chatPeer = undefined,\n    msgId = undefined,\n    broadcast = undefined\n  }) {\n    super();\n    this._eventName = \"Event\";\n    custom_1.ChatGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    senderGetter_1.SenderGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    this._entities = new Map();\n    this._client = undefined;\n    this._messageId = msgId;\n  }\n  _setClient(client) {\n    this._client = client;\n  }\n  get client() {\n    return this._client;\n  }\n}\nexports.EventCommonSender = EventCommonSender;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","EventCommonSender","EventCommon","EventBuilder","_intoIdSet","tl_1","require","custom_1","Helpers_1","__1","senderGetter_1","big_integer_1","Utils_1","client","chats","undefined","isArrayLike","result","Set","chat","parseID","default","isInstance","returnBigInt","lesser","add","toString","utils","getPeerId","Api","PeerUser","userId","PeerChat","chatId","PeerChannel","channelId","SUBCLASS_OF_ID","getInputEntity","InputPeerSelf","getMe","Array","from","constructor","eventParams","_a","map","x","blacklistChats","resolved","func","build","update","callback","selfId","resolve","_resolve","filter","event","inside","includes","ChatGetter","chatPeer","msgId","broadcast","_eventName","initChatClass","_entities","Map","_client","_messageId","_setClient","SenderGetter"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/events/common.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EventCommonSender = exports.EventCommon = exports.EventBuilder = exports._intoIdSet = void 0;\r\nconst tl_1 = require(\"../tl\");\r\nconst custom_1 = require(\"../tl/custom\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst __1 = require(\"../\");\r\nconst senderGetter_1 = require(\"../tl/custom/senderGetter\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst Utils_1 = require(\"../Utils\");\r\n/** @hidden */\r\nasync function _intoIdSet(client, chats) {\r\n    if (chats == undefined) {\r\n        return undefined;\r\n    }\r\n    if (!(0, Helpers_1.isArrayLike)(chats)) {\r\n        chats = [chats];\r\n    }\r\n    const result = new Set();\r\n    for (let chat of chats) {\r\n        if (typeof chat == \"number\" ||\r\n            typeof chat == \"bigint\" ||\r\n            (typeof chat == \"string\" && (0, Utils_1.parseID)(chat)) ||\r\n            big_integer_1.default.isInstance(chat)) {\r\n            chat = (0, Helpers_1.returnBigInt)(chat);\r\n            if (chat.lesser(0)) {\r\n                result.add(chat.toString());\r\n            }\r\n            else {\r\n                result.add(__1.utils.getPeerId(new tl_1.Api.PeerUser({\r\n                    userId: chat,\r\n                })));\r\n                result.add(__1.utils.getPeerId(new tl_1.Api.PeerChat({\r\n                    chatId: chat,\r\n                })));\r\n                result.add(__1.utils.getPeerId(new tl_1.Api.PeerChannel({\r\n                    channelId: chat,\r\n                })));\r\n            }\r\n        }\r\n        else if (typeof chat == \"object\" &&\r\n            chat.SUBCLASS_OF_ID == 0x2d45687) {\r\n            result.add(__1.utils.getPeerId(chat));\r\n        }\r\n        else {\r\n            chat = await client.getInputEntity(chat);\r\n            if (chat instanceof tl_1.Api.InputPeerSelf) {\r\n                chat = await client.getMe(true);\r\n            }\r\n            result.add(__1.utils.getPeerId(chat));\r\n        }\r\n    }\r\n    return Array.from(result);\r\n}\r\nexports._intoIdSet = _intoIdSet;\r\n/**\r\n * The common event builder, with builtin support to filter per chat.<br/>\r\n * All events inherit this.\r\n */\r\nclass EventBuilder {\r\n    constructor(eventParams) {\r\n        var _a;\r\n        this.chats = (_a = eventParams.chats) === null || _a === void 0 ? void 0 : _a.map((x) => x.toString());\r\n        this.blacklistChats = eventParams.blacklistChats || false;\r\n        this.resolved = false;\r\n        this.func = eventParams.func;\r\n    }\r\n    build(update, callback, selfId) {\r\n        if (update)\r\n            return update;\r\n    }\r\n    async resolve(client) {\r\n        if (this.resolved) {\r\n            return;\r\n        }\r\n        await this._resolve(client);\r\n        this.resolved = true;\r\n    }\r\n    async _resolve(client) {\r\n        this.chats = await _intoIdSet(client, this.chats);\r\n    }\r\n    filter(event) {\r\n        if (!this.resolved) {\r\n            return;\r\n        }\r\n        if (this.chats != undefined) {\r\n            if (event.chatId == undefined) {\r\n                return;\r\n            }\r\n            const inside = this.chats.includes(event.chatId.toString());\r\n            if (inside == this.blacklistChats) {\r\n                // If this chat matches but it's a blacklist ignore.\r\n                // If it doesn't match but it's a whitelist ignore.\r\n                return;\r\n            }\r\n        }\r\n        if (this.func && !this.func(event)) {\r\n            return;\r\n        }\r\n        return event;\r\n    }\r\n}\r\nexports.EventBuilder = EventBuilder;\r\nclass EventCommon extends custom_1.ChatGetter {\r\n    constructor({ chatPeer = undefined, msgId = undefined, broadcast = undefined, }) {\r\n        super();\r\n        this._eventName = \"Event\";\r\n        custom_1.ChatGetter.initChatClass(this, { chatPeer, broadcast });\r\n        this._entities = new Map();\r\n        this._client = undefined;\r\n        this._messageId = msgId;\r\n    }\r\n    _setClient(client) {\r\n        this._client = client;\r\n    }\r\n    get client() {\r\n        return this._client;\r\n    }\r\n}\r\nexports.EventCommon = EventCommon;\r\nclass EventCommonSender extends senderGetter_1.SenderGetter {\r\n    constructor({ chatPeer = undefined, msgId = undefined, broadcast = undefined, }) {\r\n        super();\r\n        this._eventName = \"Event\";\r\n        custom_1.ChatGetter.initChatClass(this, { chatPeer, broadcast });\r\n        senderGetter_1.SenderGetter.initChatClass(this, { chatPeer, broadcast });\r\n        this._entities = new Map();\r\n        this._client = undefined;\r\n        this._messageId = msgId;\r\n    }\r\n    _setClient(client) {\r\n        this._client = client;\r\n    }\r\n    get client() {\r\n        return this._client;\r\n    }\r\n}\r\nexports.EventCommonSender = EventCommonSender;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}