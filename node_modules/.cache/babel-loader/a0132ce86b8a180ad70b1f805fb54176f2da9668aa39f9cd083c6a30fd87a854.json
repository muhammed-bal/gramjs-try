{"ast":null,"code":"var S = new Uint8Array(256);\nvar Si = new Uint8Array(256);\nvar T1 = new Uint32Array(256);\nvar T2 = new Uint32Array(256);\nvar T3 = new Uint32Array(256);\nvar T4 = new Uint32Array(256);\nvar T5 = new Uint32Array(256);\nvar T6 = new Uint32Array(256);\nvar T7 = new Uint32Array(256);\nvar T8 = new Uint32Array(256);\nfunction computeTables() {\n  var d = new Uint8Array(256);\n  var t = new Uint8Array(256);\n  var x2;\n  var x4;\n  var x8;\n  var s;\n  var tEnc;\n  var tDec;\n  var x = 0;\n  var xInv = 0;\n  // Compute double and third tables\n  for (var i = 0; i < 256; i++) {\n    d[i] = i << 1 ^ (i >> 7) * 283;\n    t[d[i] ^ i] = i;\n  }\n  for (; !S[x]; x ^= x2 || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    S[x] = s;\n    Si[s] = x;\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n    T1[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n    T2[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n    T3[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n    T4[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n    T5[s] = tDec = tDec << 24 ^ tDec >>> 8;\n    T6[s] = tDec = tDec << 24 ^ tDec >>> 8;\n    T7[s] = tDec = tDec << 24 ^ tDec >>> 8;\n    T8[s] = tDec = tDec << 24 ^ tDec >>> 8;\n    xInv = t[xInv] || 1;\n  }\n}\n\n/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n  return str.charCodeAt(pos) << 24 ^ str.charCodeAt(pos + 1) << 16 ^ str.charCodeAt(pos + 2) << 8 ^ str.charCodeAt(pos + 3);\n}\n\n/* eslint-disable import/prefer-default-export */\n/**\n * Helper function for transforming string key to Uint32Array\n */\nfunction getWords(key) {\n  if (key instanceof Uint32Array) {\n    return key;\n  }\n  if (typeof key === 'string') {\n    if (key.length % 4 !== 0) for (var i = key.length % 4; i <= 4; i++) key += '\\0x00';\n    var buf = new Uint32Array(key.length / 4);\n    for (var i = 0; i < key.length; i += 4) buf[i / 4] = s2i(key, i);\n    return buf;\n  }\n  if (key instanceof Uint8Array) {\n    var buf = new Uint32Array(key.length / 4);\n    for (var i = 0; i < key.length; i += 4) {\n      buf[i / 4] = key[i] << 24 ^ key[i + 1] << 16 ^ key[i + 2] << 8 ^ key[i + 3];\n    }\n    return buf;\n  }\n  throw new Error('Unable to create 32-bit words');\n}\nfunction xor(left, right, to) {\n  if (to === void 0) {\n    to = left;\n  }\n  for (var i = 0; i < left.length; i++) to[i] = left[i] ^ right[i];\n}\ncomputeTables();\n/**\n * Low-level AES Cipher\n */\nvar AES = /** @class */function () {\n  function AES(_key) {\n    var key = getWords(_key);\n    if (key.length !== 4 && key.length !== 6 && key.length !== 8) {\n      throw new Error('Invalid key size');\n    }\n    this.encKey = new Uint32Array(4 * key.length + 28);\n    this.decKey = new Uint32Array(4 * key.length + 28);\n    this.encKey.set(key);\n    var rcon = 1;\n    var i = key.length;\n    var tmp;\n    // schedule encryption keys\n    for (; i < 4 * key.length + 28; i++) {\n      tmp = this.encKey[i - 1];\n      // apply sbox\n      if (i % key.length === 0 || key.length === 8 && i % key.length === 4) {\n        tmp = S[tmp >>> 24] << 24 ^ S[tmp >> 16 & 255] << 16 ^ S[tmp >> 8 & 255] << 8 ^ S[tmp & 255];\n        // shift rows and add rcon\n        if (i % key.length === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n      this.encKey[i] = this.encKey[i - key.length] ^ tmp;\n    }\n    // schedule decryption keys\n    for (var j = 0; i; j++, i--) {\n      tmp = this.encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        this.decKey[j] = tmp;\n      } else {\n        this.decKey[j] = T5[S[tmp >>> 24]] ^ T6[S[tmp >> 16 & 255]] ^ T7[S[tmp >> 8 & 255]] ^ T8[S[tmp & 255]];\n      }\n    }\n  }\n  AES.prototype.encrypt = function (_message) {\n    var message = getWords(_message);\n    var out = new Uint32Array(4);\n    var a = message[0] ^ this.encKey[0];\n    var b = message[1] ^ this.encKey[1];\n    var c = message[2] ^ this.encKey[2];\n    var d = message[3] ^ this.encKey[3];\n    var rounds = this.encKey.length / 4 - 2;\n    var k = 4;\n    var a2;\n    var b2;\n    var c2;\n    // Inner rounds.  Cribbed from OpenSSL.\n    for (var i = 0; i < rounds; i++) {\n      a2 = T1[a >>> 24] ^ T2[b >> 16 & 255] ^ T3[c >> 8 & 255] ^ T4[d & 255] ^ this.encKey[k];\n      b2 = T1[b >>> 24] ^ T2[c >> 16 & 255] ^ T3[d >> 8 & 255] ^ T4[a & 255] ^ this.encKey[k + 1];\n      c2 = T1[c >>> 24] ^ T2[d >> 16 & 255] ^ T3[a >> 8 & 255] ^ T4[b & 255] ^ this.encKey[k + 2];\n      d = T1[d >>> 24] ^ T2[a >> 16 & 255] ^ T3[b >> 8 & 255] ^ T4[c & 255] ^ this.encKey[k + 3];\n      a = a2;\n      b = b2;\n      c = c2;\n      k += 4;\n      // console.log(a, b, c, d);\n    }\n    // Last round.\n    for (var i = 0; i < 4; i++) {\n      out[i] = S[a >>> 24] << 24 ^ S[b >> 16 & 255] << 16 ^ S[c >> 8 & 255] << 8 ^ S[d & 255] ^ this.encKey[k++];\n      a2 = a;\n      a = b;\n      b = c;\n      c = d;\n      d = a2;\n    }\n    return out;\n  };\n  AES.prototype.decrypt = function (_message) {\n    var message = getWords(_message);\n    var out = new Uint32Array(4);\n    var a = message[0] ^ this.decKey[0];\n    var b = message[3] ^ this.decKey[1];\n    var c = message[2] ^ this.decKey[2];\n    var d = message[1] ^ this.decKey[3];\n    var rounds = this.decKey.length / 4 - 2;\n    var a2;\n    var b2;\n    var c2;\n    var k = 4;\n    // Inner rounds.  Cribbed from OpenSSL.\n    for (var i = 0; i < rounds; i++) {\n      a2 = T5[a >>> 24] ^ T6[b >> 16 & 255] ^ T7[c >> 8 & 255] ^ T8[d & 255] ^ this.decKey[k];\n      b2 = T5[b >>> 24] ^ T6[c >> 16 & 255] ^ T7[d >> 8 & 255] ^ T8[a & 255] ^ this.decKey[k + 1];\n      c2 = T5[c >>> 24] ^ T6[d >> 16 & 255] ^ T7[a >> 8 & 255] ^ T8[b & 255] ^ this.decKey[k + 2];\n      d = T5[d >>> 24] ^ T6[a >> 16 & 255] ^ T7[b >> 8 & 255] ^ T8[c & 255] ^ this.decKey[k + 3];\n      a = a2;\n      b = b2;\n      c = c2;\n      k += 4;\n    }\n    // Last round.\n    for (var i = 0; i < 4; i++) {\n      out[3 & -i] = Si[a >>> 24] << 24 ^ Si[b >> 16 & 255] << 16 ^ Si[c >> 8 & 255] << 8 ^ Si[d & 255] ^ this.decKey[k++];\n      a2 = a;\n      a = b;\n      b = c;\n      c = d;\n      d = a2;\n    }\n    return out;\n  };\n  return AES;\n}();\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE = /** @class */function () {\n  function AES_IGE(key, iv, blockSize) {\n    if (blockSize === void 0) {\n      blockSize = 16;\n    }\n    this.key = getWords(key);\n    this.iv = getWords(iv);\n    this.cipher = new AES(key);\n    this.blockSize = blockSize / 4;\n  }\n  /**\n   * Encrypts plain text with AES-IGE mode.\n   */\n  AES_IGE.prototype.encrypt = function (message, buf) {\n    var text = getWords(message);\n    var cipherText = buf || new Uint32Array(text.length);\n    var prevX = this.iv.subarray(this.blockSize, this.iv.length);\n    var prevY = this.iv.subarray(0, this.blockSize);\n    var yXOR = new Uint32Array(this.blockSize);\n    for (var i = 0; i < text.length; i += this.blockSize) {\n      var x = text.subarray(i, i + this.blockSize);\n      xor(x, prevY, yXOR);\n      var y = this.cipher.encrypt(yXOR);\n      xor(y, prevX);\n      prevX = x;\n      prevY = y;\n      for (var j = i, k = 0; j < text.length && k < 4; j++, k++) cipherText[j] = y[k];\n    }\n    return cipherText;\n  };\n  /**\n   * Decrypts cipher text with AES-IGE mode.\n   */\n  AES_IGE.prototype.decrypt = function (message, buf) {\n    var cipherText = getWords(message);\n    var text = buf || new Uint32Array(cipherText.length);\n    var prevY = this.iv.subarray(this.blockSize, this.iv.length);\n    var prevX = this.iv.subarray(0, this.blockSize);\n    var yXOR = new Uint32Array(this.blockSize);\n    for (var i = 0; i < text.length; i += this.blockSize) {\n      var x = cipherText.subarray(i, i + this.blockSize);\n      xor(x, prevY, yXOR);\n      var y = this.cipher.decrypt(yXOR);\n      xor(y, prevX);\n      prevX = x;\n      prevY = y;\n      for (var j = i, k = 0; j < text.length && k < 4; j++, k++) text[j] = y[k];\n    }\n    return text;\n  };\n  return AES_IGE;\n}();\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE$1 = /** @class */function () {\n  function AES_IGE(key, counter, blockSize) {\n    if (blockSize === void 0) {\n      blockSize = 16;\n    }\n    this.offset = 0;\n    this.key = getWords(key);\n    this.counter = getWords(counter);\n    this.cipher = new AES(key);\n    this.blockSize = blockSize / 4;\n    if (this.counter.length !== 4) {\n      throw new Error('AES-CTR mode counter must be 16 bytes length');\n    }\n  }\n  /**\n   * Encrypts plain text with AES-IGE mode.\n   */\n  AES_IGE.prototype.encrypt = function (message, buf) {\n    var text = getWords(message);\n    var cipherText = buf || new Uint32Array(text.length);\n    var offset = this.offset;\n    for (var i = 0; i < text.length; i += this.blockSize) {\n      var x = this.cipher.encrypt(this.counter);\n      for (var j = i, k = offset; j < text.length && k < this.blockSize; j++, k++) cipherText[j] = x[k] ^ text[j];\n      if (text.length - i >= this.blockSize) this.incrementCounter();\n      if (offset) {\n        i -= offset;\n        offset = 0;\n      }\n    }\n    this.offset = (this.offset + text.length % 4) % 4;\n    return cipherText;\n  };\n  /**\n   * Decrypts cipher text with AES-IGE mode.\n   */\n  AES_IGE.prototype.decrypt = function (message, buf) {\n    return this.encrypt(message, buf);\n  };\n  AES_IGE.prototype.incrementCounter = function () {\n    // increment counter\n    for (var carry = this.counter.length - 1; carry >= 0; carry--) {\n      if (++this.counter[carry] < 0xFFFFFFFF) break; // If overflowing, it'll be 0 and we'll have to continue propagating the carry\n    }\n  };\n\n  return AES_IGE;\n}();\nexport default AES;\nexport { AES_IGE$1 as CTR, AES_IGE as IGE };","map":{"version":3,"names":["S","Uint8Array","Si","T1","Uint32Array","T2","T3","T4","T5","T6","T7","T8","computeTables","d","t","x2","x4","x8","s","tEnc","tDec","x","xInv","i","s2i","str","pos","charCodeAt","getWords","key","length","buf","Error","xor","left","right","to","AES","_key","encKey","decKey","set","rcon","tmp","j","prototype","encrypt","_message","message","out","a","b","c","rounds","k","a2","b2","c2","decrypt","AES_IGE","iv","blockSize","cipher","text","cipherText","prevX","subarray","prevY","yXOR","y","AES_IGE$1","counter","offset","incrementCounter","carry","CTR","IGE"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/@cryptography/aes/dist/es/aes.js"],"sourcesContent":["var S = new Uint8Array(256);\nvar Si = new Uint8Array(256);\nvar T1 = new Uint32Array(256);\nvar T2 = new Uint32Array(256);\nvar T3 = new Uint32Array(256);\nvar T4 = new Uint32Array(256);\nvar T5 = new Uint32Array(256);\nvar T6 = new Uint32Array(256);\nvar T7 = new Uint32Array(256);\nvar T8 = new Uint32Array(256);\nfunction computeTables() {\n    var d = new Uint8Array(256);\n    var t = new Uint8Array(256);\n    var x2;\n    var x4;\n    var x8;\n    var s;\n    var tEnc;\n    var tDec;\n    var x = 0;\n    var xInv = 0;\n    // Compute double and third tables\n    for (var i = 0; i < 256; i++) {\n        d[i] = i << 1 ^ (i >> 7) * 283;\n        t[d[i] ^ i] = i;\n    }\n    for (; !S[x]; x ^= x2 || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        S[x] = s;\n        Si[s] = x;\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n        T1[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T2[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T3[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T4[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T5[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T6[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T7[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T8[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        xInv = t[xInv] || 1;\n    }\n}\n\n/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n    return (str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3));\n}\n\n/* eslint-disable import/prefer-default-export */\n/**\n * Helper function for transforming string key to Uint32Array\n */\nfunction getWords(key) {\n    if (key instanceof Uint32Array) {\n        return key;\n    }\n    if (typeof key === 'string') {\n        if (key.length % 4 !== 0)\n            for (var i = key.length % 4; i <= 4; i++)\n                key += '\\0x00';\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4)\n            buf[i / 4] = s2i(key, i);\n        return buf;\n    }\n    if (key instanceof Uint8Array) {\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4) {\n            buf[i / 4] = (key[i] << 24\n                ^ key[i + 1] << 16\n                ^ key[i + 2] << 8\n                ^ key[i + 3]);\n        }\n        return buf;\n    }\n    throw new Error('Unable to create 32-bit words');\n}\nfunction xor(left, right, to) {\n    if (to === void 0) { to = left; }\n    for (var i = 0; i < left.length; i++)\n        to[i] = left[i] ^ right[i];\n}\n\ncomputeTables();\n/**\n * Low-level AES Cipher\n */\nvar AES = /** @class */ (function () {\n    function AES(_key) {\n        var key = getWords(_key);\n        if (key.length !== 4 && key.length !== 6 && key.length !== 8) {\n            throw new Error('Invalid key size');\n        }\n        this.encKey = new Uint32Array(4 * key.length + 28);\n        this.decKey = new Uint32Array(4 * key.length + 28);\n        this.encKey.set(key);\n        var rcon = 1;\n        var i = key.length;\n        var tmp;\n        // schedule encryption keys\n        for (; i < 4 * key.length + 28; i++) {\n            tmp = this.encKey[i - 1];\n            // apply sbox\n            if (i % key.length === 0 || (key.length === 8 && i % key.length === 4)) {\n                tmp = S[tmp >>> 24] << 24 ^ S[(tmp >> 16) & 255] << 16 ^ S[(tmp >> 8) & 255] << 8 ^ S[tmp & 255];\n                // shift rows and add rcon\n                if (i % key.length === 0) {\n                    tmp = tmp << 8 ^ tmp >>> 24 ^ (rcon << 24);\n                    rcon = rcon << 1 ^ (rcon >> 7) * 283;\n                }\n            }\n            this.encKey[i] = this.encKey[i - key.length] ^ tmp;\n        }\n        // schedule decryption keys\n        for (var j = 0; i; j++, i--) {\n            tmp = this.encKey[j & 3 ? i : i - 4];\n            if (i <= 4 || j < 4) {\n                this.decKey[j] = tmp;\n            }\n            else {\n                this.decKey[j] = (T5[S[tmp >>> 24]]\n                    ^ T6[S[(tmp >> 16) & 255]]\n                    ^ T7[S[(tmp >> 8) & 255]]\n                    ^ T8[S[tmp & 255]]);\n            }\n        }\n    }\n    AES.prototype.encrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.encKey[0];\n        var b = message[1] ^ this.encKey[1];\n        var c = message[2] ^ this.encKey[2];\n        var d = message[3] ^ this.encKey[3];\n        var rounds = this.encKey.length / 4 - 2;\n        var k = 4;\n        var a2;\n        var b2;\n        var c2;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T1[a >>> 24] ^ T2[(b >> 16) & 255] ^ T3[(c >> 8) & 255] ^ T4[d & 255] ^ this.encKey[k];\n            b2 = T1[b >>> 24] ^ T2[(c >> 16) & 255] ^ T3[(d >> 8) & 255] ^ T4[a & 255] ^ this.encKey[k + 1];\n            c2 = T1[c >>> 24] ^ T2[(d >> 16) & 255] ^ T3[(a >> 8) & 255] ^ T4[b & 255] ^ this.encKey[k + 2];\n            d = T1[d >>> 24] ^ T2[(a >> 16) & 255] ^ T3[(b >> 8) & 255] ^ T4[c & 255] ^ this.encKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n            // console.log(a, b, c, d);\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[i] = (S[a >>> 24] << 24\n                ^ S[(b >> 16) & 255] << 16\n                ^ S[(c >> 8) & 255] << 8\n                ^ S[d & 255]\n                ^ this.encKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    AES.prototype.decrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.decKey[0];\n        var b = message[3] ^ this.decKey[1];\n        var c = message[2] ^ this.decKey[2];\n        var d = message[1] ^ this.decKey[3];\n        var rounds = this.decKey.length / 4 - 2;\n        var a2;\n        var b2;\n        var c2;\n        var k = 4;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T5[a >>> 24] ^ T6[(b >> 16) & 255] ^ T7[(c >> 8) & 255] ^ T8[d & 255] ^ this.decKey[k];\n            b2 = T5[b >>> 24] ^ T6[(c >> 16) & 255] ^ T7[(d >> 8) & 255] ^ T8[a & 255] ^ this.decKey[k + 1];\n            c2 = T5[c >>> 24] ^ T6[(d >> 16) & 255] ^ T7[(a >> 8) & 255] ^ T8[b & 255] ^ this.decKey[k + 2];\n            d = T5[d >>> 24] ^ T6[(a >> 16) & 255] ^ T7[(b >> 8) & 255] ^ T8[c & 255] ^ this.decKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[3 & -i] = (Si[a >>> 24] << 24\n                ^ Si[(b >> 16) & 255] << 16\n                ^ Si[(c >> 8) & 255] << 8\n                ^ Si[d & 255]\n                ^ this.decKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    return AES;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE = /** @class */ (function () {\n    function AES_IGE(key, iv, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.key = getWords(key);\n        this.iv = getWords(iv);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var prevX = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevY = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = text.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.encrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                cipherText[j] = y[k];\n        }\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        var cipherText = getWords(message);\n        var text = buf || new Uint32Array(cipherText.length);\n        var prevY = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevX = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = cipherText.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.decrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                text[j] = y[k];\n        }\n        return text;\n    };\n    return AES_IGE;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE$1 = /** @class */ (function () {\n    function AES_IGE(key, counter, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.offset = 0;\n        this.key = getWords(key);\n        this.counter = getWords(counter);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n        if (this.counter.length !== 4) {\n            throw new Error('AES-CTR mode counter must be 16 bytes length');\n        }\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var offset = this.offset;\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = this.cipher.encrypt(this.counter);\n            for (var j = i, k = offset; j < text.length && k < this.blockSize; j++, k++)\n                cipherText[j] = x[k] ^ text[j];\n            if (text.length - i >= this.blockSize)\n                this.incrementCounter();\n            if (offset) {\n                i -= offset;\n                offset = 0;\n            }\n        }\n        this.offset = (this.offset + (text.length % 4)) % 4;\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        return this.encrypt(message, buf);\n    };\n    AES_IGE.prototype.incrementCounter = function () {\n        // increment counter\n        for (var carry = this.counter.length - 1; carry >= 0; carry--) {\n            if (++this.counter[carry] < 0xFFFFFFFF)\n                break; // If overflowing, it'll be 0 and we'll have to continue propagating the carry\n        }\n    };\n    return AES_IGE;\n}());\n\nexport default AES;\nexport { AES_IGE$1 as CTR, AES_IGE as IGE };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}