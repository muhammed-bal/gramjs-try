{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPObfuscated = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass ObfuscatedIO {\n  constructor(connection) {\n    this.header = undefined;\n    this.connection = connection.socket;\n    this._packetClass = connection.PacketCodecClass;\n  }\n  async initHeader() {\n    // Obfuscated messages secrets cannot start with any of these\n    const keywords = [buffer_1.Buffer.from(\"50567247\", \"hex\"), buffer_1.Buffer.from(\"474554\", \"hex\"), buffer_1.Buffer.from(\"504f5354\", \"hex\"), buffer_1.Buffer.from(\"eeeeeeee\", \"hex\")];\n    let random;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      random = (0, Helpers_1.generateRandomBytes)(64);\n      if (random[0] !== 0xef && !random.slice(4, 8).equals(buffer_1.Buffer.alloc(4))) {\n        let ok = true;\n        for (const key of keywords) {\n          if (key.equals(random.slice(0, 4))) {\n            ok = false;\n            break;\n          }\n        }\n        if (ok) {\n          break;\n        }\n      }\n    }\n    random = random.toJSON().data;\n    const randomReversed = buffer_1.Buffer.from(random.slice(8, 56)).reverse();\n    // Encryption has \"continuous buffer\" enabled\n    const encryptKey = buffer_1.Buffer.from(random.slice(8, 40));\n    const encryptIv = buffer_1.Buffer.from(random.slice(40, 56));\n    const decryptKey = buffer_1.Buffer.from(randomReversed.slice(0, 32));\n    const decryptIv = buffer_1.Buffer.from(randomReversed.slice(32, 48));\n    const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n    const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n    random = buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(0, 56)), this._packetClass.obfuscateTag, buffer_1.Buffer.from(random.slice(60))]);\n    random = buffer_1.Buffer.concat([buffer_1.Buffer.from(random.slice(0, 56)), buffer_1.Buffer.from(encryptor.encrypt(random).slice(56, 64)), buffer_1.Buffer.from(random.slice(64))]);\n    this.header = random;\n    this._encrypt = encryptor;\n    this._decrypt = decryptor;\n  }\n  async read(n) {\n    const data = await this.connection.readExactly(n);\n    return this._decrypt.encrypt(data);\n  }\n  write(data) {\n    this.connection.write(this._encrypt.encrypt(data));\n  }\n}\nclass ConnectionTCPObfuscated extends Connection_1.ObfuscatedConnection {\n  constructor() {\n    super(...arguments);\n    this.ObfuscatedIO = ObfuscatedIO;\n    this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n  }\n}\nexports.ConnectionTCPObfuscated = ConnectionTCPObfuscated;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPObfuscated","buffer_1","require","Helpers_1","Connection_1","TCPAbridged_1","CTR_1","ObfuscatedIO","constructor","connection","header","undefined","socket","_packetClass","PacketCodecClass","initHeader","keywords","Buffer","from","random","generateRandomBytes","slice","equals","alloc","ok","key","toJSON","data","randomReversed","reverse","encryptKey","encryptIv","decryptKey","decryptIv","encryptor","CTR","decryptor","concat","obfuscateTag","encrypt","_encrypt","_decrypt","read","n","readExactly","write","ObfuscatedConnection","arguments","AbridgedPacketCodec"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/network/connection/TCPObfuscated.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectionTCPObfuscated = void 0;\r\nconst buffer_1 = require(\"buffer/\");\r\nconst Helpers_1 = require(\"../../Helpers\");\r\nconst Connection_1 = require(\"./Connection\");\r\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\r\nconst CTR_1 = require(\"../../crypto/CTR\");\r\nclass ObfuscatedIO {\r\n    constructor(connection) {\r\n        this.header = undefined;\r\n        this.connection = connection.socket;\r\n        this._packetClass = connection.PacketCodecClass;\r\n    }\r\n    async initHeader() {\r\n        // Obfuscated messages secrets cannot start with any of these\r\n        const keywords = [\r\n            buffer_1.Buffer.from(\"50567247\", \"hex\"),\r\n            buffer_1.Buffer.from(\"474554\", \"hex\"),\r\n            buffer_1.Buffer.from(\"504f5354\", \"hex\"),\r\n            buffer_1.Buffer.from(\"eeeeeeee\", \"hex\"),\r\n        ];\r\n        let random;\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            random = (0, Helpers_1.generateRandomBytes)(64);\r\n            if (random[0] !== 0xef &&\r\n                !random.slice(4, 8).equals(buffer_1.Buffer.alloc(4))) {\r\n                let ok = true;\r\n                for (const key of keywords) {\r\n                    if (key.equals(random.slice(0, 4))) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        random = random.toJSON().data;\r\n        const randomReversed = buffer_1.Buffer.from(random.slice(8, 56)).reverse();\r\n        // Encryption has \"continuous buffer\" enabled\r\n        const encryptKey = buffer_1.Buffer.from(random.slice(8, 40));\r\n        const encryptIv = buffer_1.Buffer.from(random.slice(40, 56));\r\n        const decryptKey = buffer_1.Buffer.from(randomReversed.slice(0, 32));\r\n        const decryptIv = buffer_1.Buffer.from(randomReversed.slice(32, 48));\r\n        const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\r\n        const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\r\n        random = buffer_1.Buffer.concat([\r\n            buffer_1.Buffer.from(random.slice(0, 56)),\r\n            this._packetClass.obfuscateTag,\r\n            buffer_1.Buffer.from(random.slice(60)),\r\n        ]);\r\n        random = buffer_1.Buffer.concat([\r\n            buffer_1.Buffer.from(random.slice(0, 56)),\r\n            buffer_1.Buffer.from(encryptor.encrypt(random).slice(56, 64)),\r\n            buffer_1.Buffer.from(random.slice(64)),\r\n        ]);\r\n        this.header = random;\r\n        this._encrypt = encryptor;\r\n        this._decrypt = decryptor;\r\n    }\r\n    async read(n) {\r\n        const data = await this.connection.readExactly(n);\r\n        return this._decrypt.encrypt(data);\r\n    }\r\n    write(data) {\r\n        this.connection.write(this._encrypt.encrypt(data));\r\n    }\r\n}\r\nclass ConnectionTCPObfuscated extends Connection_1.ObfuscatedConnection {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ObfuscatedIO = ObfuscatedIO;\r\n        this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\r\n    }\r\n}\r\nexports.ConnectionTCPObfuscated = ConnectionTCPObfuscated;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}