{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParticipants = exports.iterParticipants = exports._ParticipantsIter = void 0;\nconst Helpers_1 = require(\"../Helpers\");\nconst requestIter_1 = require(\"../requestIter\");\nconst __1 = require(\"../\");\nconst tl_1 = require(\"../tl\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst inspect_1 = require(\"../inspect\");\nconst _MAX_PARTICIPANTS_CHUNK_SIZE = 200;\nconst _MAX_ADMIN_LOG_CHUNK_SIZE = 100;\nconst _MAX_PROFILE_PHOTO_CHUNK_SIZE = 100;\nclass _ChatAction {\n  constructor(client, chat, action, params = {\n    delay: 4,\n    autoCancel: true\n  }) {\n    this._client = client;\n    this._chat = chat;\n    this._action = action;\n    this._delay = params.delay;\n    this.autoCancel = params.autoCancel;\n    this._request = undefined;\n    this._task = null;\n    this._running = false;\n  }\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  async start() {\n    this._request = new tl_1.Api.messages.SetTyping({\n      peer: this._chat,\n      action: this._action\n    });\n    this._running = true;\n    this._update();\n  }\n  async stop() {\n    this._running = false;\n    if (this.autoCancel) {\n      await this._client.invoke(new tl_1.Api.messages.SetTyping({\n        peer: this._chat,\n        action: new tl_1.Api.SendMessageCancelAction()\n      }));\n    }\n  }\n  async _update() {\n    while (this._running) {\n      if (this._request != undefined) {\n        await this._client.invoke(this._request);\n      }\n      await (0, Helpers_1.sleep)(this._delay * 1000);\n    }\n  }\n  progress(current, total) {\n    if (\"progress\" in this._action) {\n      this._action.progress = 100 * Math.round(current / total);\n    }\n  }\n}\n_ChatAction._str_mapping = {\n  typing: new tl_1.Api.SendMessageTypingAction(),\n  contact: new tl_1.Api.SendMessageChooseContactAction(),\n  game: new tl_1.Api.SendMessageGamePlayAction(),\n  location: new tl_1.Api.SendMessageGeoLocationAction(),\n  \"record-audio\": new tl_1.Api.SendMessageRecordAudioAction(),\n  \"record-voice\": new tl_1.Api.SendMessageRecordAudioAction(),\n  \"record-round\": new tl_1.Api.SendMessageRecordRoundAction(),\n  \"record-video\": new tl_1.Api.SendMessageRecordVideoAction(),\n  audio: new tl_1.Api.SendMessageUploadAudioAction({\n    progress: 1\n  }),\n  voice: new tl_1.Api.SendMessageUploadAudioAction({\n    progress: 1\n  }),\n  song: new tl_1.Api.SendMessageUploadAudioAction({\n    progress: 1\n  }),\n  round: new tl_1.Api.SendMessageUploadRoundAction({\n    progress: 1\n  }),\n  video: new tl_1.Api.SendMessageUploadVideoAction({\n    progress: 1\n  }),\n  photo: new tl_1.Api.SendMessageUploadPhotoAction({\n    progress: 1\n  }),\n  document: new tl_1.Api.SendMessageUploadDocumentAction({\n    progress: 1\n  }),\n  file: new tl_1.Api.SendMessageUploadDocumentAction({\n    progress: 1\n  }),\n  cancel: new tl_1.Api.SendMessageCancelAction()\n};\nclass _ParticipantsIter extends requestIter_1.RequestIter {\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  async _init({\n    entity,\n    filter,\n    offset,\n    search,\n    showTotal\n  }) {\n    var _a, _b;\n    if (!offset) {\n      offset = 0;\n    }\n    if (filter && filter.constructor === Function) {\n      if ([tl_1.Api.ChannelParticipantsBanned, tl_1.Api.ChannelParticipantsKicked, tl_1.Api.ChannelParticipantsSearch, tl_1.Api.ChannelParticipantsContacts].includes(filter)) {\n        filter = new filter({\n          q: \"\"\n        });\n      } else {\n        filter = new filter();\n      }\n    }\n    entity = await this.client.getInputEntity(entity);\n    const ty = __1.helpers._entityType(entity);\n    if (search && (filter || ty != __1.helpers._EntityType.CHANNEL)) {\n      // We need to 'search' ourselves unless we have a PeerChannel\n      search = search.toLowerCase();\n      this.filterEntity = entity => {\n        return __1.utils.getDisplayName(entity).toLowerCase().includes(search) || (\"username\" in entity ? entity.username || \"\" : \"\").toLowerCase().includes(search);\n      };\n    } else {\n      this.filterEntity = entity => true;\n    }\n    // Only used for channels, but we should always set the attribute\n    this.requests = [];\n    if (ty == __1.helpers._EntityType.CHANNEL) {\n      if (showTotal) {\n        const channel = await this.client.invoke(new tl_1.Api.channels.GetFullChannel({\n          channel: entity\n        }));\n        if (!(channel.fullChat instanceof tl_1.Api.ChatFull)) {\n          this.total = channel.fullChat.participantsCount;\n        }\n      }\n      if (this.total && this.total <= 0) {\n        return false;\n      }\n      this.requests.push(new tl_1.Api.channels.GetParticipants({\n        channel: entity,\n        filter: filter || new tl_1.Api.ChannelParticipantsSearch({\n          q: search || \"\"\n        }),\n        offset,\n        limit: _MAX_PARTICIPANTS_CHUNK_SIZE,\n        hash: big_integer_1.default.zero\n      }));\n    } else if (ty == __1.helpers._EntityType.CHAT) {\n      if (!(\"chatId\" in entity)) {\n        throw new Error(\"Found chat without id \" + JSON.stringify(entity));\n      }\n      const full = await this.client.invoke(new tl_1.Api.messages.GetFullChat({\n        chatId: entity.chatId\n      }));\n      if (full.fullChat instanceof tl_1.Api.ChatFull) {\n        if (!(full.fullChat.participants instanceof tl_1.Api.ChatParticipantsForbidden)) {\n          this.total = full.fullChat.participants.participants.length;\n        } else {\n          this.total = 0;\n          return false;\n        }\n        const users = new Map();\n        for (const user of full.users) {\n          users.set(user.id.toString(), user);\n        }\n        for (const participant of full.fullChat.participants.participants) {\n          const user = users.get(participant.userId.toString());\n          if (!this.filterEntity(user)) {\n            continue;\n          }\n          user.participant = participant;\n          (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.push(user);\n        }\n        return true;\n      }\n    } else {\n      this.total = 1;\n      if (this.limit != 0) {\n        const user = await this.client.getEntity(entity);\n        if (this.filterEntity(user)) {\n          user.participant = undefined;\n          (_b = this.buffer) === null || _b === void 0 ? void 0 : _b.push(user);\n        }\n      }\n      return true;\n    }\n  }\n  async _loadNextChunk() {\n    var _a, _b;\n    if (!((_a = this.requests) === null || _a === void 0 ? void 0 : _a.length)) {\n      return true;\n    }\n    this.requests[0].limit = Math.min(this.limit - this.requests[0].offset, _MAX_PARTICIPANTS_CHUNK_SIZE);\n    const results = [];\n    for (const request of this.requests) {\n      results.push(await this.client.invoke(request));\n    }\n    for (let i = this.requests.length - 1; i >= 0; i--) {\n      const participants = results[i];\n      if (participants instanceof tl_1.Api.channels.ChannelParticipantsNotModified || !participants.users.length) {\n        this.requests.splice(i, 1);\n        continue;\n      }\n      this.requests[i].offset += participants.participants.length;\n      const users = new Map();\n      for (const user of participants.users) {\n        users.set(user.id.toString(), user);\n      }\n      for (const participant of participants.participants) {\n        if (!(\"userId\" in participant)) {\n          continue;\n        }\n        const user = users.get(participant.userId.toString());\n        if (this.filterEntity && !this.filterEntity(user)) {\n          continue;\n        }\n        user.participant = participant;\n        (_b = this.buffer) === null || _b === void 0 ? void 0 : _b.push(user);\n      }\n    }\n    return undefined;\n  }\n  [Symbol.asyncIterator]() {\n    return super[Symbol.asyncIterator]();\n  }\n}\nexports._ParticipantsIter = _ParticipantsIter;\nclass _AdminLogIter extends requestIter_1.RequestIter {\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  async _init(entity, searchArgs, filterArgs) {\n    let eventsFilter = undefined;\n    if (filterArgs && Object.values(filterArgs).find(element => element === true)) {\n      eventsFilter = new tl_1.Api.ChannelAdminLogEventsFilter(Object.assign({}, filterArgs));\n    }\n    this.entity = await this.client.getInputEntity(entity);\n    const adminList = [];\n    if (searchArgs && searchArgs.admins) {\n      for (const admin of searchArgs.admins) {\n        adminList.push(await this.client.getInputEntity(admin));\n      }\n    }\n    this.request = new tl_1.Api.channels.GetAdminLog({\n      channel: this.entity,\n      q: (searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.search) || \"\",\n      minId: searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.minId,\n      maxId: searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.maxId,\n      limit: 0,\n      eventsFilter: eventsFilter,\n      admins: adminList || undefined\n    });\n  }\n  async _loadNextChunk() {\n    if (!this.request) {\n      return true;\n    }\n    this.request.limit = Math.min(this.left, _MAX_ADMIN_LOG_CHUNK_SIZE);\n    const r = await this.client.invoke(this.request);\n    const entities = new Map();\n    for (const entity of [...r.users, ...r.chats]) {\n      entities.set(__1.utils.getPeerId(entity), entity);\n    }\n    const eventIds = [];\n    for (const e of r.events) {\n      eventIds.push(e.id);\n    }\n    this.request.maxId = (0, Helpers_1.getMinBigInt)([big_integer_1.default.zero, ...eventIds]);\n    for (const ev of r.events) {\n      if (ev.action instanceof tl_1.Api.ChannelAdminLogEventActionEditMessage) {\n        // @ts-ignore\n        // TODO ev.action.prevMessage._finishInit(this.client, entities, this.entity);\n        // @ts-ignore\n        // TODO ev.action.newMessage._finishInit(this.client, entities, this.entity);\n      }\n    }\n  }\n}\n/** @hidden */\nfunction iterParticipants(client, entity, {\n  limit,\n  offset,\n  search,\n  filter,\n  showTotal = true\n}) {\n  return new _ParticipantsIter(client, limit !== null && limit !== void 0 ? limit : Number.MAX_SAFE_INTEGER, {}, {\n    entity: entity,\n    filter: filter,\n    offset: offset !== null && offset !== void 0 ? offset : 0,\n    search: search,\n    showTotal: showTotal\n  });\n}\nexports.iterParticipants = iterParticipants;\n/** @hidden */\nasync function getParticipants(client, entity, params) {\n  const it = client.iterParticipants(entity, params);\n  return await it.collect();\n}\nexports.getParticipants = getParticipants;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getParticipants","iterParticipants","_ParticipantsIter","Helpers_1","require","requestIter_1","__1","tl_1","big_integer_1","inspect_1","_MAX_PARTICIPANTS_CHUNK_SIZE","_MAX_ADMIN_LOG_CHUNK_SIZE","_MAX_PROFILE_PHOTO_CHUNK_SIZE","_ChatAction","constructor","client","chat","action","params","delay","autoCancel","_client","_chat","_action","_delay","_request","undefined","_task","_running","inspect","custom","betterConsoleLog","start","Api","messages","SetTyping","peer","_update","stop","invoke","SendMessageCancelAction","sleep","progress","current","total","Math","round","_str_mapping","typing","SendMessageTypingAction","contact","SendMessageChooseContactAction","game","SendMessageGamePlayAction","location","SendMessageGeoLocationAction","SendMessageRecordAudioAction","SendMessageRecordRoundAction","SendMessageRecordVideoAction","audio","SendMessageUploadAudioAction","voice","song","SendMessageUploadRoundAction","video","SendMessageUploadVideoAction","photo","SendMessageUploadPhotoAction","document","SendMessageUploadDocumentAction","file","cancel","RequestIter","_init","entity","filter","offset","search","showTotal","_a","_b","Function","ChannelParticipantsBanned","ChannelParticipantsKicked","ChannelParticipantsSearch","ChannelParticipantsContacts","includes","q","getInputEntity","ty","helpers","_entityType","_EntityType","CHANNEL","toLowerCase","filterEntity","utils","getDisplayName","username","requests","channel","channels","GetFullChannel","fullChat","ChatFull","participantsCount","push","GetParticipants","limit","hash","default","zero","CHAT","Error","JSON","stringify","full","GetFullChat","chatId","participants","ChatParticipantsForbidden","length","users","Map","user","set","id","toString","participant","get","userId","buffer","getEntity","_loadNextChunk","min","results","request","i","ChannelParticipantsNotModified","splice","Symbol","asyncIterator","_AdminLogIter","searchArgs","filterArgs","eventsFilter","values","find","element","ChannelAdminLogEventsFilter","assign","adminList","admins","admin","GetAdminLog","minId","maxId","left","r","entities","chats","getPeerId","eventIds","e","events","getMinBigInt","ev","ChannelAdminLogEventActionEditMessage","Number","MAX_SAFE_INTEGER","it","collect"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/client/chats.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getParticipants = exports.iterParticipants = exports._ParticipantsIter = void 0;\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst requestIter_1 = require(\"../requestIter\");\r\nconst __1 = require(\"../\");\r\nconst tl_1 = require(\"../tl\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nconst inspect_1 = require(\"../inspect\");\r\nconst _MAX_PARTICIPANTS_CHUNK_SIZE = 200;\r\nconst _MAX_ADMIN_LOG_CHUNK_SIZE = 100;\r\nconst _MAX_PROFILE_PHOTO_CHUNK_SIZE = 100;\r\nclass _ChatAction {\r\n    constructor(client, chat, action, params = {\r\n        delay: 4,\r\n        autoCancel: true,\r\n    }) {\r\n        this._client = client;\r\n        this._chat = chat;\r\n        this._action = action;\r\n        this._delay = params.delay;\r\n        this.autoCancel = params.autoCancel;\r\n        this._request = undefined;\r\n        this._task = null;\r\n        this._running = false;\r\n    }\r\n    [inspect_1.inspect.custom]() {\r\n        return (0, Helpers_1.betterConsoleLog)(this);\r\n    }\r\n    async start() {\r\n        this._request = new tl_1.Api.messages.SetTyping({\r\n            peer: this._chat,\r\n            action: this._action,\r\n        });\r\n        this._running = true;\r\n        this._update();\r\n    }\r\n    async stop() {\r\n        this._running = false;\r\n        if (this.autoCancel) {\r\n            await this._client.invoke(new tl_1.Api.messages.SetTyping({\r\n                peer: this._chat,\r\n                action: new tl_1.Api.SendMessageCancelAction(),\r\n            }));\r\n        }\r\n    }\r\n    async _update() {\r\n        while (this._running) {\r\n            if (this._request != undefined) {\r\n                await this._client.invoke(this._request);\r\n            }\r\n            await (0, Helpers_1.sleep)(this._delay * 1000);\r\n        }\r\n    }\r\n    progress(current, total) {\r\n        if (\"progress\" in this._action) {\r\n            this._action.progress = 100 * Math.round(current / total);\r\n        }\r\n    }\r\n}\r\n_ChatAction._str_mapping = {\r\n    typing: new tl_1.Api.SendMessageTypingAction(),\r\n    contact: new tl_1.Api.SendMessageChooseContactAction(),\r\n    game: new tl_1.Api.SendMessageGamePlayAction(),\r\n    location: new tl_1.Api.SendMessageGeoLocationAction(),\r\n    \"record-audio\": new tl_1.Api.SendMessageRecordAudioAction(),\r\n    \"record-voice\": new tl_1.Api.SendMessageRecordAudioAction(),\r\n    \"record-round\": new tl_1.Api.SendMessageRecordRoundAction(),\r\n    \"record-video\": new tl_1.Api.SendMessageRecordVideoAction(),\r\n    audio: new tl_1.Api.SendMessageUploadAudioAction({ progress: 1 }),\r\n    voice: new tl_1.Api.SendMessageUploadAudioAction({ progress: 1 }),\r\n    song: new tl_1.Api.SendMessageUploadAudioAction({ progress: 1 }),\r\n    round: new tl_1.Api.SendMessageUploadRoundAction({ progress: 1 }),\r\n    video: new tl_1.Api.SendMessageUploadVideoAction({ progress: 1 }),\r\n    photo: new tl_1.Api.SendMessageUploadPhotoAction({ progress: 1 }),\r\n    document: new tl_1.Api.SendMessageUploadDocumentAction({ progress: 1 }),\r\n    file: new tl_1.Api.SendMessageUploadDocumentAction({ progress: 1 }),\r\n    cancel: new tl_1.Api.SendMessageCancelAction(),\r\n};\r\nclass _ParticipantsIter extends requestIter_1.RequestIter {\r\n    [inspect_1.inspect.custom]() {\r\n        return (0, Helpers_1.betterConsoleLog)(this);\r\n    }\r\n    async _init({ entity, filter, offset, search, showTotal, }) {\r\n        var _a, _b;\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        if (filter && filter.constructor === Function) {\r\n            if ([\r\n                tl_1.Api.ChannelParticipantsBanned,\r\n                tl_1.Api.ChannelParticipantsKicked,\r\n                tl_1.Api.ChannelParticipantsSearch,\r\n                tl_1.Api.ChannelParticipantsContacts,\r\n            ].includes(filter)) {\r\n                filter = new filter({\r\n                    q: \"\",\r\n                });\r\n            }\r\n            else {\r\n                filter = new filter();\r\n            }\r\n        }\r\n        entity = await this.client.getInputEntity(entity);\r\n        const ty = __1.helpers._entityType(entity);\r\n        if (search && (filter || ty != __1.helpers._EntityType.CHANNEL)) {\r\n            // We need to 'search' ourselves unless we have a PeerChannel\r\n            search = search.toLowerCase();\r\n            this.filterEntity = (entity) => {\r\n                return (__1.utils\r\n                    .getDisplayName(entity)\r\n                    .toLowerCase()\r\n                    .includes(search) ||\r\n                    (\"username\" in entity ? entity.username || \"\" : \"\")\r\n                        .toLowerCase()\r\n                        .includes(search));\r\n            };\r\n        }\r\n        else {\r\n            this.filterEntity = (entity) => true;\r\n        }\r\n        // Only used for channels, but we should always set the attribute\r\n        this.requests = [];\r\n        if (ty == __1.helpers._EntityType.CHANNEL) {\r\n            if (showTotal) {\r\n                const channel = await this.client.invoke(new tl_1.Api.channels.GetFullChannel({\r\n                    channel: entity,\r\n                }));\r\n                if (!(channel.fullChat instanceof tl_1.Api.ChatFull)) {\r\n                    this.total = channel.fullChat.participantsCount;\r\n                }\r\n            }\r\n            if (this.total && this.total <= 0) {\r\n                return false;\r\n            }\r\n            this.requests.push(new tl_1.Api.channels.GetParticipants({\r\n                channel: entity,\r\n                filter: filter ||\r\n                    new tl_1.Api.ChannelParticipantsSearch({\r\n                        q: search || \"\",\r\n                    }),\r\n                offset,\r\n                limit: _MAX_PARTICIPANTS_CHUNK_SIZE,\r\n                hash: big_integer_1.default.zero,\r\n            }));\r\n        }\r\n        else if (ty == __1.helpers._EntityType.CHAT) {\r\n            if (!(\"chatId\" in entity)) {\r\n                throw new Error(\"Found chat without id \" + JSON.stringify(entity));\r\n            }\r\n            const full = await this.client.invoke(new tl_1.Api.messages.GetFullChat({\r\n                chatId: entity.chatId,\r\n            }));\r\n            if (full.fullChat instanceof tl_1.Api.ChatFull) {\r\n                if (!(full.fullChat.participants instanceof\r\n                    tl_1.Api.ChatParticipantsForbidden)) {\r\n                    this.total = full.fullChat.participants.participants.length;\r\n                }\r\n                else {\r\n                    this.total = 0;\r\n                    return false;\r\n                }\r\n                const users = new Map();\r\n                for (const user of full.users) {\r\n                    users.set(user.id.toString(), user);\r\n                }\r\n                for (const participant of full.fullChat.participants\r\n                    .participants) {\r\n                    const user = users.get(participant.userId.toString());\r\n                    if (!this.filterEntity(user)) {\r\n                        continue;\r\n                    }\r\n                    user.participant = participant;\r\n                    (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.push(user);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            this.total = 1;\r\n            if (this.limit != 0) {\r\n                const user = await this.client.getEntity(entity);\r\n                if (this.filterEntity(user)) {\r\n                    user.participant = undefined;\r\n                    (_b = this.buffer) === null || _b === void 0 ? void 0 : _b.push(user);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    async _loadNextChunk() {\r\n        var _a, _b;\r\n        if (!((_a = this.requests) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            return true;\r\n        }\r\n        this.requests[0].limit = Math.min(this.limit - this.requests[0].offset, _MAX_PARTICIPANTS_CHUNK_SIZE);\r\n        const results = [];\r\n        for (const request of this.requests) {\r\n            results.push(await this.client.invoke(request));\r\n        }\r\n        for (let i = this.requests.length - 1; i >= 0; i--) {\r\n            const participants = results[i];\r\n            if (participants instanceof\r\n                tl_1.Api.channels.ChannelParticipantsNotModified ||\r\n                !participants.users.length) {\r\n                this.requests.splice(i, 1);\r\n                continue;\r\n            }\r\n            this.requests[i].offset += participants.participants.length;\r\n            const users = new Map();\r\n            for (const user of participants.users) {\r\n                users.set(user.id.toString(), user);\r\n            }\r\n            for (const participant of participants.participants) {\r\n                if (!(\"userId\" in participant)) {\r\n                    continue;\r\n                }\r\n                const user = users.get(participant.userId.toString());\r\n                if (this.filterEntity && !this.filterEntity(user)) {\r\n                    continue;\r\n                }\r\n                user.participant = participant;\r\n                (_b = this.buffer) === null || _b === void 0 ? void 0 : _b.push(user);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return super[Symbol.asyncIterator]();\r\n    }\r\n}\r\nexports._ParticipantsIter = _ParticipantsIter;\r\nclass _AdminLogIter extends requestIter_1.RequestIter {\r\n    [inspect_1.inspect.custom]() {\r\n        return (0, Helpers_1.betterConsoleLog)(this);\r\n    }\r\n    async _init(entity, searchArgs, filterArgs) {\r\n        let eventsFilter = undefined;\r\n        if (filterArgs &&\r\n            Object.values(filterArgs).find((element) => element === true)) {\r\n            eventsFilter = new tl_1.Api.ChannelAdminLogEventsFilter(Object.assign({}, filterArgs));\r\n        }\r\n        this.entity = await this.client.getInputEntity(entity);\r\n        const adminList = [];\r\n        if (searchArgs && searchArgs.admins) {\r\n            for (const admin of searchArgs.admins) {\r\n                adminList.push(await this.client.getInputEntity(admin));\r\n            }\r\n        }\r\n        this.request = new tl_1.Api.channels.GetAdminLog({\r\n            channel: this.entity,\r\n            q: (searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.search) || \"\",\r\n            minId: searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.minId,\r\n            maxId: searchArgs === null || searchArgs === void 0 ? void 0 : searchArgs.maxId,\r\n            limit: 0,\r\n            eventsFilter: eventsFilter,\r\n            admins: adminList || undefined,\r\n        });\r\n    }\r\n    async _loadNextChunk() {\r\n        if (!this.request) {\r\n            return true;\r\n        }\r\n        this.request.limit = Math.min(this.left, _MAX_ADMIN_LOG_CHUNK_SIZE);\r\n        const r = await this.client.invoke(this.request);\r\n        const entities = new Map();\r\n        for (const entity of [...r.users, ...r.chats]) {\r\n            entities.set(__1.utils.getPeerId(entity), entity);\r\n        }\r\n        const eventIds = [];\r\n        for (const e of r.events) {\r\n            eventIds.push(e.id);\r\n        }\r\n        this.request.maxId = (0, Helpers_1.getMinBigInt)([big_integer_1.default.zero, ...eventIds]);\r\n        for (const ev of r.events) {\r\n            if (ev.action instanceof tl_1.Api.ChannelAdminLogEventActionEditMessage) {\r\n                // @ts-ignore\r\n                // TODO ev.action.prevMessage._finishInit(this.client, entities, this.entity);\r\n                // @ts-ignore\r\n                // TODO ev.action.newMessage._finishInit(this.client, entities, this.entity);\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @hidden */\r\nfunction iterParticipants(client, entity, { limit, offset, search, filter, showTotal = true }) {\r\n    return new _ParticipantsIter(client, limit !== null && limit !== void 0 ? limit : Number.MAX_SAFE_INTEGER, {}, {\r\n        entity: entity,\r\n        filter: filter,\r\n        offset: offset !== null && offset !== void 0 ? offset : 0,\r\n        search: search,\r\n        showTotal: showTotal,\r\n    });\r\n}\r\nexports.iterParticipants = iterParticipants;\r\n/** @hidden */\r\nasync function getParticipants(client, entity, params) {\r\n    const it = client.iterParticipants(entity, params);\r\n    return (await it.collect());\r\n}\r\nexports.getParticipants = getParticipants;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}