{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammed\\\\Desktop\\\\REACT_JS\\\\dene-gramjs\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SESSION = new StringSession(''); //create a new StringSession, also you can use StoreSession\nconst API_ID = 24128611; // put your API id here\nconst API_HASH = '4dbf1bb42c02b9bad0e63337d4089739'; // put your API hash here\n\nconst client = new TelegramClient(SESSION, API_ID, API_HASH, {\n  connectionRetries: 5\n}); // Immediately create a client using your application data\n\nconst initialState = {\n  phoneNumber: '',\n  password: '',\n  phoneCode: ''\n}; // Initialize component initial state\n\nfunction App() {\n  _s();\n  const [{\n    phoneNumber,\n    password,\n    phoneCode\n  }, setAuthInfo] = useState(initialState);\n  async function sendCodeHandler() {\n    await client.connect(); // Connecting to the server\n    await client.sendCode({\n      apiId: API_ID,\n      apiHash: API_HASH\n    }, phoneNumber);\n  }\n  async function clientStartHandler() {\n    try {\n      await client.start({\n        phoneNumber,\n        password: userAuthParamCallback(password),\n        phoneCode: userAuthParamCallback(phoneCode),\n        onError: () => {}\n      });\n      localStorage.setItem('session', JSON.stringify(client.session.save())); // Save session to local storage\n      await client.sendMessage('me', {\n        message: \"You're successfully logged in!\"\n      });\n    } catch (error) {\n      console.dir(error);\n      // Error handling logic\n    }\n  }\n\n  function inputChangeHandler({\n    target: {\n      name,\n      value\n    }\n  }) {\n    setAuthInfo(authInfo => ({\n      ...authInfo,\n      [name]: value\n    }));\n  }\n  function userAuthParamCallback(param) {\n    return async function () {\n      return await new (resolve => {\n        resolve(param);\n      })();\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"phoneNumber\",\n      value: phoneNumber,\n      onChange: inputChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"password\",\n      value: password,\n      onChange: inputChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"start client\",\n      onClick: sendCodeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"phoneCode\",\n      value: phoneCode,\n      onChange: inputChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"insert code\",\n      onClick: clientStartHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"zK23pDTD8e0RJ9Ui+8b5M59DiQM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TelegramClient","StringSession","jsxDEV","_jsxDEV","Fragment","_Fragment","SESSION","API_ID","API_HASH","client","connectionRetries","initialState","phoneNumber","password","phoneCode","App","_s","setAuthInfo","sendCodeHandler","connect","sendCode","apiId","apiHash","clientStartHandler","start","userAuthParamCallback","onError","localStorage","setItem","JSON","stringify","session","save","sendMessage","message","error","console","dir","inputChangeHandler","target","name","value","authInfo","param","resolve","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { TelegramClient } from 'telegram'\nimport { StringSession } from 'telegram/sessions'\n\nconst SESSION = new StringSession('') //create a new StringSession, also you can use StoreSession\nconst API_ID = 24128611 // put your API id here\nconst API_HASH = '4dbf1bb42c02b9bad0e63337d4089739' // put your API hash here\n\nconst client = new TelegramClient(SESSION, API_ID, API_HASH, { connectionRetries: 5 }) // Immediately create a client using your application data\n\nconst initialState = { phoneNumber: '', password: '', phoneCode: '' } // Initialize component initial state\n\nfunction App () {\n  const [{ phoneNumber, password, phoneCode }, setAuthInfo] = useState(initialState)\n\n  async function sendCodeHandler () {\n    await client.connect() // Connecting to the server\n    await client.sendCode(\n      {\n        apiId: API_ID,\n        apiHash: API_HASH\n      },\n      phoneNumber\n    )\n  }\n\n  async function clientStartHandler () {\n    try {\n      await client.start({ phoneNumber, password: userAuthParamCallback(password), phoneCode: userAuthParamCallback(phoneCode), onError: () => {} })\n      localStorage.setItem('session', JSON.stringify(client.session.save())) // Save session to local storage\n      await client.sendMessage('me', { message: \"You're successfully logged in!\" })\n    } catch (error) {\n      console.dir(error)\n      // Error handling logic\n    }\n  }\n\n\n  function inputChangeHandler ({ target: { name, value } }) {\n    setAuthInfo((authInfo) => ({ ...authInfo, [name]: value }))\n  }\n\n  function userAuthParamCallback (param) {\n    return async function () {\n      return await new (resolve => {\n        resolve(param)\n      })()\n    }\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        name=\"phoneNumber\"\n        value={phoneNumber}\n        onChange={inputChangeHandler}\n      />\n\n      <input\n        type=\"text\"\n        name=\"password\"\n        value={password}\n        onChange={inputChangeHandler}\n      />\n\n      <input type=\"button\" value=\"start client\" onClick={sendCodeHandler} />\n\n      <input\n        type=\"text\"\n        name=\"phoneCode\"\n        value={phoneCode}\n        onChange={inputChangeHandler}\n      />\n\n      <input type=\"button\" value=\"insert code\" onClick={clientStartHandler} />\n    </>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}