{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;\nconst Utils_1 = require(\"../Utils\");\nconst api_1 = require(\"../tl/api\");\nconst index_1 = require(\"../index\");\nconst Helpers_1 = require(\"../Helpers\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nexports.DEFAULT_DELIMITERS = {\n  \"**\": api_1.Api.MessageEntityBold,\n  __: api_1.Api.MessageEntityItalic,\n  \"~~\": api_1.Api.MessageEntityStrike,\n  \"`\": api_1.Api.MessageEntityCode,\n  \"```\": api_1.Api.MessageEntityPre\n};\n/** @hidden */\nasync function _replaceWithMention(client, entities, i, user) {\n  try {\n    entities[i] = new api_1.Api.InputMessageEntityMentionName({\n      offset: entities[i].offset,\n      length: entities[i].length,\n      userId: await client.getInputEntity(user)\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexports._replaceWithMention = _replaceWithMention;\n/** @hidden */\nasync function _parseMessageText(client, message, parseMode) {\n  if (parseMode == false) {\n    return [message, []];\n  }\n  if (parseMode == undefined) {\n    if (client.parseMode == undefined) {\n      return [message, []];\n    }\n    parseMode = client.parseMode;\n  } else if (typeof parseMode === \"string\") {\n    parseMode = (0, Utils_1.sanitizeParseMode)(parseMode);\n  }\n  const [rawMessage, msgEntities] = parseMode.parse(message);\n  for (let i = msgEntities.length - 1; i >= 0; i--) {\n    const e = msgEntities[i];\n    if (e instanceof api_1.Api.MessageEntityTextUrl) {\n      const m = /^@|\\+|tg:\\/\\/user\\?id=(\\d+)/.exec(e.url);\n      if (m) {\n        const userIdOrUsername = m[1] ? Number(m[1]) : e.url;\n        const isMention = await _replaceWithMention(client, msgEntities, i, userIdOrUsername);\n        if (!isMention) {\n          msgEntities.splice(i, 1);\n        }\n      }\n    }\n  }\n  return [rawMessage, msgEntities];\n}\nexports._parseMessageText = _parseMessageText;\n/** @hidden */\nfunction _getResponseMessage(client, request, result, inputChat) {\n  let updates = [];\n  let entities = new Map();\n  if (result instanceof api_1.Api.UpdateShort) {\n    updates = [result.update];\n  } else if (result instanceof api_1.Api.Updates || result instanceof api_1.Api.UpdatesCombined) {\n    updates = result.updates;\n    for (const x of [...result.users, ...result.chats]) {\n      entities.set(index_1.utils.getPeerId(x), x);\n    }\n  } else {\n    return;\n  }\n  const randomToId = new Map();\n  const idToMessage = new Map();\n  let schedMessage;\n  for (const update of updates) {\n    if (update instanceof api_1.Api.UpdateMessageID) {\n      randomToId.set(update.randomId.toString(), update.id);\n    } else if (update instanceof api_1.Api.UpdateNewChannelMessage || update instanceof api_1.Api.UpdateNewMessage) {\n      update.message._finishInit(client, entities, inputChat);\n      if (\"randomId\" in request || (0, Helpers_1.isArrayLike)(request)) {\n        idToMessage.set(update.message.id, update.message);\n      } else {\n        return update.message;\n      }\n    } else if (update instanceof api_1.Api.UpdateEditMessage && \"peer\" in request && (0, Helpers_1._entityType)(request.peer) != Helpers_1._EntityType.CHANNEL) {\n      update.message._finishInit(client, entities, inputChat);\n      if (\"randomId\" in request) {\n        idToMessage.set(update.message.id, update.message);\n      } else if (\"id\" in request && request.id === update.message.id) {\n        return update.message;\n      }\n    } else if (update instanceof api_1.Api.UpdateEditChannelMessage && \"peer\" in request && (0, Utils_1.getPeerId)(request.peer) == (0, Utils_1.getPeerId)(update.message.peerId)) {\n      if (request.id == update.message.id) {\n        update.message._finishInit(client, entities, inputChat);\n        return update.message;\n      }\n    } else if (update instanceof api_1.Api.UpdateNewScheduledMessage) {\n      update.message._finishInit(client, entities, inputChat);\n      schedMessage = update.message;\n      idToMessage.set(update.message.id, update.message);\n    } else if (update instanceof api_1.Api.UpdateMessagePoll) {\n      if (request.media.poll.id == update.pollId) {\n        const m = new api_1.Api.Message({\n          id: request.id,\n          peerId: index_1.utils.getPeerId(request.peer),\n          media: new api_1.Api.MessageMediaPoll({\n            poll: update.poll,\n            results: update.results\n          }),\n          message: \"\",\n          date: 0\n        });\n        m._finishInit(client, entities, inputChat);\n        return m;\n      }\n    }\n  }\n  if (request == undefined) {\n    return idToMessage;\n  }\n  let randomId;\n  if ((0, Helpers_1.isArrayLike)(request) || typeof request == \"number\" || big_integer_1.default.isInstance(request)) {\n    randomId = request;\n  } else {\n    randomId = request.randomId;\n  }\n  if (!randomId) {\n    if (schedMessage) {\n      return schedMessage;\n    }\n    client._log.warn(`No randomId in ${request} to map to. returning undefined for ${result}`);\n    return undefined;\n  }\n  if (!(0, Helpers_1.isArrayLike)(randomId)) {\n    let msg = idToMessage.get(randomToId.get(randomId.toString()));\n    if (!msg) {\n      client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\n    }\n    return msg;\n  }\n  const final = [];\n  let warned = false;\n  for (const rnd of randomId) {\n    const tmp = randomToId.get(rnd.toString());\n    if (!tmp) {\n      warned = true;\n      break;\n    }\n    const tmp2 = idToMessage.get(tmp);\n    if (!tmp2) {\n      warned = true;\n      break;\n    }\n    final.push(tmp2);\n  }\n  if (warned) {\n    client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\n  }\n  const finalToReturn = [];\n  for (const rnd of randomId) {\n    finalToReturn.push(idToMessage.get(randomToId.get(rnd.toString())));\n  }\n  return finalToReturn;\n}\nexports._getResponseMessage = _getResponseMessage;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_getResponseMessage","_parseMessageText","_replaceWithMention","DEFAULT_DELIMITERS","Utils_1","require","api_1","index_1","Helpers_1","big_integer_1","Api","MessageEntityBold","__","MessageEntityItalic","MessageEntityStrike","MessageEntityCode","MessageEntityPre","client","entities","i","user","InputMessageEntityMentionName","offset","length","userId","getInputEntity","e","message","parseMode","undefined","sanitizeParseMode","rawMessage","msgEntities","parse","MessageEntityTextUrl","m","exec","url","userIdOrUsername","Number","isMention","splice","request","result","inputChat","updates","Map","UpdateShort","update","Updates","UpdatesCombined","x","users","chats","set","utils","getPeerId","randomToId","idToMessage","schedMessage","UpdateMessageID","randomId","toString","id","UpdateNewChannelMessage","UpdateNewMessage","_finishInit","isArrayLike","UpdateEditMessage","_entityType","peer","_EntityType","CHANNEL","UpdateEditChannelMessage","peerId","UpdateNewScheduledMessage","UpdateMessagePoll","media","poll","pollId","Message","MessageMediaPoll","results","date","default","isInstance","_log","warn","msg","get","className","final","warned","rnd","tmp","tmp2","push","finalToReturn"],"sources":["C:/Users/Muhammed/Desktop/REACT_JS/dene-gramjs/node_modules/telegram/client/messageParse.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;\r\nconst Utils_1 = require(\"../Utils\");\r\nconst api_1 = require(\"../tl/api\");\r\nconst index_1 = require(\"../index\");\r\nconst Helpers_1 = require(\"../Helpers\");\r\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\r\nexports.DEFAULT_DELIMITERS = {\r\n    \"**\": api_1.Api.MessageEntityBold,\r\n    __: api_1.Api.MessageEntityItalic,\r\n    \"~~\": api_1.Api.MessageEntityStrike,\r\n    \"`\": api_1.Api.MessageEntityCode,\r\n    \"```\": api_1.Api.MessageEntityPre,\r\n};\r\n/** @hidden */\r\nasync function _replaceWithMention(client, entities, i, user) {\r\n    try {\r\n        entities[i] = new api_1.Api.InputMessageEntityMentionName({\r\n            offset: entities[i].offset,\r\n            length: entities[i].length,\r\n            userId: (await client.getInputEntity(user)),\r\n        });\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexports._replaceWithMention = _replaceWithMention;\r\n/** @hidden */\r\nasync function _parseMessageText(client, message, parseMode) {\r\n    if (parseMode == false) {\r\n        return [message, []];\r\n    }\r\n    if (parseMode == undefined) {\r\n        if (client.parseMode == undefined) {\r\n            return [message, []];\r\n        }\r\n        parseMode = client.parseMode;\r\n    }\r\n    else if (typeof parseMode === \"string\") {\r\n        parseMode = (0, Utils_1.sanitizeParseMode)(parseMode);\r\n    }\r\n    const [rawMessage, msgEntities] = parseMode.parse(message);\r\n    for (let i = msgEntities.length - 1; i >= 0; i--) {\r\n        const e = msgEntities[i];\r\n        if (e instanceof api_1.Api.MessageEntityTextUrl) {\r\n            const m = /^@|\\+|tg:\\/\\/user\\?id=(\\d+)/.exec(e.url);\r\n            if (m) {\r\n                const userIdOrUsername = m[1] ? Number(m[1]) : e.url;\r\n                const isMention = await _replaceWithMention(client, msgEntities, i, userIdOrUsername);\r\n                if (!isMention) {\r\n                    msgEntities.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [rawMessage, msgEntities];\r\n}\r\nexports._parseMessageText = _parseMessageText;\r\n/** @hidden */\r\nfunction _getResponseMessage(client, request, result, inputChat) {\r\n    let updates = [];\r\n    let entities = new Map();\r\n    if (result instanceof api_1.Api.UpdateShort) {\r\n        updates = [result.update];\r\n    }\r\n    else if (result instanceof api_1.Api.Updates ||\r\n        result instanceof api_1.Api.UpdatesCombined) {\r\n        updates = result.updates;\r\n        for (const x of [...result.users, ...result.chats]) {\r\n            entities.set(index_1.utils.getPeerId(x), x);\r\n        }\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n    const randomToId = new Map();\r\n    const idToMessage = new Map();\r\n    let schedMessage;\r\n    for (const update of updates) {\r\n        if (update instanceof api_1.Api.UpdateMessageID) {\r\n            randomToId.set(update.randomId.toString(), update.id);\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateNewChannelMessage ||\r\n            update instanceof api_1.Api.UpdateNewMessage) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            if (\"randomId\" in request || (0, Helpers_1.isArrayLike)(request)) {\r\n                idToMessage.set(update.message.id, update.message);\r\n            }\r\n            else {\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateEditMessage &&\r\n            \"peer\" in request &&\r\n            (0, Helpers_1._entityType)(request.peer) != Helpers_1._EntityType.CHANNEL) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            if (\"randomId\" in request) {\r\n                idToMessage.set(update.message.id, update.message);\r\n            }\r\n            else if (\"id\" in request && request.id === update.message.id) {\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateEditChannelMessage &&\r\n            \"peer\" in request &&\r\n            (0, Utils_1.getPeerId)(request.peer) ==\r\n                (0, Utils_1.getPeerId)(update.message.peerId)) {\r\n            if (request.id == update.message.id) {\r\n                update.message._finishInit(client, entities, inputChat);\r\n                return update.message;\r\n            }\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateNewScheduledMessage) {\r\n            update.message._finishInit(client, entities, inputChat);\r\n            schedMessage = update.message;\r\n            idToMessage.set(update.message.id, update.message);\r\n        }\r\n        else if (update instanceof api_1.Api.UpdateMessagePoll) {\r\n            if (request.media.poll.id == update.pollId) {\r\n                const m = new api_1.Api.Message({\r\n                    id: request.id,\r\n                    peerId: index_1.utils.getPeerId(request.peer),\r\n                    media: new api_1.Api.MessageMediaPoll({\r\n                        poll: update.poll,\r\n                        results: update.results,\r\n                    }),\r\n                    message: \"\",\r\n                    date: 0,\r\n                });\r\n                m._finishInit(client, entities, inputChat);\r\n                return m;\r\n            }\r\n        }\r\n    }\r\n    if (request == undefined) {\r\n        return idToMessage;\r\n    }\r\n    let randomId;\r\n    if ((0, Helpers_1.isArrayLike)(request) ||\r\n        typeof request == \"number\" ||\r\n        big_integer_1.default.isInstance(request)) {\r\n        randomId = request;\r\n    }\r\n    else {\r\n        randomId = request.randomId;\r\n    }\r\n    if (!randomId) {\r\n        if (schedMessage) {\r\n            return schedMessage;\r\n        }\r\n        client._log.warn(`No randomId in ${request} to map to. returning undefined for ${result}`);\r\n        return undefined;\r\n    }\r\n    if (!(0, Helpers_1.isArrayLike)(randomId)) {\r\n        let msg = idToMessage.get(randomToId.get(randomId.toString()));\r\n        if (!msg) {\r\n            client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\r\n        }\r\n        return msg;\r\n    }\r\n    const final = [];\r\n    let warned = false;\r\n    for (const rnd of randomId) {\r\n        const tmp = randomToId.get(rnd.toString());\r\n        if (!tmp) {\r\n            warned = true;\r\n            break;\r\n        }\r\n        const tmp2 = idToMessage.get(tmp);\r\n        if (!tmp2) {\r\n            warned = true;\r\n            break;\r\n        }\r\n        final.push(tmp2);\r\n    }\r\n    if (warned) {\r\n        client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);\r\n    }\r\n    const finalToReturn = [];\r\n    for (const rnd of randomId) {\r\n        finalToReturn.push(idToMessage.get(randomToId.get(rnd.toString())));\r\n    }\r\n    return finalToReturn;\r\n}\r\nexports._getResponseMessage = _getResponseMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}